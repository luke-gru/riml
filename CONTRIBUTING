If you're interested in contributing to Riml, thanks! Here's a brief overview
of how it works.

Brief Overview
==============

1. The lexer lexes riml source into an Array of tokens.

2. The parser, generated by Racc from the 'lib/grammar.y' file, creates an
Abstract Syntax Tree from the nodes in the 'lib/nodes.rb' file.

3. The AST rewriter rewrites portions of the tree. These portions are
Riml-only constructs, and mainly it rewrites Riml-only AST nodes into
VimL-compatible AST nodes. For example, one of the ways a ClassNode is
rewritten here is by removing it and adding 'function' nodes to create
the constructor and other functions that represent the class. Once this is
done, onto the compiler.

4. The compiler, implemented using the Visitor pattern, visits the nodes in a
bottom-up fashion after drilling down to the leaf nodes from the root. Nodes
append their compiled output (VimL) to their parent node's output. After all is done,
the root node (only node without a parent) is left with the full output.

Pull Requests
=============

When appropriate, please add unit tests for features or bugs. Also, please
update all documentation related to the changes that you've made, including
comments in the source code. If you don't know where all the affected areas
might be, don't hesitate to ask.

For pure documentation-related changes, please put '[ci skip]' somewhere in the
commit message so that Github Actions skips the build.
