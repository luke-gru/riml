#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require File.expand_path("../ast_rewriter", __FILE__)
  require File.expand_path("../errors", __FILE__)
module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 564)
  # This code will be put as-is in the parser class

  attr_accessor :ast_rewriter
  attr_writer :options

  # The Parser and AST_Rewriter share this same hash of options
  def options
    @options ||= {}
  end

  def self.ast_cache
    @ast_cache
  end
  @ast_cache = {}

  # parses tokens or code into output nodes
  def parse(object, ast_rewriter = Riml::AST_Rewriter.new, filename = nil, included = false)
    if (ast = self.class.ast_cache[filename])
    else
      if tokens?(object)
        @tokens = object
      elsif code?(object)
        @lexer = Riml::Lexer.new(object, filename, true)
      end

      begin
        ast = do_parse
      rescue Racc::ParseError => e
        raise unless @lexer
        if @lexer.prev_token_is_keyword?
          warning = "#{@lexer.invalid_keyword.inspect} is a keyword, and cannot " \
            "be used as a variable name"
        end
        error_msg = "#{e.message} at #{@lexer.filename}:#{@lexer.lineno}"
        error_msg << "\n\n#{warning}" if warning
        raise Riml::ParseError, error_msg
      end
      self.class.ast_cache[filename] = ast if filename
    end
    @ast_rewriter ||= ast_rewriter
    return ast unless @ast_rewriter
    @ast_rewriter.ast = ast.dup
    @ast_rewriter.options ||= options
    @ast_rewriter.rewrite(filename, included)
    @ast_rewriter.ast
  end

  # get the next token from either the list of tokens provided, or
  # the lexer getting the next token
  def next_token
    return @tokens.shift unless @lexer
    token = @lexer.next_token
    @current_parser_info = token.pop if token
    token
  end

  private

  def tokens?(object)
    Array === object
  end

  def code?(object)
    String === object
  end

  def make_node(racc_val)
    node = yield racc_val
    node.parser_info = @current_parser_info
    node
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'135,209,60,301,136,362,411,412,209,209,444,209,403,405,146,56,197,89',
'209,263,403,139,403,49,37,46,48,47,37,49,44,45,64,445,37,386,406,60',
'50,70,312,61,153,152,313,62,63,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113',
'106,108,107,133,134,101,100,137,186,80,38,52,37,81,38,82,85,83,84,87',
'38,105,86,37,75,76,153,152,57,56,88,89,77,37,90,58,59,78,37,46,48,47',
'91,49,44,45,64,72,73,272,277,60,50,70,79,61,271,37,438,62,63,139,48',
'47,-178,-178,-178,-178,209,147,48,47,38,60,-43,-43,325,149,380,403,376',
'60,327,38,382,381,270,-42,-42,161,429,269,428,38,375,309,29,-203,38',
'52,80,54,164,277,81,277,82,85,83,84,87,275,161,86,275,75,76,38,180,57',
'56,88,89,77,149,90,58,59,78,37,46,48,47,91,49,44,45,64,72,73,-116,164',
'60,50,70,79,61,164,-46,-46,62,63,293,275,149,164,309,164,-47,-47,-98',
'-204,209,164,164,373,164,49,387,-85,-85,-85,-85,153,152,-48,-48,256',
'388,-178,-178,-178,-178,-99,147,164,352,29,292,38,52,80,54,411,433,81',
'149,82,85,83,84,87,149,139,86,164,75,76,164,-98,57,56,88,89,77,149,90',
'58,59,78,37,46,48,47,91,49,44,45,64,72,73,-116,-99,60,50,70,79,61,389',
'274,315,62,63,-175,-175,-175,-175,-44,-44,60,50,70,270,-45,-45,268,-116',
'269,60,50,70,60,50,70,139,301,316,189,190,191,192,129,130,132,127,128',
'131,392,29,370,38,52,256,54,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113',
'106,108,107,133,134,101,100,137,105,80,129,130,132,81,-243,82,85,83',
'84,87,267,105,86,256,75,76,267,267,57,56,88,89,77,267,90,58,59,78,37',
'46,48,47,91,49,44,45,64,72,73,60,395,60,50,70,79,61,367,396,105,62,63',
'397,265,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120',
'124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133,134',
'101,29,52,38,52,80,54,398,366,81,302,82,85,83,84,87,105,261,86,400,75',
'76,60,105,57,56,88,89,77,139,90,58,59,78,37,46,48,47,91,49,44,45,64',
'72,73,-116,260,60,50,70,79,61,308,216,139,62,63,214,213,129,130,132',
'127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102,104',
'103,109,111,110,112,114,113,106,108,107,133,134,60,29,60,38,52,80,54',
'209,364,81,209,82,85,83,84,87,105,421,86,60,75,76,209,322,57,56,88,89',
'77,323,90,58,59,78,37,46,48,47,91,49,44,45,64,72,73,324,193,60,50,70',
'79,61,426,427,60,62,63,430,431,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,-176,-176,-176,-176,361,434,360,436',
'437,292,439,129,130,132,209,29,441,38,52,80,54,442,139,81,256,82,85',
'83,84,87,105,367,86,359,75,76,367,329,57,56,88,89,77,149,90,58,59,78',
'37,46,48,47,91,49,44,45,64,72,73,105,105,60,50,70,79,61,149,209,105',
'62,63,454,431,129,130,132,127,128,131,115,116,117,121,122,123,118,119',
'120,124,125,126,355,105,142,141,139,458,459,367,461,99,340,129,130,132',
'344,29,92,38,52,80,54,464,,81,,82,85,83,84,87,105,,86,,75,76,,,57,56',
'88,89,77,,90,58,59,78,37,46,48,47,91,49,44,45,64,72,73,105,,60,50,70',
'79,61,,,,62,63,,,129,130,132,127,128,131,115,116,117,121,122,123,118',
'119,120,124,125,126,129,130,132,127,128,131,,,,,,,129,130,132,29,,38',
'52,80,54,,,81,,82,85,83,84,87,105,149,86,,75,76,,,57,56,88,89,77,,90',
'58,59,78,105,46,48,47,91,49,44,45,64,72,73,-116,105,60,50,70,79,61,',
',319,62,63,,-175,-175,-175,-175,,,,,,,,,,,,,,,,,,,316,,,,,,129,130,132',
'127,128,131,29,,,52,,54,129,130,132,127,128,131,115,116,117,121,122',
'123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106',
'108,107,133,134,101,100,137,413,105,,,,,,,,,,,,105,,,,,,,,,,,,,,,,,129',
'130,132,127,128,131,129,130,132,127,128,131,129,130,132,127,128,131',
'115,116,117,121,122,123,118,119,120,124,125,126,102,104,103,109,111',
'110,112,114,113,106,108,107,133,134,101,100,137,408,105,,,,,,105,,146',
'56,,89,105,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,129',
'130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126',
'102,104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137',
'29,,,52,,54,,259,146,56,,89,,105,90,129,130,132,,46,48,47,,49,44,45',
'64,,,,,60,50,70,,61,,,,62,63,333,146,56,,89,,,90,,,,,46,48,47,,49,44',
'45,64,,,105,,60,50,70,,61,,,,62,63,,29,,,52,,54,,259,129,130,132,127',
'128,131,115,116,117,121,122,123,118,119,120,124,125,126,,,,,146,56,',
'89,29,-121,90,52,,54,,46,48,47,,49,44,45,64,,,,,60,50,70,105,61,,,,62',
'63,425,146,56,,89,,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,',
',62,63,,29,146,56,52,89,54,348,90,,,,,46,48,47,,49,44,45,64,,,,,60,50',
'70,,61,,,,62,63,29,146,56,52,89,54,,90,,,,167,46,48,47,,49,44,45,64',
',,,,60,50,70,,61,,,,62,63,,29,146,56,52,89,54,,90,,,,,46,48,47,,49,44',
'45,64,,,,,60,50,70,,61,,,,62,63,165,146,56,52,89,54,,90,,,,,46,48,47',
',49,44,45,64,,,-116,,60,50,70,,61,,,,62,63,,29,146,56,52,89,54,,90,',
',,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,176,146,56,52,89',
'54,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,,29,146,56',
'52,89,54,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,29',
'146,56,52,89,54,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62',
'63,,29,146,56,52,89,54,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61',
',,,62,63,29,146,56,52,89,54,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50',
'70,,61,,,,62,63,,29,146,56,52,89,54,,90,,,,,46,48,47,,49,44,45,64,,',
',,60,50,70,,61,,,,62,63,29,146,56,52,89,54,,90,,,,,46,48,47,,49,44,45',
'64,,,,,60,50,70,,61,,,,62,63,,29,146,56,52,89,54,,90,,,,,46,48,47,,49',
'44,45,64,,,,,60,50,70,,61,,,,62,63,29,146,56,52,89,54,,90,,,,,46,48',
'47,,49,44,45,64,,,-116,,60,50,70,,61,,,,62,63,,29,146,56,52,89,54,,90',
',,,,46,48,47,,49,44,45,64,,,-116,,60,50,70,,61,,,,62,63,29,146,56,52',
'89,54,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,,29,146',
'56,52,89,54,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63',
'29,146,56,52,89,54,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,',
',62,63,,29,146,56,52,89,54,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70',
',61,,,,62,63,29,146,56,52,89,54,,90,,,,,46,48,47,,49,44,45,64,,,,,60',
'50,70,,61,,,,62,63,,29,146,56,52,89,54,,90,,,,,46,48,47,,49,44,45,64',
',,,,60,50,70,,61,,,,62,63,29,-119,,52,,54,,,,129,130,132,127,128,131',
'115,116,117,121,122,123,118,119,120,124,125,126,,,,,146,56,,89,29,-119',
'90,52,,54,,46,48,47,,49,44,45,64,,,,,60,50,70,105,61,,,,62,63,146,56',
',89,,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56',
'29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,',
',29,-119,,52,,54,129,130,132,127,128,131,115,116,117,121,122,123,118',
'119,120,124,125,126,,,,,146,56,,89,,29,90,,52,,54,46,48,47,,49,44,45',
'64,,,-116,,60,50,70,105,61,,,,62,63,146,56,,89,,,90,,,,,46,48,47,,49',
'44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47',
',49,44,45,64,,,-116,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,',
',46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90',
'54,,,,46,48,47,,49,44,45,64,,,-116,,60,50,70,,61,,,,62,63,,,29,-119',
',52,,54,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120',
'124,125,126,,,,,146,56,,89,,29,90,,52,,54,46,48,47,,49,44,45,64,,,-116',
',60,50,70,105,61,,,,62,63,146,56,,89,,,90,,,,,46,48,47,,49,44,45,64',
',,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,286,,,,46,48,47,,49,44',
'45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,',
'49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48',
'47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,',
'46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90',
'54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,',
'52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29',
'89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146',
'56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63',
'146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,',
'62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,',
'61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,',
'60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64',
',,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44',
'45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,',
'49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48',
'47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,',
'46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90',
'54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,',
'52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29',
'89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146',
'56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63',
'146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,',
'62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,',
'61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,',
'60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64',
',,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44',
'45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,',
'49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48',
'47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,',
'46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90',
'54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,',
'52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29',
'89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146',
'56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63',
'146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,',
'62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,',
'61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,',
'60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64',
',,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44',
'45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,',
'49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48',
'47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,',
'46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,,,29,-119,,52,,54,,129',
'130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126',
',,,,146,56,,89,29,-119,90,52,,54,,46,48,47,,49,44,45,64,,,,,60,50,70',
'105,61,,,,62,63,146,56,,89,,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50',
'70,,61,,,,62,63,,,29,,,52,346,54,129,130,132,127,128,131,115,116,117',
'121,122,123,118,119,120,124,125,126,,,,,146,56,,89,,29,90,,52,,54,46',
'48,47,,49,44,45,64,,,,,60,50,70,105,61,,,,62,63,146,56,,89,,,90,,,,',
'46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,,,29,-119,,52,,54,,129',
'130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126',
',,,,146,56,,89,29,-119,90,52,,54,,46,48,47,,49,44,45,64,,,-116,,60,50',
'70,105,61,,,,62,63,146,56,,89,,,90,,,,,46,48,47,,49,44,45,64,,,,,60',
'50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,',
',,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45',
'64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49',
'44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47',
',49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,286,,,,46',
'48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,,,29,-119,,52,,54,129,130',
'132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,,,,',
'146,56,,89,,29,90,,52,,54,46,48,47,,49,44,45,64,,,,,60,50,70,105,61',
',,,62,63,146,56,,89,129,130,132,127,128,131,,46,48,47,,49,44,45,,,,',
',60,50,70,,61,,,,62,63,146,56,29,89,,52,,54,,,,46,48,47,,49,44,45,,105',
',,,60,50,70,,61,,,,62,63,146,56,186,89,,52,,,,,,46,48,47,,49,44,45,64',
',,,,60,50,70,,61,,,,62,63,,,171,,,173,,,,,,,,,,,,,,,,451,,,,,,129,130',
'132,127,128,131,,,186,,,52,129,130,132,127,128,131,115,116,117,121,122',
'123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106',
'108,107,133,134,101,100,137,209,105,,,,,129,130,132,127,128,131,,105',
',,,,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124',
'125,126,102,104,103,109,111,110,112,114,113,106,108,107,133,134,101',
'100,137,209,105,,,,,129,130,132,127,128,131,,105,,,,,129,130,132,127',
'128,131,115,116,117,121,122,123,118,119,120,124,125,126,102,104,103',
'109,111,110,112,114,113,106,108,107,133,134,101,100,137,209,105,,,,',
'129,130,132,127,128,131,,105,,,,,129,130,132,127,128,131,115,116,117',
'121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114',
'113,106,108,107,133,134,101,100,137,209,105,,,,,129,130,132,127,128',
'131,,105,,,,,129,130,132,127,128,131,115,116,117,121,122,123,118,119',
'120,124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133',
'134,101,100,137,456,105,,,,,129,130,132,127,128,131,,105,,,,,129,130',
'132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102',
'104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,209',
'105,,,,,,,,,,,,105,,,,,129,130,132,127,128,131,115,116,117,121,122,123',
'118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106,108',
'107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115',
'116,117,121,122,123,118,119,120,124,125,126,102,104,103,109,111,110',
'112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,338,,,339,105,129',
'130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126',
'102,104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137',
',,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122,123,118',
'119,120,124,125,126,102,104,103,109,111,110,112,114,113,106,108,107',
'133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116',
'117,121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112',
'114,113,106,108,107,133,134,101,100,137,,,,,,,358,,,,,,,105,129,130',
'132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102',
'104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,',
',,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122,123,118,119',
'120,124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133',
'134,101,100,137,,,,,,,358,,,,,,,105,129,130,132,127,128,131,115,116',
'117,121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112',
'114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132',
'127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102,104',
'103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,,',
',,,,273,105,129,130,132,127,128,131,115,116,117,121,122,123,118,119',
'120,124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133',
'134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117',
'121,122,123,118,119,120,124,125,126,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,105',
'129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125',
'126,102,104,103,109,111,110,112,114,113,106,108,107,133,134,101,100',
'137,,,,,,,,,,391,,,339,105,129,130,132,127,128,131,115,116,117,121,122',
'123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106',
'108,107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131',
'115,116,117,121,122,123,118,119,120,124,125,126,102,104,103,109,111',
'110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105,129',
'130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126',
'102,104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137',
',,,,,,264,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122,123',
'118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106,108',
'107,,,,,,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122',
'123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106',
'108,107,,,,,,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113',
'106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128',
'131,115,116,117,121,122,123,118,119,120,124,125,126,102,104,103,109',
'111,110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105',
'129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125',
'126,102,104,103,109,111,110,112,114,113,106,108,107,133,134,101,100',
'137,,,,,,,,,,,,,335,105,129,130,132,127,128,131,115,116,117,121,122',
'123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106',
'108,107,133,134,101,100,137,,,,,,,,,,394,,,,105,129,130,132,127,128',
'131,115,116,117,121,122,123,118,119,120,124,125,126,102,104,103,109',
'111,110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105',
'129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125',
'126,102,104,103,109,111,110,112,114,113,106,108,107,133,134,101,100',
'137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122,123',
'118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106,108',
'107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115',
'116,117,121,122,123,118,119,120,124,125,126,102,104,103,109,111,110',
'112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130',
'132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102',
'104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,',
',,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122,123,118,119',
'120,124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133',
'134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117',
'121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114',
'113,106,108,107,133,134,101,100,137,,,,,,,264,,,,,,,105,129,130,132',
'127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102,104',
'103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,,',
',,,,,105,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120',
'124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133,134',
'101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113',
'106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128',
'131,115,116,117,121,122,123,118,119,120,124,125,126,102,104,103,109',
'111,110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105',
'129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125',
'126,102,104,103,109,111,110,112,114,113,106,108,107,133,134,101,100',
'137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122,123',
'118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106,108',
'107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115',
'116,117,121,122,123,118,119,120,124,125,126,102,104,103,109,111,110',
'112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105' ]
        racc_action_table = arr = ::Array.new(6558, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'22,447,74,300,22,300,372,372,329,365,429,443,447,366,99,99,74,99,327',
'143,365,143,443,327,2,99,99,99,328,99,99,99,99,429,372,329,366,99,99',
'99,200,99,40,40,200,99,99,22,22,22,22,22,22,22,22,22,22,22,22,22,22',
'22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,99,456',
'2,99,450,456,328,456,456,456,456,456,372,22,456,94,456,456,285,285,456',
'456,456,456,456,462,456,456,456,456,456,456,456,456,456,456,456,456',
'456,456,456,157,162,456,456,456,456,456,157,457,416,456,456,174,59,59',
'281,281,281,281,460,281,180,180,450,59,281,281,208,170,326,460,321,180',
'208,94,326,326,296,285,285,175,404,296,404,462,320,211,456,162,456,456',
'209,456,162,276,209,310,209,209,209,209,209,275,55,209,161,209,209,457',
'59,209,209,209,209,209,284,209,209,209,209,209,209,209,209,209,209,209',
'209,209,209,209,209,175,209,209,209,209,209,211,279,279,209,209,169',
'309,264,276,198,310,280,280,426,161,382,275,55,318,161,382,330,138,138',
'138,138,179,179,284,284,138,331,31,31,31,31,398,31,288,288,209,166,209',
'209,3,209,410,410,3,282,3,3,3,3,3,283,264,3,309,3,3,198,426,3,3,3,3',
'3,358,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,398,3,3,3,3,3,334,160,201,3,3',
'283,283,283,283,282,282,72,72,72,155,283,283,155,8,155,8,8,8,73,73,73',
'358,181,201,66,66,66,66,233,233,233,233,233,233,337,3,314,3,3,154,3',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,233,316,245,245,245,316,316,316,316,316,316,316,342,201,316,343',
'316,316,151,150,316,316,316,316,316,148,316,316,316,316,316,316,316',
'316,316,316,316,316,316,316,316,86,351,316,316,316,316,316,311,353,245',
'316,316,354,146,218,218,218,218,218,218,218,218,218,218,218,218,218',
'218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218',
'218,218,218,316,86,316,316,0,316,357,311,0,182,0,0,0,0,0,218,141,0,363',
'0,0,364,183,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,0,0,0',
'0,0,197,97,96,0,0,92,90,219,219,219,219,219,219,219,219,219,219,219',
'219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219',
'219,219,219,219,89,0,88,0,0,451,0,381,308,451,384,451,451,451,451,451',
'219,385,451,386,451,451,87,205,451,451,451,451,451,206,451,451,451,451',
'451,451,451,451,451,451,451,451,451,451,451,207,70,451,451,451,451,451',
'399,402,301,451,451,405,406,220,220,220,220,220,220,220,220,220,220',
'220,220,220,220,220,220,220,220,42,42,42,42,299,411,298,414,415,178',
'417,249,249,249,419,451,422,451,451,434,451,423,43,434,297,434,434,434',
'434,434,220,428,434,295,434,434,430,210,434,434,434,434,434,35,434,434',
'434,434,434,434,434,434,434,434,434,434,434,434,434,249,247,434,434',
'434,434,434,32,441,248,434,434,444,445,221,221,221,221,221,221,221,221',
'221,221,221,221,221,221,221,221,221,221,291,250,27,24,23,452,453,454',
'455,19,258,184,184,184,266,434,1,434,434,95,434,463,,95,,95,95,95,95',
'95,221,,95,,95,95,,,95,95,95,95,95,,95,95,95,95,95,95,95,95,95,95,95',
'95,95,95,95,184,,95,95,95,95,95,,,,95,95,,,222,222,222,222,222,222,222',
'222,222,222,222,222,222,222,222,222,222,222,234,234,234,234,234,234',
',,,,,,185,185,185,95,,95,95,93,95,,,93,,93,93,93,93,93,222,33,93,,93',
'93,,,93,93,93,93,93,,93,93,93,93,234,93,93,93,93,93,93,93,93,93,93,93',
'185,93,93,93,93,93,,,202,93,93,,33,33,33,33,,,,,,,,,,,,,,,,,,,202,,',
',,,235,235,235,235,235,235,93,,,93,,93,202,202,202,202,202,202,202,202',
'202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,202,202,202,202,202,374,235,,,,,,,,,,,,202,,,,,',
',,,,,,,,,,,236,236,236,236,236,236,237,237,237,237,237,237,374,374,374',
'374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374',
'374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,371,236',
',,,,,237,,139,139,,139,374,,139,,,,,139,139,139,,139,139,139,139,,,',
',139,139,139,,139,,,,139,139,371,371,371,371,371,371,371,371,371,371',
'371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371',
'371,371,371,371,371,371,371,371,139,,,139,,139,,139,256,256,,256,,371',
'256,246,246,246,,256,256,256,,256,256,256,256,,,,,256,256,256,,256,',
',,256,256,213,213,213,,213,,,213,,,,,213,213,213,,213,213,213,213,,',
'246,,213,213,213,,213,,,,213,213,,256,,,256,,256,,256,224,224,224,224',
'224,224,224,224,224,224,224,224,224,224,224,224,224,224,,,,,272,272',
',272,213,213,272,213,,213,,272,272,272,,272,272,272,272,,,,,272,272',
'272,224,272,,,,272,272,388,388,388,,388,,,388,,,,,388,388,388,,388,388',
'388,388,,,,,388,388,388,,388,,,,388,388,,272,130,130,272,130,272,272',
'130,,,,,130,130,130,,130,130,130,130,,,,,130,130,130,,130,,,,130,130',
'388,56,56,388,56,388,,56,,,,56,56,56,56,,56,56,56,56,,,,,56,56,56,,56',
',,,56,56,,130,189,189,130,189,130,,189,,,,,189,189,189,,189,189,189',
'189,,,,,189,189,189,,189,,,,189,189,56,58,58,56,58,56,,58,,,,,58,58',
'58,,58,58,58,58,,,58,,58,58,58,,58,,,,58,58,,189,186,186,189,186,189',
',186,,,,,186,186,186,,186,186,186,186,,,,,186,186,186,,186,,,,186,186',
'58,61,61,58,61,58,,61,,,,,61,61,61,,61,61,61,61,,,,,61,61,61,,61,,,',
'61,61,,186,62,62,186,62,186,,62,,,,,62,62,62,,62,62,62,62,,,,,62,62',
'62,,62,,,,62,62,61,63,63,61,63,61,,63,,,,,63,63,63,,63,63,63,63,,,,',
'63,63,63,,63,,,,63,63,,62,312,312,62,312,62,,312,,,,,312,312,312,,312',
'312,312,312,,,,,312,312,312,,312,,,,312,312,63,412,412,63,412,63,,412',
',,,,412,412,412,,412,412,412,412,,,,,412,412,412,,412,,,,412,412,,312',
'313,313,312,313,312,,313,,,,,313,313,313,,313,313,313,313,,,,,313,313',
'313,,313,,,,313,313,412,315,315,412,315,412,,315,,,,,315,315,315,,315',
'315,315,315,,,,,315,315,315,,315,,,,315,315,,313,319,319,313,319,313',
',319,,,,,319,319,319,,319,319,319,319,,,,,319,319,319,,319,,,,319,319',
'315,339,339,315,339,315,,339,,,,,339,339,339,,339,339,339,339,,,339',
',339,339,339,,339,,,,339,339,,319,78,78,319,78,319,,78,,,,,78,78,78',
',78,78,78,78,,,78,,78,78,78,,78,,,,78,78,339,80,80,339,80,339,,80,,',
',,80,80,80,,80,80,80,80,,,,,80,80,80,,80,,,,80,80,,78,81,81,78,81,78',
',81,,,,,81,81,81,,81,81,81,81,,,,,81,81,81,,81,,,,81,81,80,82,82,80',
'82,80,,82,,,,,82,82,82,,82,82,82,82,,,,,82,82,82,,82,,,,82,82,,81,85',
'85,81,85,81,,85,,,,,85,85,85,,85,85,85,85,,,,,85,85,85,,85,,,,85,85',
'82,274,274,82,274,82,,274,,,,,274,274,274,,274,274,274,274,,,,,274,274',
'274,,274,,,,274,274,,85,387,387,85,387,85,,387,,,,,387,387,387,,387',
'387,387,387,,,,,387,387,387,,387,,,,387,387,274,274,,274,,274,,,,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225',
',,,,322,322,,322,387,387,322,387,,387,,322,322,322,,322,322,322,322',
',,,,322,322,322,225,322,,,,322,322,176,176,,176,,,176,,,,,176,176,176',
',176,176,176,176,,,,,176,176,176,,176,,,,176,176,323,323,322,323,,322',
'323,322,,,,323,323,323,,323,323,323,323,,,,,323,323,323,,323,,,,323',
'323,,,176,176,,176,,176,226,226,226,226,226,226,226,226,226,226,226',
'226,226,226,226,226,226,226,,,,,54,54,,54,,323,54,,323,,323,54,54,54',
',54,54,54,54,,,54,,54,54,54,226,54,,,,54,54,29,29,,29,,,29,,,,,29,29',
'29,,29,29,29,29,,,,,29,29,29,,29,,,,29,29,173,173,54,173,,54,173,54',
',,,173,173,173,,173,173,173,173,,,173,,173,173,173,,173,,,,173,173,171',
'171,29,171,,29,171,29,,,,171,171,171,,171,171,171,171,,,,,171,171,171',
',171,,,,171,171,52,52,173,52,,173,52,173,,,,52,52,52,,52,52,52,52,,',
'52,,52,52,52,,52,,,,52,52,,,171,171,,171,,171,227,227,227,227,227,227',
'227,227,227,227,227,227,227,227,227,227,227,227,,,,,286,286,,286,,52',
'286,,52,,52,286,286,286,,286,286,286,286,,,286,,286,286,286,227,286',
',,,286,286,324,324,,324,,,324,,,,,324,324,324,,324,324,324,324,,,,,324',
'324,324,,324,,,,324,324,100,100,286,100,,286,100,286,,,,100,100,100',
',100,100,100,100,,,,,100,100,100,,100,,,,100,100,101,101,324,101,,324',
'101,324,,,,101,101,101,,101,101,101,101,,,,,101,101,101,,101,,,,101',
'101,102,102,100,102,,100,102,100,,,,102,102,102,,102,102,102,102,,,',
',102,102,102,,102,,,,102,102,103,103,101,103,,101,103,101,,,,103,103',
'103,,103,103,103,103,,,,,103,103,103,,103,,,,103,103,104,104,102,104',
',102,104,102,,,,104,104,104,,104,104,104,104,,,,,104,104,104,,104,,',
',104,104,105,105,103,105,,103,105,103,,,,105,105,105,,105,105,105,105',
',,,,105,105,105,,105,,,,105,105,106,106,104,106,,104,106,104,,,,106',
'106,106,,106,106,106,106,,,,,106,106,106,,106,,,,106,106,107,107,105',
'107,,105,107,105,,,,107,107,107,,107,107,107,107,,,,,107,107,107,,107',
',,,107,107,108,108,106,108,,106,108,106,,,,108,108,108,,108,108,108',
'108,,,,,108,108,108,,108,,,,108,108,109,109,107,109,,107,109,107,,,',
'109,109,109,,109,109,109,109,,,,,109,109,109,,109,,,,109,109,110,110',
'108,110,,108,110,108,,,,110,110,110,,110,110,110,110,,,,,110,110,110',
',110,,,,110,110,111,111,109,111,,109,111,109,,,,111,111,111,,111,111',
'111,111,,,,,111,111,111,,111,,,,111,111,112,112,110,112,,110,112,110',
',,,112,112,112,,112,112,112,112,,,,,112,112,112,,112,,,,112,112,113',
'113,111,113,,111,113,111,,,,113,113,113,,113,113,113,113,,,,,113,113',
'113,,113,,,,113,113,114,114,112,114,,112,114,112,,,,114,114,114,,114',
'114,114,114,,,,,114,114,114,,114,,,,114,114,115,115,113,115,,113,115',
'113,,,,115,115,115,,115,115,115,115,,,,,115,115,115,,115,,,,115,115',
'116,116,114,116,,114,116,114,,,,116,116,116,,116,116,116,116,,,,,116',
'116,116,,116,,,,116,116,117,117,115,117,,115,117,115,,,,117,117,117',
',117,117,117,117,,,,,117,117,117,,117,,,,117,117,118,118,116,118,,116',
'118,116,,,,118,118,118,,118,118,118,118,,,,,118,118,118,,118,,,,118',
'118,119,119,117,119,,117,119,117,,,,119,119,119,,119,119,119,119,,,',
',119,119,119,,119,,,,119,119,120,120,118,120,,118,120,118,,,,120,120',
'120,,120,120,120,120,,,,,120,120,120,,120,,,,120,120,121,121,119,121',
',119,121,119,,,,121,121,121,,121,121,121,121,,,,,121,121,121,,121,,',
',121,121,122,122,120,122,,120,122,120,,,,122,122,122,,122,122,122,122',
',,,,122,122,122,,122,,,,122,122,191,191,121,191,,121,191,121,,,,191',
'191,191,,191,191,191,191,,,,,191,191,191,,191,,,,191,191,124,124,122',
'124,,122,124,122,,,,124,124,124,,124,124,124,124,,,,,124,124,124,,124',
',,,124,124,125,125,191,125,,191,125,191,,,,125,125,125,,125,125,125',
'125,,,,,125,125,125,,125,,,,125,125,126,126,124,126,,124,126,124,,,',
'126,126,126,,126,126,126,126,,,,,126,126,126,,126,,,,126,126,127,127',
'125,127,,125,127,125,,,,127,127,127,,127,127,127,127,,,,,127,127,127',
',127,,,,127,127,128,128,126,128,,126,128,126,,,,128,128,128,,128,128',
'128,128,,,,,128,128,128,,128,,,,128,128,129,129,127,129,,127,129,127',
',,,129,129,129,,129,129,129,129,,,,,129,129,129,,129,,,,129,129,190',
'190,128,190,,128,190,128,,,,190,190,190,,190,190,190,190,,,,,190,190',
'190,,190,,,,190,190,131,131,129,131,,129,131,129,,,,131,131,131,,131',
'131,131,131,,,,,131,131,131,,131,,,,131,131,132,132,190,132,,190,132',
'190,,,,132,132,132,,132,132,132,132,,,,,132,132,132,,132,,,,132,132',
'133,133,131,133,,131,133,131,,,,133,133,133,,133,133,133,133,,,,,133',
'133,133,,133,,,,133,133,134,134,132,134,,132,134,132,,,,134,134,134',
',134,134,134,134,,,,,134,134,134,,134,,,,134,134,135,135,133,135,,133',
'135,133,,,,135,135,135,,135,135,135,135,,,,,135,135,135,,135,,,,135',
'135,136,136,134,136,,134,136,134,,,,136,136,136,,136,136,136,136,,,',
',136,136,136,,136,,,,136,136,137,137,135,137,,135,137,135,,,,137,137',
'137,,137,137,137,137,,,,,137,137,137,,137,,,,137,137,273,273,136,273',
',136,273,136,,,,273,273,273,,273,273,273,273,,,,,273,273,273,,273,,',
',273,273,431,431,137,431,,137,431,137,,,,431,431,431,,431,431,431,431',
',,,,431,431,431,,431,,,,431,431,433,433,273,433,,273,433,273,,,,433',
'433,433,,433,433,433,433,,,,,433,433,433,,433,,,,433,433,360,360,431',
'360,,431,360,431,,,,360,360,360,,360,360,360,360,,,,,360,360,360,,360',
',,,360,360,165,165,433,165,,433,165,433,,,,165,165,165,,165,165,165',
'165,,,,,165,165,165,,165,,,,165,165,,,360,360,,360,,360,,228,228,228',
'228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,,,,,270',
'270,,270,165,165,270,165,,165,,270,270,270,,270,270,270,270,,,,,270',
'270,270,228,270,,,,270,270,268,268,,268,,,268,,,,,268,268,268,,268,268',
'268,268,,,,,268,268,268,,268,,,,268,268,,,270,,,270,270,270,229,229',
'229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,,,,',
'265,265,,265,,268,265,,268,,268,265,265,265,,265,265,265,265,,,,,265',
'265,265,229,265,,,,265,265,147,147,,147,,,147,,,,,147,147,147,,147,147',
'147,147,,,,,147,147,147,,147,,,,147,147,,,265,265,,265,,265,,230,230',
'230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,,,,',
'259,259,,259,147,147,259,147,,147,,259,259,259,,259,259,259,259,,,259',
',259,259,259,230,259,,,,259,259,289,289,,289,,,289,,,,,289,289,289,',
'289,289,289,289,,,,,289,289,289,,289,,,,289,289,192,192,259,192,,259',
'192,259,,,,192,192,192,,192,192,192,192,,,,,192,192,192,,192,,,,192',
'192,292,292,289,292,,289,292,289,,,,292,292,292,,292,292,292,292,,,',
',292,292,292,,292,,,,292,292,164,164,192,164,,192,164,192,,,,164,164',
'164,,164,164,164,164,,,,,164,164,164,,164,,,,164,164,293,293,292,293',
',292,293,292,,,,293,293,293,,293,293,293,293,,,,,293,293,293,,293,,',
',293,293,335,335,164,335,,164,335,164,,,,335,335,335,,335,335,335,335',
',,,,335,335,335,,335,,,,335,335,,,293,293,,293,,293,231,231,231,231',
'231,231,231,231,231,231,231,231,231,231,231,231,231,231,,,,,123,123',
',123,,335,123,,335,,335,123,123,123,,123,123,123,123,,,,,123,123,123',
'231,123,,,,123,123,64,64,,64,238,238,238,238,238,238,,64,64,64,,64,64',
'64,,,,,,64,64,64,,64,,,,64,64,57,57,123,57,,123,,123,,,,57,57,57,,57',
'57,57,,238,,,,57,57,57,,57,,,,57,57,142,142,64,142,,64,,,,,,142,142',
'142,,142,142,142,142,,,,,142,142,142,,142,,,,142,142,,,57,,,57,,,,,',
',,,,,,,,,,435,,,,,,239,239,239,239,239,239,,,142,,,142,435,435,435,435',
'435,435,435,435,435,435,435,435,435,435,435,435,435,435,435,435,435',
'435,435,435,435,435,435,435,435,435,435,435,435,435,435,203,239,,,,',
'240,240,240,240,240,240,,435,,,,,203,203,203,203,203,203,203,203,203',
'203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203',
'203,203,203,203,203,203,203,203,203,379,240,,,,,241,241,241,241,241',
'241,,203,,,,,379,379,379,379,379,379,379,379,379,379,379,379,379,379',
'379,379,379,379,379,379,379,379,379,379,379,379,379,379,379,379,379',
'379,379,379,379,378,241,,,,,242,242,242,242,242,242,,379,,,,,378,378',
'378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378',
'378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,204',
'242,,,,,243,243,243,243,243,243,,378,,,,,204,204,204,204,204,204,204',
'204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204',
'204,204,204,204,204,204,204,204,204,204,204,449,243,,,,,244,244,244',
'244,244,244,,204,,,,,449,449,449,449,449,449,449,449,449,449,449,449',
'449,449,449,449,449,449,449,449,449,449,449,449,449,449,449,449,449',
'449,449,449,449,449,449,377,244,,,,,,,,,,,,449,,,,,377,377,377,377,377',
'377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377',
'377,377,377,377,377,377,377,377,377,377,377,377,377,,,,,,,,,,,,,,377',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257',
'257,,,,,,,,,,257,,,257,257,305,305,305,305,305,305,305,305,305,305,305',
'305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305',
'305,305,305,305,305,305,305,,,,,,,,,,,,,,305,304,304,304,304,304,304',
'304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304',
'304,304,304,304,304,304,304,304,304,304,304,304,,,,,,,,,,,,,,304,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303',
',,,,,,303,,,,,,,303,168,168,168,168,168,168,168,168,168,168,168,168',
'168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168',
'168,168,168,168,168,168,,,,,,,,,,,,,,168,294,294,294,294,294,294,294',
'294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294',
'294,294,294,294,294,294,294,294,294,294,294,,,,,,,294,,,,,,,294,332',
'332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332',
'332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332',
',,,,,,,,,,,,,332,159,159,159,159,159,159,159,159,159,159,159,159,159',
'159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159',
'159,159,159,159,159,,,,,,,,,,,,,159,159,223,223,223,223,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,,,,,,,,,,,,,,223,232,232',
'232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,232,336,336,336,336,336,336,336,336,336,336',
'336,336,336,336,336,336,336,336,336,336,336,336,336,336,336,336,336',
'336,336,336,336,336,336,336,336,,,,,,,,,,336,,,336,336,156,156,156,156',
'156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156',
'156,156,156,156,156,156,156,156,156,156,156,156,156,156,,,,,,,,,,,,',
',156,341,341,341,341,341,341,341,341,341,341,341,341,341,341,341,341',
'341,341,341,341,341,341,341,341,341,341,341,341,341,341,341,341,341',
'341,341,,,,,,,,,,,,,,341,290,290,290,290,290,290,290,290,290,290,290',
'290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290',
'290,290,290,290,290,290,290,,,,,,,290,,,,,,,290,251,251,251,251,251',
'251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251',
'251,251,251,251,251,251,251,251,,,,,,,,,,,,,,,,,,,251,252,252,252,252',
'252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252',
'252,252,252,252,252,252,252,252,252,,,,,,,,,,,,,,,,,,,252,253,253,253',
'253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253',
'253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,,,,,,,,',
',,,,,253,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254',
'254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254',
'254,254,254,,,,,,,,,,,,,,254,255,255,255,255,255,255,255,255,255,255',
'255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255',
'255,255,255,255,255,255,255,255,,,,,,,,,,,,,255,255,345,345,345,345',
'345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345',
'345,345,345,345,345,345,345,345,345,345,345,345,345,345,,,,,,,,,,345',
',,,345,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306',
'306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306',
'306,306,,,,,,,,,,,,,,306,347,347,347,347,347,347,347,347,347,347,347',
'347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,347',
'347,347,347,347,347,347,347,,,,,,,,,,,,,,347,350,350,350,350,350,350',
'350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350',
'350,350,350,350,350,350,350,350,350,350,350,350,,,,,,,,,,,,,,350,307',
'307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307',
'307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307',
',,,,,,,,,,,,,307,356,356,356,356,356,356,356,356,356,356,356,356,356',
'356,356,356,356,356,356,356,356,356,356,356,356,356,356,356,356,356',
'356,356,356,356,356,,,,,,,,,,,,,,356,287,287,287,287,287,287,287,287',
'287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287',
'287,287,287,287,287,287,287,287,287,287,,,,,,,,,,,,,,287,145,145,145',
'145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145',
'145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,,,,,,,145',
',,,,,,145,368,368,368,368,368,368,368,368,368,368,368,368,368,368,368',
'368,368,368,368,368,368,368,368,368,368,368,368,368,368,368,368,368',
'368,368,368,,,,,,,,,,,,,,368,369,369,369,369,369,369,369,369,369,369',
'369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369',
'369,369,369,369,369,369,369,369,,,,,,,,,,,,,,369,393,393,393,393,393',
'393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393',
'393,393,393,393,393,393,393,393,393,393,393,393,393,,,,,,,,,,,,,,393',
'424,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424',
'424,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424',
'424,,,,,,,,,,,,,,424,199,199,199,199,199,199,199,199,199,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199',
'199,199,199,199,199,199,,,,,,,,,,,,,,199,448,448,448,448,448,448,448',
'448,448,448,448,448,448,448,448,448,448,448,448,448,448,448,448,448',
'448,448,448,448,448,448,448,448,448,448,448,,,,,,,,,,,,,,448,390,390',
'390,390,390,390,390,390,390,390,390,390,390,390,390,390,390,390,390',
'390,390,390,390,390,390,390,390,390,390,390,390,390,390,390,390,,,,',
',,,,,,,,,390' ]
        racc_action_check = arr = ::Array.new(6558, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   483,   755,    -7,   263,   nil,   nil,   nil,   nil,   288,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   660,
   nil,   nil,    -2,   651,   688,   nil,   nil,   653,   nil,  2201,
   nil,   169,   671,   818,   nil,   648,   nil,   nil,   nil,   nil,
     9,   nil,   564,   578,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  2300,   nil,  2168,   144,  1319,  4399,  1388,   103,
   nil,  1457,  1492,  1526,  4366,   nil,   257,   nil,   nil,   nil,
   575,   nil,   279,   291,   -42,   nil,   nil,   nil,  1768,   nil,
  1802,  1837,  1871,   nil,   nil,  1906,   390,   562,   529,   527,
   449,   nil,   537,   847,    66,   756,   442,   491,   nil,    -7,
  2429,  2462,  2495,  2528,  2561,  2594,  2627,  2660,  2693,  2726,
  2759,  2792,  2825,  2858,  2891,  2924,  2957,  2990,  3023,  3056,
  3089,  3122,  3155,  4333,  3221,  3254,  3287,  3320,  3353,  3386,
  1285,  3452,  3485,  3518,  3551,  3584,  3617,  3650,   159,  1042,
   483,   455,  4432,   -71,   nil,  6117,   358,  4008,   375,   nil,
   369,   368,   nil,   nil,   264,   238,  5382,    35,   nil,  5186,
   224,   146,    82,   nil,  4204,  3815,   174,   nil,  5039,   137,
   108,  2267,   nil,  2234,    43,   121,  2072,   nil,   569,   214,
   111,   251,   448,   406,   701,   793,  1423,   417,   nil,  1354,
  3419,  3188,  4138,   nil,   nil,   nil,   nil,   490,   188,  6362,
    38,   309,   893,  4529,  4688,   578,   584,   600,   143,   172,
   643,   127,   nil,  1152,   nil,   nil,   nil,   nil,   399,   490,
   581,   672,   763,  5235,  1166,  1989,  2118,  2313,  3829,  3925,
  4022,  4283,  5284,   296,   781,   881,   958,   964,  4342,  4464,
  4517,  4570,  4623,  4676,  4729,   346,  1097,   611,   619,   610,
   643,  5529,  5578,  5627,  5676,  5725,  1118,  4843,   656,  4072,
   nil,   nil,   nil,   nil,   185,  3975,   663,   nil,  3912,   nil,
  3879,   nil,  1216,  3683,  1940,   143,   135,   nil,   nil,   128,
   138,    54,   227,   233,   155,    67,  2363,  6068,   165,  4105,
  5480,   649,  4171,  4237,  5088,   591,    72,   580,   565,   562,
   -85,   581,   nil,  4990,  4941,  4892,  5823,  5970,   524,   185,
   137,   399,  1561,  1630,   346,  1664,   392,   nil,   232,  1699,
   161,   147,  2039,  2105,  2396,   nil,   145,   -13,    -3,   -23,
   153,   164,  5137,   nil,   222,  4270,  5333,   258,   nil,  1733,
   nil,  5431,   362,   316,   nil,  5774,   nil,  5872,   nil,   nil,
  5921,   345,   nil,   347,   351,   nil,  6019,   397,   246,   nil,
  3782,   nil,   nil,   457,   458,   -22,    -6,   nil,  6166,  6215,
   nil,  1047,     3,   nil,   970,   nil,   nil,  4794,  4635,  4582,
   nil,   547,   205,   nil,   550,   581,   546,  1975,  1250,   nil,
  6460,   nil,   nil,  6264,   nil,   nil,   nil,   nil,   214,   533,
   nil,   nil,   617,   nil,    76,   538,   545,   nil,   nil,   nil,
   264,   622,  1595,   nil,   648,   649,   125,   651,   nil,   631,
   nil,   nil,   622,   579,  6313,   nil,   191,   nil,   637,    -9,
   642,  3716,   nil,  3749,   665,  4476,   nil,   nil,   nil,   nil,
   nil,   684,   nil,   -20,   629,   636,   nil,   -30,  6411,  4741,
    55,   574,   737,   738,   704,   740,    81,   100,   nil,   nil,
   111,   nil,    76,   753,   nil ]

racc_action_default = [
    -1,  -257,    -2,    -3,    -4,    -8,    -9,   -10,   -11,   -12,
   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,
   -23,   -24,   -25,   -26,   -27,   -29,   -30,   -31,   -32,  -116,
   -34,   -35,   -36,   -37,   -38,   -39,   -40,   -49,   -50,   -51,
   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,   -60,   -63,
   -64,   -65,   -69,   -72,   -75,  -257,  -116,  -116,  -119,  -116,
  -115,  -116,  -116,  -116,  -116,  -168,  -257,  -177,  -179,  -180,
  -257,  -184,  -116,  -116,  -116,  -200,  -201,  -202,  -217,  -219,
  -116,  -116,  -116,  -228,  -229,  -116,  -116,  -257,  -116,  -116,
  -255,  -256,  -257,    -6,    -7,  -116,  -257,  -257,  -188,  -116,
  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,
  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,
  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,
  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,   -83,  -116,
   -28,  -257,  -116,   -26,   -31,  -257,  -257,  -116,   -80,   -94,
   -79,   -81,   -61,   -62,  -182,  -257,   -70,  -257,   -76,  -257,
  -257,  -183,  -185,  -189,  -116,  -116,  -101,  -102,  -127,   -35,
   -37,  -116,   -54,   -69,  -257,  -257,  -116,  -107,  -120,  -111,
  -116,  -109,  -257,  -164,  -165,  -166,  -116,  -257,  -167,  -116,
  -116,  -116,  -116,  -181,  -186,  -187,  -117,  -257,  -257,  -218,
  -214,  -257,  -257,  -257,  -257,  -257,  -257,  -257,  -237,  -243,
  -257,  -257,  -253,  -116,   465,    -5,  -183,  -170,  -129,  -130,
  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,
  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,
  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,
  -161,  -162,  -163,  -222,  -225,  -257,  -116,  -257,  -257,   -93,
   -97,   -96,  -169,   -41,   -33,  -116,  -257,   -95,  -116,   -67,
  -116,   -73,  -116,  -116,  -116,  -257,  -190,  -191,  -192,   -29,
   -30,   -35,   -36,   -37,   -39,   -52,   -75,  -257,  -257,  -116,
  -127,  -257,  -116,  -116,  -127,  -257,  -257,   -83,  -257,  -257,
  -257,  -116,  -110,  -257,  -171,  -172,  -173,  -174,  -257,  -204,
  -203,  -207,  -116,  -116,  -257,  -116,  -116,  -244,  -257,  -116,
  -257,  -257,  -116,  -116,  -116,  -234,  -257,  -257,  -242,  -257,
  -105,  -122,  -123,  -124,  -257,  -116,  -257,  -257,   -86,   -91,
   -87,   -92,   -82,   -84,   -99,  -257,   -68,   -71,   -74,   -77,
   -78,  -257,  -193,  -257,  -257,  -100,  -128,  -257,  -257,  -103,
  -116,  -106,  -108,  -257,  -116,  -257,  -208,  -205,  -215,  -216,
  -220,  -257,  -242,  -223,  -257,  -227,  -230,  -257,  -257,  -257,
  -235,  -257,  -257,  -238,  -257,  -257,  -116,  -116,  -116,  -254,
  -226,   -88,   -89,   -90,   -66,   -98,  -194,  -195,  -114,  -257,
  -112,  -118,  -257,  -206,  -257,  -257,  -209,  -210,  -221,  -245,
  -246,  -257,  -116,  -224,  -257,  -257,  -257,  -257,  -240,  -257,
  -239,  -251,  -257,  -257,  -125,  -126,  -113,  -196,  -207,  -257,
  -207,  -116,  -247,  -116,  -116,  -257,  -231,  -232,  -233,  -236,
  -241,  -257,  -104,  -257,  -257,  -211,  -212,  -257,  -213,  -257,
  -248,  -116,  -257,  -257,  -207,  -257,  -116,  -249,  -252,  -197,
  -257,  -198,  -250,  -257,  -199 ]

racc_goto_table = [
    27,     2,     3,    27,    98,    95,    97,   409,   148,   172,
     1,   151,    96,   334,   154,   331,   407,   188,   160,   155,
   314,   318,   212,   162,   205,   166,   284,   365,   181,   145,
   198,   349,   207,   258,   170,   280,   208,   282,   206,   384,
   404,   354,   200,   140,   326,   432,   215,   410,   169,   nil,
   nil,   nil,   156,   nil,   159,   175,   168,   182,   168,   279,
   nil,   183,   184,   185,   179,   177,   nil,   154,   194,   195,
    97,    97,   196,   278,   nil,   289,    96,    96,   199,   446,
   201,   202,   203,   nil,    97,   204,   210,   211,   nil,   nil,
   nil,   nil,   nil,    27,   419,    27,   nil,    95,   nil,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   253,   254,   255,   298,   257,
   296,   283,   262,   162,   443,   297,   447,   168,   284,   300,
   337,   284,   320,   321,   266,   281,   nil,   280,   nil,   282,
   280,   311,   282,   nil,   287,   290,   310,   nil,   nil,   285,
   460,   294,   291,   156,   330,   nil,   290,   nil,   182,   310,
   nil,   279,   nil,   299,   279,   179,   303,   278,   nil,   304,
   305,   306,   307,   nil,   nil,   nil,   nil,   289,   nil,   353,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,
   328,    95,   nil,   332,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   278,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   143,   343,   nil,   nil,   nil,   nil,
   342,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   336,   nil,   148,   341,
   151,   nil,   174,   283,   nil,   168,   283,   nil,   345,   187,
   347,   nil,   159,   350,   168,   nil,   383,   281,   385,   nil,
   281,   351,   nil,   nil,   nil,   nil,   159,   nil,   nil,   287,
   nil,   285,   356,   168,   285,   nil,   nil,   nil,   nil,   363,
   357,   nil,   nil,   nil,   187,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   368,   369,   402,   371,    27,   372,    95,   374,
   nil,   nil,   377,   378,   379,   nil,   414,   415,   416,   343,
   417,   418,   nil,   420,   342,   390,   nil,   nil,   nil,   393,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   187,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   168,   nil,   401,   nil,   nil,   nil,   nil,   399,   440,   nil,
   143,   nil,   nil,   nil,   nil,   nil,   143,   nil,   nil,   nil,
   nil,   143,   nil,   nil,   422,   nil,   nil,   168,   424,   nil,
   452,   143,   453,   nil,   423,   nil,   455,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   463,
   nil,   nil,   435,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   448,   nil,   449,    27,   450,    95,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    27,   457,    95,   nil,   nil,    27,   462,    95 ]

racc_goto_check = [
    28,     2,     3,    28,    64,     3,    53,    76,    49,    41,
     1,    49,    42,    60,    50,    61,    72,    62,    54,    45,
    74,    74,    57,    66,    65,    56,    35,    69,    58,    22,
    59,    48,    44,    52,    33,    27,    70,    32,    41,    40,
    71,    37,    73,    25,    75,    76,     4,    77,    31,   nil,
   nil,   nil,    22,   nil,    22,    53,    22,    53,    22,    26,
   nil,    22,    22,    22,    38,    55,   nil,    50,    64,    64,
    53,    53,    53,    67,   nil,    67,    42,    42,    22,    72,
    22,    22,    22,   nil,    53,    22,    53,    53,   nil,   nil,
   nil,   nil,   nil,    28,    40,    28,   nil,     3,   nil,    28,
    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
    22,    22,    22,    22,    22,    22,    22,    22,    54,    22,
    45,    33,    28,    66,    69,    50,    69,    22,    35,    58,
    52,    35,    70,    70,    55,    31,   nil,    27,   nil,    32,
    27,    54,    32,   nil,    22,    22,    66,   nil,   nil,    38,
    69,    22,    55,    22,    54,   nil,    22,   nil,    53,    66,
   nil,    26,   nil,    55,    26,    38,    22,    67,   nil,    22,
    22,    22,    22,   nil,   nil,   nil,   nil,    67,   nil,    67,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,
     2,     3,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    67,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    23,    50,   nil,   nil,   nil,   nil,
    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,    49,    22,
    49,   nil,    23,    33,   nil,    22,    33,   nil,    22,    23,
    22,   nil,    22,    22,    22,   nil,    70,    31,    70,   nil,
    31,    55,   nil,   nil,   nil,   nil,    22,   nil,   nil,    22,
   nil,    38,    22,    22,    38,   nil,   nil,   nil,   nil,    53,
    55,   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    22,    22,    70,    22,    28,     2,     3,    22,
   nil,   nil,    22,    22,    22,   nil,    70,    70,    70,    50,
    70,    70,   nil,    70,    49,    22,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    22,   nil,    53,   nil,   nil,   nil,   nil,    55,    70,   nil,
    23,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,
   nil,    23,   nil,   nil,    53,   nil,   nil,    22,    22,   nil,
    70,    23,    70,   nil,    55,   nil,    70,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    70,
   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    22,   nil,    22,    28,     2,     3,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    28,     2,     3,   nil,   nil,    28,     2,     3 ]

racc_goto_pointer = [
   nil,    10,     1,     2,   -47,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     0,   205,   nil,    19,  -105,  -129,     0,   nil,
   nil,    -9,  -127,   -23,   nil,  -138,   nil,  -248,     5,   nil,
  -288,   -48,     4,   nil,   -54,   -33,   nil,   nil,  -241,   -24,
   -29,   nil,  -106,    -2,   -37,     7,   -31,   -67,   -31,   -44,
  -200,  -198,   -47,   nil,    -4,   -62,   -32,   -89,   nil,  -284,
   -51,  -326,  -350,   -36,  -181,  -164,  -365,  -325 ]

racc_goto_default = [
   nil,   nil,    94,    93,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,   nil,    25,    26,   144,    28,
    30,    31,    32,    33,    34,    35,    36,   288,    40,    39,
    41,    42,    43,    51,    67,   nil,    53,   157,   158,   150,
   138,    68,   nil,    55,   nil,   295,   178,   nil,   nil,   nil,
   nil,   nil,    65,    66,    71,    69,   276,   163,    74,   nil,
   317,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 99, :_reduce_1,
  1, 99, :_reduce_2,
  1, 99, :_reduce_3,
  1, 100, :_reduce_4,
  3, 100, :_reduce_5,
  2, 100, :_reduce_6,
  2, 100, :_reduce_7,
  1, 102, :_reduce_8,
  1, 102, :_reduce_9,
  1, 102, :_reduce_10,
  1, 102, :_reduce_11,
  1, 102, :_reduce_12,
  1, 102, :_reduce_13,
  1, 102, :_reduce_14,
  1, 102, :_reduce_15,
  1, 102, :_reduce_16,
  1, 102, :_reduce_17,
  1, 102, :_reduce_18,
  1, 102, :_reduce_19,
  1, 102, :_reduce_20,
  1, 102, :_reduce_21,
  1, 102, :_reduce_22,
  1, 102, :_reduce_23,
  1, 102, :_reduce_24,
  1, 102, :_reduce_25,
  1, 120, :_reduce_26,
  1, 120, :_reduce_27,
  2, 120, :_reduce_28,
  1, 120, :_reduce_29,
  1, 120, :_reduce_30,
  1, 120, :_reduce_31,
  1, 120, :_reduce_32,
  3, 120, :_reduce_33,
  1, 121, :_reduce_34,
  1, 121, :_reduce_35,
  1, 121, :_reduce_36,
  1, 121, :_reduce_37,
  1, 121, :_reduce_38,
  1, 121, :_reduce_39,
  1, 121, :_reduce_40,
  3, 121, :_reduce_41,
  1, 135, :_reduce_42,
  1, 135, :_reduce_43,
  1, 135, :_reduce_44,
  1, 135, :_reduce_45,
  1, 135, :_reduce_46,
  1, 135, :_reduce_47,
  1, 135, :_reduce_48,
  1, 101, :_reduce_49,
  1, 101, :_reduce_50,
  1, 132, :_reduce_51,
  1, 132, :_reduce_52,
  1, 132, :_reduce_53,
  1, 132, :_reduce_54,
  1, 132, :_reduce_55,
  1, 132, :_reduce_56,
  1, 132, :_reduce_57,
  1, 137, :_reduce_58,
  1, 136, :_reduce_59,
  1, 136, :_reduce_60,
  2, 136, :_reduce_61,
  2, 136, :_reduce_62,
  1, 138, :_reduce_63,
  1, 140, :_reduce_64,
  1, 139, :_reduce_65,
  5, 142, :_reduce_66,
  3, 141, :_reduce_67,
  4, 141, :_reduce_68,
  0, 143, :_reduce_69,
  1, 143, :_reduce_70,
  3, 143, :_reduce_71,
  1, 122, :_reduce_72,
  3, 144, :_reduce_73,
  4, 144, :_reduce_74,
  0, 145, :_reduce_75,
  1, 145, :_reduce_76,
  3, 145, :_reduce_77,
  3, 146, :_reduce_78,
  2, 129, :_reduce_79,
  2, 129, :_reduce_80,
  2, 129, :_reduce_81,
  4, 129, :_reduce_82,
  2, 130, :_reduce_83,
  4, 130, :_reduce_84,
  2, 149, :_reduce_85,
  3, 148, :_reduce_86,
  3, 148, :_reduce_87,
  4, 148, :_reduce_88,
  4, 148, :_reduce_89,
  3, 150, :_reduce_90,
  2, 150, :_reduce_91,
  2, 150, :_reduce_92,
  1, 150, :_reduce_93,
  1, 147, :_reduce_94,
  2, 147, :_reduce_95,
  2, 123, :_reduce_96,
  2, 123, :_reduce_97,
  5, 133, :_reduce_98,
  4, 133, :_reduce_99,
  4, 133, :_reduce_100,
  2, 133, :_reduce_101,
  2, 133, :_reduce_102,
  4, 133, :_reduce_103,
  5, 155, :_reduce_104,
  2, 155, :_reduce_105,
  4, 115, :_reduce_106,
  2, 115, :_reduce_107,
  4, 116, :_reduce_108,
  2, 116, :_reduce_109,
  2, 156, :_reduce_110,
  1, 156, :_reduce_111,
  4, 156, :_reduce_112,
  6, 103, :_reduce_113,
  5, 103, :_reduce_114,
  1, 151, :_reduce_115,
  0, 151, :_reduce_116,
  1, 157, :_reduce_117,
  4, 157, :_reduce_118,
  0, 153, :_reduce_119,
  1, 153, :_reduce_120,
  0, 158, :_reduce_121,
  1, 158, :_reduce_122,
  1, 159, :_reduce_123,
  1, 159, :_reduce_124,
  3, 159, :_reduce_125,
  3, 159, :_reduce_126,
  1, 154, :_reduce_127,
  3, 154, :_reduce_128,
  3, 124, :_reduce_129,
  3, 124, :_reduce_130,
  3, 124, :_reduce_131,
  3, 124, :_reduce_132,
  3, 124, :_reduce_133,
  3, 124, :_reduce_134,
  3, 124, :_reduce_135,
  3, 124, :_reduce_136,
  3, 124, :_reduce_137,
  3, 124, :_reduce_138,
  3, 124, :_reduce_139,
  3, 124, :_reduce_140,
  3, 124, :_reduce_141,
  3, 124, :_reduce_142,
  3, 124, :_reduce_143,
  3, 124, :_reduce_144,
  3, 124, :_reduce_145,
  3, 124, :_reduce_146,
  3, 124, :_reduce_147,
  3, 124, :_reduce_148,
  3, 124, :_reduce_149,
  3, 124, :_reduce_150,
  3, 124, :_reduce_151,
  3, 124, :_reduce_152,
  3, 124, :_reduce_153,
  3, 124, :_reduce_154,
  3, 124, :_reduce_155,
  3, 124, :_reduce_156,
  3, 124, :_reduce_157,
  3, 124, :_reduce_158,
  3, 124, :_reduce_159,
  3, 124, :_reduce_160,
  3, 124, :_reduce_161,
  3, 124, :_reduce_162,
  3, 124, :_reduce_163,
  2, 128, :_reduce_164,
  2, 128, :_reduce_165,
  2, 128, :_reduce_166,
  2, 126, :_reduce_167,
  1, 126, :_reduce_168,
  3, 117, :_reduce_169,
  3, 117, :_reduce_170,
  3, 160, :_reduce_171,
  3, 160, :_reduce_172,
  3, 160, :_reduce_173,
  3, 160, :_reduce_174,
  1, 161, :_reduce_175,
  1, 161, :_reduce_176,
  1, 161, :_reduce_177,
  1, 161, :_reduce_178,
  1, 161, :_reduce_179,
  1, 162, :_reduce_180,
  2, 162, :_reduce_181,
  2, 162, :_reduce_182,
  2, 163, :_reduce_183,
  1, 131, :_reduce_184,
  2, 131, :_reduce_185,
  2, 106, :_reduce_186,
  2, 106, :_reduce_187,
  2, 106, :_reduce_188,
  1, 164, :_reduce_189,
  2, 164, :_reduce_190,
  2, 164, :_reduce_191,
  2, 164, :_reduce_192,
  3, 165, :_reduce_193,
  4, 165, :_reduce_194,
  4, 165, :_reduce_195,
  6, 104, :_reduce_196,
  9, 104, :_reduce_197,
  9, 104, :_reduce_198,
  11, 104, :_reduce_199,
  1, 166, :_reduce_200,
  1, 166, :_reduce_201,
  1, 166, :_reduce_202,
  1, 152, :_reduce_203,
  1, 152, :_reduce_204,
  1, 167, :_reduce_205,
  2, 167, :_reduce_206,
  0, 167, :_reduce_207,
  0, 169, :_reduce_208,
  1, 169, :_reduce_209,
  1, 169, :_reduce_210,
  3, 169, :_reduce_211,
  3, 169, :_reduce_212,
  3, 170, :_reduce_213,
  2, 105, :_reduce_214,
  4, 105, :_reduce_215,
  4, 105, :_reduce_216,
  0, 171, :_reduce_217,
  1, 171, :_reduce_218,
  1, 114, :_reduce_219,
  4, 118, :_reduce_220,
  5, 118, :_reduce_221,
  3, 118, :_reduce_222,
  4, 119, :_reduce_223,
  5, 119, :_reduce_224,
  3, 119, :_reduce_225,
  5, 125, :_reduce_226,
  4, 109, :_reduce_227,
  1, 113, :_reduce_228,
  1, 113, :_reduce_229,
  4, 110, :_reduce_230,
  6, 108, :_reduce_231,
  6, 108, :_reduce_232,
  6, 108, :_reduce_233,
  3, 111, :_reduce_234,
  4, 111, :_reduce_235,
  6, 111, :_reduce_236,
  0, 173, :_reduce_237,
  2, 173, :_reduce_238,
  3, 173, :_reduce_239,
  3, 173, :_reduce_240,
  4, 173, :_reduce_241,
  2, 168, :_reduce_242,
  1, 168, :_reduce_243,
  1, 172, :_reduce_244,
  3, 172, :_reduce_245,
  3, 172, :_reduce_246,
  4, 172, :_reduce_247,
  3, 174, :_reduce_248,
  4, 175, :_reduce_249,
  5, 175, :_reduce_250,
  5, 112, :_reduce_251,
  8, 112, :_reduce_252,
  2, 134, :_reduce_253,
  4, 127, :_reduce_254,
  1, 127, :_reduce_255,
  1, 107, :_reduce_256 ]

racc_reduce_n = 257

racc_shift_n = 465

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :ELSEIF => 4,
  :THEN => 5,
  :UNLESS => 6,
  :END => 7,
  :WHILE => 8,
  :UNTIL => 9,
  :BREAK => 10,
  :CONTINUE => 11,
  :TRY => 12,
  :CATCH => 13,
  :FINALLY => 14,
  :FOR => 15,
  :IN => 16,
  :DEF => 17,
  :DEF_BANG => 18,
  :SPLAT_PARAM => 19,
  :SPLAT_ARG => 20,
  :CALL => 21,
  :BUILTIN_COMMAND => 22,
  :CLASS => 23,
  :NEW => 24,
  :DEFM => 25,
  :DEFM_BANG => 26,
  :SUPER => 27,
  :RIML_FILE_COMMAND => 28,
  :RIML_CLASS_COMMAND => 29,
  :RETURN => 30,
  :NEWLINE => 31,
  :NUMBER => 32,
  :STRING_D => 33,
  :STRING_S => 34,
  :EX_LITERAL => 35,
  :REGEXP => 36,
  :TRUE => 37,
  :FALSE => 38,
  :LET => 39,
  :UNLET => 40,
  :UNLET_BANG => 41,
  :IDENTIFIER => 42,
  :DICT_VAL => 43,
  :SCOPE_MODIFIER => 44,
  :SCOPE_MODIFIER_LITERAL => 45,
  :SPECIAL_VAR_PREFIX => 46,
  :FINISH => 47,
  "!" => 48,
  "*" => 49,
  "/" => 50,
  "%" => 51,
  "+" => 52,
  "-" => 53,
  "." => 54,
  ">" => 55,
  ">#" => 56,
  ">?" => 57,
  "<" => 58,
  "<#" => 59,
  "<?" => 60,
  ">=" => 61,
  ">=#" => 62,
  ">=?" => 63,
  "<=" => 64,
  "<=#" => 65,
  "<=?" => 66,
  "==" => 67,
  "==?" => 68,
  "==#" => 69,
  "=~" => 70,
  "=~?" => 71,
  "=~#" => 72,
  "!~" => 73,
  "!~?" => 74,
  "!~#" => 75,
  "!=" => 76,
  "!=?" => 77,
  "!=#" => 78,
  :IS => 79,
  :ISNOT => 80,
  "&&" => 81,
  "||" => 82,
  "?" => 83,
  "=" => 84,
  "+=" => 85,
  "-=" => 86,
  ".=" => 87,
  "," => 88,
  "(" => 89,
  ")" => 90,
  ";" => 91,
  "[" => 92,
  "]" => 93,
  "{" => 94,
  "}" => 95,
  ":" => 96,
  "===" => 97 }

racc_nt_base = 98

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "ELSEIF",
  "THEN",
  "UNLESS",
  "END",
  "WHILE",
  "UNTIL",
  "BREAK",
  "CONTINUE",
  "TRY",
  "CATCH",
  "FINALLY",
  "FOR",
  "IN",
  "DEF",
  "DEF_BANG",
  "SPLAT_PARAM",
  "SPLAT_ARG",
  "CALL",
  "BUILTIN_COMMAND",
  "CLASS",
  "NEW",
  "DEFM",
  "DEFM_BANG",
  "SUPER",
  "RIML_FILE_COMMAND",
  "RIML_CLASS_COMMAND",
  "RETURN",
  "NEWLINE",
  "NUMBER",
  "STRING_D",
  "STRING_S",
  "EX_LITERAL",
  "REGEXP",
  "TRUE",
  "FALSE",
  "LET",
  "UNLET",
  "UNLET_BANG",
  "IDENTIFIER",
  "DICT_VAL",
  "SCOPE_MODIFIER",
  "SCOPE_MODIFIER_LITERAL",
  "SPECIAL_VAR_PREFIX",
  "FINISH",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\".\"",
  "\">\"",
  "\">#\"",
  "\">?\"",
  "\"<\"",
  "\"<#\"",
  "\"<?\"",
  "\">=\"",
  "\">=#\"",
  "\">=?\"",
  "\"<=\"",
  "\"<=#\"",
  "\"<=?\"",
  "\"==\"",
  "\"==?\"",
  "\"==#\"",
  "\"=~\"",
  "\"=~?\"",
  "\"=~#\"",
  "\"!~\"",
  "\"!~?\"",
  "\"!~#\"",
  "\"!=\"",
  "\"!=?\"",
  "\"!=#\"",
  "IS",
  "ISNOT",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\"=\"",
  "\"+=\"",
  "\"-=\"",
  "\".=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\":\"",
  "\"===\"",
  "$start",
  "Root",
  "Statements",
  "Terminator",
  "Statement",
  "ExplicitCall",
  "Def",
  "Return",
  "UnletVariable",
  "ExLiteral",
  "For",
  "While",
  "Until",
  "Try",
  "ClassDefinition",
  "LoopKeyword",
  "EndScript",
  "RimlFileCommand",
  "RimlClassCommand",
  "MultiAssign",
  "If",
  "Unless",
  "Expression",
  "ExpressionWithoutDictLiteral",
  "Dictionary",
  "DictGetWithDotLiteral",
  "BinaryOperator",
  "Ternary",
  "Assign",
  "Super",
  "UnaryOperator",
  "DictGet",
  "ListOrDictGet",
  "AllVariableRetrieval",
  "LiteralWithoutDictLiteral",
  "Call",
  "ObjectInstantiation",
  "PossibleStringValue",
  "String",
  "Number",
  "Regexp",
  "List",
  "ScopeModifierLiteral",
  "ListLiteral",
  "ListUnpack",
  "ListItems",
  "DictionaryLiteral",
  "DictItems",
  "DictItem",
  "DictGetWithDot",
  "ListOrDictGetWithBrackets",
  "ListOrDictGetAssign",
  "SubList",
  "Scope",
  "DefCallIdentifier",
  "ArgList",
  "ArgListWithoutNothing",
  "ObjectInstantiationCall",
  "ClassArgList",
  "SIDAndScope",
  "ArgListWithSplat",
  "ArgListWithoutNothingWithSplat",
  "AssignExpression",
  "AssignLHS",
  "VariableRetrieval",
  "SimpleVariableRetrieval",
  "CurlyBraceName",
  "CurlyBraceVarPart",
  "FunctionType",
  "DefKeywords",
  "Block",
  "ParamList",
  "DefaultParam",
  "Returnable",
  "IfBlock",
  "Catch",
  "ElseBlock",
  "ElseifBlock" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_1(val, _values, result)
     result = make_node(val) { |_| Riml::Nodes.new([]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 41)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 42)
  def _reduce_3(val, _values, result)
     result = make_node(val) { |_| Riml::Nodes.new([]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_4(val, _values, result)
     result = make_node(val) { |v| Riml::Nodes.new([ v[0] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_5(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_7(val, _values, result)
     result = make_node(val) { |v| Riml::Nodes.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_21(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_26(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_27(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_28(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_32(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_33(val, _values, result)
     result = make_node(val) { |v| Riml::WrapInParensNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 87)
  def _reduce_34(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_35(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_37(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_38(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_40(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_41(val, _values, result)
     result = make_node(val) { |v| Riml::WrapInParensNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_42(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_45(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_47(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_48(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_49(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_50(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_51(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_52(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_53(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_55(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_56(val, _values, result)
     result = make_node(val) { |_| Riml::TrueNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_57(val, _values, result)
     result = make_node(val) { |_| Riml::FalseNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_58(val, _values, result)
     result = make_node(val) { |v| Riml::NumberNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_59(val, _values, result)
     result = make_node(val) { |v| Riml::StringNode.new(v[0], :s) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_60(val, _values, result)
     result = make_node(val) { |v| Riml::StringNode.new(v[0], :d) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_61(val, _values, result)
     result = make_node(val) { |v| Riml::StringLiteralConcatNode.new(v[0], Riml::StringNode.new(v[1], :s)) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_62(val, _values, result)
     result = make_node(val) { |v| Riml::StringLiteralConcatNode.new(v[0], Riml::StringNode.new(v[1], :d)) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_63(val, _values, result)
     result = make_node(val) { |v| Riml::RegexpNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_64(val, _values, result)
     result = make_node(val) { |v| Riml::ScopeModifierLiteralNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_65(val, _values, result)
     result = make_node(val) { |v| Riml::ListNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_66(val, _values, result)
     result = make_node(val) { |v| Riml::ListUnpackNode.new(v[1] << v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_67(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_68(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_69(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_70(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_71(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_72(val, _values, result)
     result = make_node(val) { |v| Riml::DictionaryNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_73(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_74(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_75(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_76(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_77(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_78(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_79(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_80(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_81(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 187)
  def _reduce_82(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(Riml::WrapInParensNode.new(v[1]), v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_83(val, _values, result)
     result = make_node(val) { |v| Riml::ListOrDictGetNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 192)
  def _reduce_84(val, _values, result)
     result = make_node(val) { |v| Riml::ListOrDictGetNode.new(Riml::WrapInParensNode.new(v[1]), v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 196)
  def _reduce_85(val, _values, result)
     result = make_node(val) { |v| Riml::ListOrDictGetNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 200)
  def _reduce_86(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 201)
  def _reduce_87(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_88(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 203)
  def _reduce_89(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 207)
  def _reduce_90(val, _values, result)
     result = make_node(val) { |v| Riml::SublistNode.new([v[0], Riml::LiteralNode.new(' : '), v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_91(val, _values, result)
     result = make_node(val) { |v| Riml::SublistNode.new([v[0], Riml::LiteralNode.new(' :')]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 209)
  def _reduce_92(val, _values, result)
     result = make_node(val) { |v| Riml::SublistNode.new([Riml::LiteralNode.new(': '), v[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 210)
  def _reduce_93(val, _values, result)
     result = make_node(val) { |_| Riml::SublistNode.new([Riml::LiteralNode.new(':')]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 214)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 215)
  def _reduce_95(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 219)
  def _reduce_96(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 220)
  def _reduce_97(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 224)
  def _reduce_98(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(v[0], v[1], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 225)
  def _reduce_99(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_100(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 227)
  def _reduce_101(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 228)
  def _reduce_102(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], []) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_103(val, _values, result)
     result = make_node(val) { |v| Riml::ExplicitCallNode.new(nil, nil, v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_104(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(v[0], v[1], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_105(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(v[0], v[1], []) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 238)
  def _reduce_106(val, _values, result)
     result = make_node(val) { |v| Riml::RimlFileCommandNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 239)
  def _reduce_107(val, _values, result)
     result = make_node(val) { |v| Riml::RimlFileCommandNode.new(nil, v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 243)
  def _reduce_108(val, _values, result)
     result = make_node(val) { |v| Riml::RimlClassCommandNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_109(val, _values, result)
     result = make_node(val) { |v| Riml::RimlClassCommandNode.new(nil, v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 248)
  def _reduce_110(val, _values, result)
     result = ["#{val[0]}#{val[1]}"] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 249)
  def _reduce_111(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 250)
  def _reduce_112(val, _values, result)
     result = val[0].concat ["#{val[2]}#{val[3]}"] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 254)
  def _reduce_113(val, _values, result)
     result = make_node(val) { |v| Riml::ExplicitCallNode.new(v[1], v[2], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 255)
  def _reduce_114(val, _values, result)
     result = make_node(val) { |v| Riml::ExplicitCallNode.new(nil, v[1], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 259)
  def _reduce_115(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 260)
  def _reduce_116(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 265)
  def _reduce_117(val, _values, result)
     result = [ nil, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 266)
  def _reduce_118(val, _values, result)
     result = [ make_node(val) { |v| Riml::SIDNode.new(v[1]) }, val[3] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 270)
  def _reduce_119(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 271)
  def _reduce_120(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 275)
  def _reduce_121(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 276)
  def _reduce_122(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_123(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_124(val, _values, result)
     result = [ make_node(val) { |v| Riml::SplatNode.new(v[0]) } ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 282)
  def _reduce_125(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 283)
  def _reduce_126(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::SplatNode.new(v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 287)
  def _reduce_127(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 288)
  def _reduce_128(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_129(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_130(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 295)
  def _reduce_131(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 296)
  def _reduce_132(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 297)
  def _reduce_133(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 300)
  def _reduce_134(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 302)
  def _reduce_135(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 303)
  def _reduce_136(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 304)
  def _reduce_137(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_138(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 307)
  def _reduce_139(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 308)
  def _reduce_140(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 310)
  def _reduce_141(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 311)
  def _reduce_142(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 312)
  def _reduce_143(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 314)
  def _reduce_144(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 315)
  def _reduce_145(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_146(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_147(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 319)
  def _reduce_148(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 320)
  def _reduce_149(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 322)
  def _reduce_150(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 323)
  def _reduce_151(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 324)
  def _reduce_152(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 326)
  def _reduce_153(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 327)
  def _reduce_154(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_155(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 330)
  def _reduce_156(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 331)
  def _reduce_157(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 332)
  def _reduce_158(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 333)
  def _reduce_159(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_160(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_161(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 337)
  def _reduce_162(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 338)
  def _reduce_163(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 342)
  def _reduce_164(val, _values, result)
     result = make_node(val) { |v| Riml::UnaryOperatorNode.new(val[0], [val[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 343)
  def _reduce_165(val, _values, result)
     result = make_node(val) { |v| Riml::UnaryOperatorNode.new(val[0], [val[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 344)
  def _reduce_166(val, _values, result)
     result = make_node(val) { |v| Riml::UnaryOperatorNode.new(val[0], [val[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 349)
  def _reduce_167(val, _values, result)
     result = make_node(val) { |v| Riml::AssignNode.new(v[1][0], v[1][1], v[1][2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 350)
  def _reduce_168(val, _values, result)
     result = make_node(val) { |v| Riml::AssignNode.new(v[0][0], v[0][1], v[0][2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 354)
  def _reduce_169(val, _values, result)
     result = make_node(val) { |v| Riml::MultiAssignNode.new([v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 355)
  def _reduce_170(val, _values, result)
     val[0].assigns << val[2]; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 360)
  def _reduce_171(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 361)
  def _reduce_172(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 362)
  def _reduce_173(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 363)
  def _reduce_174(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 367)
  def _reduce_175(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 368)
  def _reduce_176(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 369)
  def _reduce_177(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 370)
  def _reduce_178(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 371)
  def _reduce_179(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 376)
  def _reduce_180(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 377)
  def _reduce_181(val, _values, result)
     result = make_node(val) { |v| Riml::GetSpecialVariableNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_182(val, _values, result)
     result = make_node(val) { |v| Riml::GetVariableByScopeAndDictNameNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 382)
  def _reduce_183(val, _values, result)
     result = make_node(val) { |v| Riml::GetVariableNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 386)
  def _reduce_184(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 387)
  def _reduce_185(val, _values, result)
     result = make_node(val) { |v| Riml::GetCurlyBraceNameNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 391)
  def _reduce_186(val, _values, result)
     result = make_node(val) { |v| Riml::UnletVariableNode.new('!', [ v[1] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 392)
  def _reduce_187(val, _values, result)
     result = make_node(val) { |v| Riml::UnletVariableNode.new('!', [ v[1] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 393)
  def _reduce_188(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 397)
  def _reduce_189(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBraceVariable.new([ v[0] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 398)
  def _reduce_190(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBraceVariable.new([ Riml::CurlyBracePart.new(v[0]), v[1] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 399)
  def _reduce_191(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::CurlyBracePart.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 400)
  def _reduce_192(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 404)
  def _reduce_193(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBracePart.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 405)
  def _reduce_194(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBracePart.new([v[1], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 406)
  def _reduce_195(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBracePart.new([v[1], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 412)
  def _reduce_196(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], [], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 413)
  def _reduce_197(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], v[4], v[6], v[7]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 414)
  def _reduce_198(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], [v[4]], v[6], v[7]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 415)
  def _reduce_199(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], v[4] << v[6], v[8], v[9]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 419)
  def _reduce_200(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 420)
  def _reduce_201(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 421)
  def _reduce_202(val, _values, result)
     result = "DefMethodNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 426)
  def _reduce_203(val, _values, result)
     result = make_node(val) { |v| Riml::GetCurlyBraceNameNode.new('', v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 427)
  def _reduce_204(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 432)
  def _reduce_205(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 433)
  def _reduce_206(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 434)
  def _reduce_207(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 438)
  def _reduce_208(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 439)
  def _reduce_209(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 440)
  def _reduce_210(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 441)
  def _reduce_211(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 442)
  def _reduce_212(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 446)
  def _reduce_213(val, _values, result)
     result = make_node(val) { |v| Riml::DefaultParamNode.new(v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 450)
  def _reduce_214(val, _values, result)
     result = make_node(val) { |v| Riml::ReturnNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 451)
  def _reduce_215(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[3], Nodes.new([ReturnNode.new(v[1])])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 452)
  def _reduce_216(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[3], Nodes.new([ReturnNode.new(v[1])])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 456)
  def _reduce_217(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 457)
  def _reduce_218(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 461)
  def _reduce_219(val, _values, result)
     result = make_node(val) { |_| Riml::FinishNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 466)
  def _reduce_220(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 467)
  def _reduce_221(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[1], Riml::Nodes.new([v[3]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 468)
  def _reduce_222(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[2], Riml::Nodes.new([v[0]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 472)
  def _reduce_223(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 473)
  def _reduce_224(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[1], Riml::Nodes.new([v[3]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 474)
  def _reduce_225(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[2], Riml::Nodes.new([v[0]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 478)
  def _reduce_226(val, _values, result)
     result = make_node(val) { |v| Riml::TernaryOperatorNode.new([v[0], v[2], v[4]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 482)
  def _reduce_227(val, _values, result)
     result = make_node(val) { |v| Riml::WhileNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 486)
  def _reduce_228(val, _values, result)
     result = make_node(val) { |_| Riml::BreakNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 487)
  def _reduce_229(val, _values, result)
     result = make_node(val) { |_| Riml::ContinueNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 491)
  def _reduce_230(val, _values, result)
     result = make_node(val) { |v| Riml::UntilNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 495)
  def _reduce_231(val, _values, result)
     result = make_node(val) { |v| Riml::ForNode.new(v[1], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 496)
  def _reduce_232(val, _values, result)
     result = make_node(val) { |v| Riml::ForNode.new(v[1], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 497)
  def _reduce_233(val, _values, result)
     result = make_node(val) { |v| Riml::ForNode.new(v[1], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 501)
  def _reduce_234(val, _values, result)
     result = make_node(val) { |v| Riml::TryNode.new(v[1], nil, nil) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 502)
  def _reduce_235(val, _values, result)
     result = make_node(val) { |v| Riml::TryNode.new(v[1], v[2], nil) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 503)
  def _reduce_236(val, _values, result)
     result = make_node(val) { |v| Riml::TryNode.new(v[1], v[2], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 507)
  def _reduce_237(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 508)
  def _reduce_238(val, _values, result)
     result = [ make_node(val) { |v| Riml::CatchNode.new(nil, v[1]) } ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 509)
  def _reduce_239(val, _values, result)
     result = [ make_node(val) { |v| Riml::CatchNode.new(v[1], v[2]) } ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 510)
  def _reduce_240(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::CatchNode.new(nil, v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 511)
  def _reduce_241(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::CatchNode.new(v[2], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 518)
  def _reduce_242(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 519)
  def _reduce_243(val, _values, result)
     result = make_node(val) { |_| Riml::Nodes.new([]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 523)
  def _reduce_244(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 524)
  def _reduce_245(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 525)
  def _reduce_246(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 526)
  def _reduce_247(val, _values, result)
     result = val[1] << val[2] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 530)
  def _reduce_248(val, _values, result)
     result = make_node(val) { |v| Riml::ElseNode.new(v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 534)
  def _reduce_249(val, _values, result)
     result = make_node(val) { |v| Riml::Nodes.new([Riml::ElseifNode.new(v[1], v[3])]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 535)
  def _reduce_250(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::ElseifNode.new(v[2], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 539)
  def _reduce_251(val, _values, result)
     result = make_node(val) { |v| Riml::ClassDefinitionNode.new(v[1], v[2], nil, v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 540)
  def _reduce_252(val, _values, result)
     result = make_node(val) { |v| Riml::ClassDefinitionNode.new(v[1], v[2], (v[4] || ClassDefinitionNode::DEFAULT_SCOPE_MODIFIER) + v[5], v[6]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 544)
  def _reduce_253(val, _values, result)
     result = make_node(val) { |v| Riml::ObjectInstantiationNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 548)
  def _reduce_254(val, _values, result)
     result = make_node(val) { |v| Riml::SuperNode.new(v[2], true) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 549)
  def _reduce_255(val, _values, result)
     result = make_node(val) { |_| Riml::SuperNode.new([], false) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 553)
  def _reduce_256(val, _values, result)
     result = make_node(val) { |v| Riml::ExLiteralNode.new(v[0]) } 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
