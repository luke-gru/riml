#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require File.expand_path("../errors", __FILE__)
  require File.expand_path("../ast_rewriter", __FILE__)
module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 566)
  # This code will be put as-is in the parser class

  attr_accessor :ast_rewriter
  attr_writer :options

  # The Parser and AST_Rewriter share this same hash of options
  def options
    @options ||= {}
  end

  def self.ast_cache
    @ast_cache
  end
  @ast_cache = {}

  # parses tokens or code into output nodes
  def parse(object, ast_rewriter = Riml::AST_Rewriter.new, filename = nil, included = false)
    if (ast = self.class.ast_cache[filename])
    else
      if tokens?(object)
        @tokens = object
      elsif code?(object)
        @lexer = Riml::Lexer.new(object, filename, true)
      end

      begin
        ast = do_parse
      rescue Racc::ParseError => e
        raise unless @lexer
        if (invalid_token = @lexer.prev_token_is_keyword?)
          warning = "#{invalid_token.inspect} is a keyword, and cannot " \
            "be used as a variable name"
        end
        error_msg = e.message
        error_msg << "\nWARNING: #{warning}" if warning
        error = Riml::ParseError.new(error_msg, @lexer.filename, @lexer.lineno)
        raise error
      end
      self.class.ast_cache[filename] = ast if filename
    end
    @ast_rewriter ||= ast_rewriter
    return ast unless @ast_rewriter
    @ast_rewriter.ast = ast.dup
    @ast_rewriter.options ||= options
    @ast_rewriter.rewrite(filename, included)
    @ast_rewriter.ast
  end

  # get the next token from either the list of tokens provided, or
  # the lexer getting the next token
  def next_token
    return @tokens.shift unless @lexer
    token = @lexer.next_token
    if token && @lexer.parser_info
      @current_parser_info = token.pop
    end
    token
  end

  private

  def tokens?(object)
    Array === object
  end

  def code?(object)
    String === object
  end

  def make_node(racc_val)
    node = yield racc_val
    node.parser_info = @current_parser_info
    node
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'135,312,60,209,136,313,412,413,209,209,406,48,47,446,146,56,197,89,209',
'301,404,362,60,49,37,46,48,47,37,49,44,45,64,407,37,386,447,60,50,70',
'-116,61,60,50,70,62,63,129,130,132,127,128,131,115,116,117,121,122,123',
'118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106,108',
'107,133,134,101,100,137,186,80,38,52,37,81,38,82,85,83,84,87,38,105',
'86,37,75,76,153,152,57,56,88,89,77,37,90,58,59,78,37,46,48,47,91,49',
'44,45,64,72,73,272,277,60,50,70,79,61,271,37,302,62,63,376,48,47,-178',
'-178,-178,-178,209,147,209,209,38,60,-43,-43,153,152,380,404,325,404',
'404,38,382,381,327,-42,-42,275,60,50,70,38,387,161,29,-203,38,52,80',
'54,164,161,81,275,82,85,83,84,87,277,309,86,149,75,76,38,180,57,56,88',
'89,77,275,90,58,59,78,37,46,48,47,91,49,44,45,64,72,73,-116,164,60,50',
'70,79,61,164,209,319,62,63,430,49,429,164,263,164,139,-85,-85,-85,-85',
'164,164,-44,-44,256,270,270,388,-204,268,269,269,316,164,189,190,191',
'192,292,149,309,277,-46,-46,29,149,38,52,367,54,129,130,132,127,128',
'131,115,116,117,121,122,123,118,119,120,124,125,126,102,104,103,109',
'111,110,112,114,113,106,108,107,133,134,101,100,137,315,-175,-175,-175',
'-175,-48,-48,164,164,139,366,-45,-45,105,-178,-178,-178,-178,390,147',
'-176,-176,-176,-176,153,152,316,60,50,70,-98,149,149,-99,149,412,434',
'60,-47,-47,164,352,293,393,129,130,132,127,128,131,115,116,117,121,122',
'123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106',
'108,107,133,134,101,100,137,-98,80,139,-99,139,81,52,82,85,83,84,87',
'292,105,86,274,75,76,267,256,57,56,88,89,77,375,90,58,59,78,37,46,48',
'47,91,49,44,45,64,72,73,-116,105,60,50,70,79,61,256,396,397,62,63,398',
'267,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124',
'125,126,102,104,103,109,111,110,112,114,113,106,108,107,129,130,132',
'29,399,38,52,80,54,267,267,81,401,82,85,83,84,87,105,60,86,373,75,76',
'139,265,57,56,88,89,77,308,90,58,59,78,37,46,48,47,91,49,44,45,64,72',
'73,-116,105,60,50,70,79,61,261,260,370,62,63,216,139,129,130,132,127',
'128,131,115,116,117,121,122,123,118,119,120,124,125,126,102,104,103',
'109,111,110,112,114,113,106,108,107,133,134,101,29,214,38,52,80,54,209',
'322,81,209,82,85,83,84,87,105,422,86,60,75,76,213,60,57,56,88,89,77',
'60,90,58,59,78,37,46,48,47,91,49,44,45,64,72,73,209,323,60,50,70,79',
'61,324,427,428,62,63,364,431,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113',
'106,108,107,133,134,432,29,329,38,52,80,54,435,105,81,437,82,85,83,84',
'87,105,438,86,439,75,76,440,301,57,56,88,89,77,442,90,58,59,78,37,46',
'48,47,91,49,44,45,64,72,73,443,193,60,50,70,79,61,105,139,367,62,63',
'105,367,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120',
'124,125,126,60,361,149,360,209,149,256,456,432,359,340,129,130,132,142',
'29,141,38,52,80,54,139,460,81,461,82,85,83,84,87,105,367,86,463,75,76',
'99,344,57,56,88,89,77,355,90,58,59,78,37,46,48,47,91,49,44,45,64,72',
'73,105,92,60,50,70,79,61,466,,,62,63,,,129,130,132,127,128,131,115,116',
'117,121,122,123,118,119,120,124,125,126,129,130,132,127,128,131,,,,',
',,129,130,132,29,,38,52,80,54,,,81,,82,85,83,84,87,105,,86,,75,76,,',
'57,56,88,89,77,,90,58,59,78,105,46,48,47,91,49,44,45,64,72,73,-116,105',
'60,50,70,79,61,,,,62,63,129,130,132,127,128,131,115,116,117,121,122',
'123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106',
'108,107,133,134,101,100,137,29,,80,52,,54,81,-243,82,85,83,84,87,105',
'149,86,,75,76,,,57,56,88,89,77,,90,58,59,78,37,46,48,47,91,49,44,45',
'64,72,73,,,60,50,70,79,61,,,,62,63,414,-175,-175,-175,-175,,,,,,,,,',
',,,,,,,,,,,,,,,,129,130,132,,,29,,38,52,,54,,129,130,132,127,128,131',
'115,116,117,121,122,123,118,119,120,124,125,126,102,104,103,109,111',
'110,112,114,113,106,108,107,133,134,101,100,137,409,105,,,,,,,,146,56',
',89,105,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,129',
'130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126',
'102,104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137',
'29,,,52,,54,,259,146,56,,89,,105,90,129,130,132,,46,48,47,,49,44,45',
'64,,,,,60,50,70,,61,,,,62,63,426,146,56,,89,,,90,,,,,46,48,47,,49,44',
'45,64,,,105,,60,50,70,,61,,,,62,63,,29,,,52,,54,,259,,129,130,132,127',
'128,131,115,116,117,121,122,123,118,119,120,124,125,126,,333,146,56',
',89,,29,90,,52,,54,46,48,47,,49,44,45,64,,,,,60,50,70,,61,105,,,62,63',
'146,56,,89,,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63',
',,29,-121,,52,,54,,129,130,132,127,128,131,115,116,117,121,122,123,118',
'119,120,124,125,126,,,,,146,56,,89,29,,90,52,,54,348,46,48,47,,49,44',
'45,64,,,,,60,50,70,105,61,,,,62,63,146,56,,89,,,90,,,,167,46,48,47,',
'49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48',
'47,,49,44,45,64,,,-116,,60,50,70,,61,,,,62,63,146,56,165,89,,52,90,54',
',,,46,48,47,,49,44,45,64,,,-116,,60,50,70,,61,,,,62,63,146,56,29,89',
',52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56',
'176,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63',
'146,56,29,89,,52,90,286,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,',
',62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70',
',61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,-116',
',60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45',
'64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49',
'44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47',
',49,44,45,64,,,,,60,50,70,,61,,,,62,63,,,29,-119,,52,,54,129,130,132',
'127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,,,,,146',
'56,,89,,29,90,,52,,54,46,48,47,,49,44,45,64,,,,,60,50,70,105,61,,,,62',
'63,146,56,,89,,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62',
'63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,-116,,60,50,70',
',61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60',
'50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,',
',,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45',
'64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49',
'44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47',
',49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46',
'48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54',
',,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52',
'90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89',
',52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,,,29,-119',
',52,,54,,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120',
'124,125,126,,,,,146,56,,89,29,-119,90,52,,54,,46,48,47,,49,44,45,64',
',,,,60,50,70,105,61,,,,62,63,146,56,,89,,,90,,,,,46,48,47,,49,44,45',
'64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49',
'44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47',
',49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46',
'48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,,,29,,,52,346,54,129,130',
'132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,,,,',
'146,56,,89,,29,90,,52,,54,46,48,47,,49,44,45,64,,,,,60,50,70,105,61',
',,,62,63,146,56,,89,,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61',
',,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70',
',61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60',
'50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,',
',,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45',
'64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49',
'44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47',
',49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46',
'48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54',
',,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52',
'90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89',
',52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56',
'29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146',
'56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63',
'146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,',
'62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,',
'61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,',
'60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64',
',,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44',
'45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,',
'49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48',
'47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,',
'46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90',
'54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,',
'52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29',
'89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146',
'56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63',
'146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,',
'62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,',
'61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,-116',
',60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45',
'64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49',
'44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47',
',49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46',
'48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54',
',,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52',
'90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89',
',52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56',
'29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146',
'56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63',
'146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,',
'62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,',
'61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'70,,61,,,,62,63,,,29,-119,,52,,54,129,130,132,127,128,131,115,116,117',
'121,122,123,118,119,120,124,125,126,,,,,146,56,,89,,29,90,,52,,54,46',
'48,47,,49,44,45,64,,,,,60,50,70,105,61,,,,62,63,146,56,,89,,,90,,,,',
'46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90',
'54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,',
'52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29',
'89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146',
'56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63',
'146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,',
'62,63,,,29,-119,,52,,54,,129,130,132,127,128,131,115,116,117,121,122',
'123,118,119,120,124,125,126,,,,,146,56,,89,29,-119,90,52,,54,,46,48',
'47,,49,44,45,64,,,,,60,50,70,105,61,,,,62,63,146,56,,89,,,90,,,,,46',
'48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54',
',,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,,,29,-119,,52,,54',
'129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125',
'126,,,,,146,56,,89,,29,90,,52,,54,46,48,47,,49,44,45,64,,,-116,,60,50',
'70,105,61,,,,62,63,146,56,,89,,,90,,,,,46,48,47,,49,44,45,64,,,,,60',
'50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,',
',,,60,50,70,,61,,,,62,63,,,29,-119,,52,,54,129,130,132,127,128,131,115',
'116,117,121,122,123,118,119,120,124,125,126,,,,,146,56,,89,,29,90,,52',
',54,46,48,47,,49,44,45,64,,,-116,,60,50,70,105,61,,,,62,63,146,56,,89',
',,90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89',
',52,90,54,,,,46,48,47,,49,44,45,64,,,-116,,60,50,70,,61,,,,62,63,,,29',
'-119,,52,,54,129,130,132,127,128,131,115,116,117,121,122,123,118,119',
'120,124,125,126,,,,,146,56,,89,,29,,,52,,286,46,48,47,,49,44,45,,,,',
',60,50,70,105,61,,,,62,63,146,56,,89,129,130,132,127,128,131,,46,48',
'47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,186,89,,52,,,,,,46',
'48,47,,49,44,45,,105,,,,60,50,70,,61,,,,62,63,,,186,,,52,,,,,,,,,,,',
',,,,209,,,,,,129,130,132,127,128,131,,,171,,,173,129,130,132,127,128',
'131,115,116,117,121,122,123,118,119,120,124,125,126,102,104,103,109',
'111,110,112,114,113,106,108,107,133,134,101,100,137,209,105,,,,,129',
'130,132,127,128,131,,105,,,,,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113',
'106,108,107,133,134,101,100,137,209,105,,,,,129,130,132,127,128,131',
',105,,,,,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120',
'124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133,134',
'101,100,137,453,105,,,,,129,130,132,127,128,131,,105,,,,,129,130,132',
'127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102,104',
'103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,209,105',
',,,,129,130,132,127,128,131,,105,,,,,129,130,132,127,128,131,115,116',
'117,121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112',
'114,113,106,108,107,133,134,101,100,137,209,105,,,,,129,130,132,127',
'128,131,,105,,,,,129,130,132,127,128,131,115,116,117,121,122,123,118',
'119,120,124,125,126,102,104,103,109,111,110,112,114,113,106,108,107',
'133,134,101,100,137,458,105,,,,129,130,132,127,128,131,,,105,,,,,129',
'130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126',
'102,104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137',
'105,129,130,132,127,128,131,129,130,132,127,128,131,105,129,130,132',
'127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102,104',
'103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,105,,,,',
',105,129,130,132,127,128,131,105,129,130,132,127,128,131,115,116,117',
'121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114',
'113,106,108,107,133,134,101,100,137,,,,,,,105,,,,,,,105,129,130,132',
'127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102,104',
'103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,,',
',,,,,105,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120',
'124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133,134',
'101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113',
'106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128',
'131,115,116,117,121,122,123,118,119,120,124,125,126,102,104,103,109',
'111,110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105',
'129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125',
'126,102,104,103,109,111,110,112,114,113,106,108,107,133,134,101,100',
'137,,,,,,,358,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122',
'123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106',
'108,107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131',
'115,116,117,121,122,123,118,119,120,124,125,126,102,104,103,109,111',
'110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105,129',
'130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126',
'102,104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137',
',,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122,123,118',
'119,120,124,125,126,102,104,103,109,111,110,112,114,113,106,108,107',
'133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116',
'117,121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112',
'114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,335,105,129,130',
'132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102',
'104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,',
',,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122,123,118,119',
'120,124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133',
'134,101,100,137,,,,,,,,,,338,,,339,105,129,130,132,127,128,131,115,116',
'117,121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112',
'114,113,106,108,107,133,134,101,100,137,,,,,,,358,,,,,,,105,129,130',
'132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102',
'104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,',
',,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122,123,118,119',
'120,124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133',
'134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117',
'121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114',
'113,106,108,107,133,134,101,100,137,,,,,,,264,,,,,,,105,129,130,132',
'127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102,104',
'103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,,',
',,,,,105,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120',
'124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133,134',
'101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113',
'106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128',
'131,115,116,117,121,122,123,118,119,120,124,125,126,102,104,103,109',
'111,110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105',
'129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125',
'126,102,104,103,109,111,110,112,114,113,106,108,107,133,134,101,100',
'137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122,123',
'118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106,108',
'107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115',
'116,117,121,122,123,118,119,120,124,125,126,102,104,103,109,111,110',
'112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130',
'132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102',
'104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,',
',,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122,123,118,119',
'120,124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133',
'134,101,100,137,,,,,,,264,,,,,,,105,129,130,132,127,128,131,115,116',
'117,121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112',
'114,113,106,108,107,133,134,101,100,137,,,,,,,,,,395,,,,105,129,130',
'132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102',
'104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,',
',,,,,392,,,339,105,129,130,132,127,128,131,115,116,117,121,122,123,118',
'119,120,124,125,126,102,104,103,109,111,110,112,114,113,106,108,107',
'133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116',
'117,121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112',
'114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,273,105,129,130',
'132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102',
'104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,',
',,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122,123,118,119',
'120,124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,,,,',
',,,,,,,,,,,,,,105' ]
        racc_action_table = arr = ::Array.new(6602, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'22,200,74,420,22,200,372,372,329,365,366,180,180,430,142,142,74,142',
'327,300,365,300,180,327,459,142,142,142,328,142,142,142,142,366,372',
'329,430,142,142,142,8,142,8,8,8,142,142,22,22,22,22,22,22,22,22,22,22',
'22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22',
'22,22,142,458,459,142,93,458,328,458,458,458,458,458,372,22,458,452',
'458,458,285,285,458,458,458,458,458,464,458,458,458,458,458,458,458',
'458,458,458,458,458,458,458,458,157,162,458,458,458,458,458,157,3,182',
'458,458,321,59,59,281,281,281,281,445,281,462,449,93,59,281,281,40,40',
'326,445,208,462,449,452,326,326,208,285,285,309,73,73,73,464,330,55',
'458,162,458,458,2,458,162,175,2,275,2,2,2,2,2,276,198,2,282,2,2,3,59',
'2,2,2,2,2,161,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,309,2,2,2,2,2,55,382,202',
'2,2,405,382,405,175,143,275,143,138,138,138,138,276,198,282,282,138',
'296,155,331,161,155,296,155,202,161,66,66,66,66,178,284,211,310,279',
'279,2,283,2,2,311,2,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,202,201,283,283,283,283,284,284,211,310,174,311',
'283,283,202,31,31,31,31,334,31,42,42,42,42,179,179,201,72,72,72,427',
'170,358,399,264,411,411,86,280,280,288,288,169,337,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,427,209,358,399',
'264,209,86,209,209,209,209,209,166,201,209,160,209,209,342,343,209,209',
'209,209,209,320,209,209,209,209,209,209,209,209,209,209,209,209,209',
'209,209,209,183,209,209,209,209,209,154,351,353,209,209,354,151,252',
'252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252',
'252,252,252,252,252,252,252,252,252,252,252,252,245,245,245,209,357',
'209,209,0,209,150,148,0,363,0,0,0,0,0,252,364,0,318,0,0,187,146,0,0',
'0,0,0,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,0,0,0,0,0,141,140,314',
'0,0,97,96,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218',
'218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218',
'218,0,92,0,0,453,0,381,205,453,384,453,453,453,453,453,218,385,453,386',
'453,453,90,89,453,453,453,453,453,88,453,453,453,453,453,453,453,453',
'453,453,453,453,453,453,453,87,206,453,453,453,453,453,207,400,403,453',
'453,308,406,219,219,219,219,219,219,219,219,219,219,219,219,219,219',
'219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219',
'219,407,453,210,453,453,435,453,412,247,435,415,435,435,435,435,435',
'219,416,435,417,435,435,418,181,435,435,435,435,435,423,435,435,435',
'435,435,435,435,435,435,435,435,435,435,435,435,424,70,435,435,435,435',
'435,248,43,429,435,435,250,431,220,220,220,220,220,220,220,220,220,220',
'220,220,220,220,220,220,220,220,301,299,35,298,442,32,297,446,447,295',
'258,246,246,246,27,435,24,435,435,94,435,23,454,94,455,94,94,94,94,94',
'220,456,94,457,94,94,19,266,94,94,94,94,94,291,94,94,94,94,94,94,94',
'94,94,94,94,94,94,94,94,246,1,94,94,94,94,94,465,,,94,94,,,221,221,221',
'221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,233,233',
'233,233,233,233,,,,,,,249,249,249,94,,94,94,95,94,,,95,,95,95,95,95',
'95,221,,95,,95,95,,,95,95,95,95,95,,95,95,95,95,233,95,95,95,95,95,95',
'95,95,95,95,95,249,95,95,95,95,95,,,,95,95,307,307,307,307,307,307,307',
'307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307',
'307,307,307,307,307,307,307,307,307,307,307,95,,316,95,,95,316,316,316',
'316,316,316,316,307,33,316,,316,316,,,316,316,316,316,316,,316,316,316',
'316,316,316,316,316,316,316,316,316,316,316,316,,,316,316,316,316,316',
',,,316,316,374,33,33,33,33,,,,,,,,,,,,,,,,,,,,,,,,,,185,185,185,,,316',
',316,316,,316,,374,374,374,374,374,374,374,374,374,374,374,374,374,374',
'374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374',
'374,374,374,374,371,185,,,,,,,,139,139,,139,374,,139,,,,,139,139,139',
',139,139,139,139,,,,,139,139,139,,139,,,,139,139,371,371,371,371,371',
'371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371',
'371,371,371,371,371,371,371,371,371,371,371,371,371,139,,,139,,139,',
'139,256,256,,256,,371,256,184,184,184,,256,256,256,,256,256,256,256',
',,,,256,256,256,,256,,,,256,256,388,388,388,,388,,,388,,,,,388,388,388',
',388,388,388,388,,,184,,388,388,388,,388,,,,388,388,,256,,,256,,256',
',256,,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222',
'222,222,,213,213,213,,213,,388,213,,388,,388,213,213,213,,213,213,213',
'213,,,,,213,213,213,,213,222,,,213,213,272,272,,272,,,272,,,,,272,272',
'272,,272,272,272,272,,,,,272,272,272,,272,,,,272,272,,,213,213,,213',
',213,,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224',
'224,224,,,,,128,128,,128,272,,128,272,,272,272,128,128,128,,128,128',
'128,128,,,,,128,128,128,224,128,,,,128,128,56,56,,56,,,56,,,,56,56,56',
'56,,56,56,56,56,,,,,56,56,56,,56,,,,56,56,54,54,128,54,,128,54,128,',
',,54,54,54,,54,54,54,54,,,54,,54,54,54,,54,,,,54,54,58,58,56,58,,56',
'58,56,,,,58,58,58,,58,58,58,58,,,58,,58,58,58,,58,,,,58,58,164,164,54',
'164,,54,164,54,,,,164,164,164,,164,164,164,164,,,,,164,164,164,,164',
',,,164,164,61,61,58,61,,58,61,58,,,,61,61,61,,61,61,61,61,,,,,61,61',
'61,,61,,,,61,61,62,62,164,62,,164,62,164,,,,62,62,62,,62,62,62,62,,',
',,62,62,62,,62,,,,62,62,63,63,61,63,,61,63,61,,,,63,63,63,,63,63,63',
'63,,,,,63,63,63,,63,,,,63,63,52,52,62,52,,62,52,62,,,,52,52,52,,52,52',
'52,52,,,52,,52,52,52,,52,,,,52,52,426,426,63,426,,63,426,63,,,,426,426',
'426,,426,426,426,426,,,,,426,426,426,,426,,,,426,426,265,265,52,265',
',52,265,52,,,,265,265,265,,265,265,265,265,,,,,265,265,265,,265,,,,265',
'265,413,413,426,413,,426,413,426,,,,413,413,413,,413,413,413,413,,,',
',413,413,413,,413,,,,413,413,,,265,265,,265,,265,225,225,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,,,,,312,312,,312',
',413,312,,413,,413,312,312,312,,312,312,312,312,,,,,312,312,312,225',
'312,,,,312,312,432,432,,432,,,432,,,,,432,432,432,,432,432,432,432,',
',,,432,432,432,,432,,,,432,432,78,78,312,78,,312,78,312,,,,78,78,78',
',78,78,78,78,,,78,,78,78,78,,78,,,,78,78,80,80,432,80,,432,80,432,,',
',80,80,80,,80,80,80,80,,,,,80,80,80,,80,,,,80,80,81,81,78,81,,78,81',
'78,,,,81,81,81,,81,81,81,81,,,,,81,81,81,,81,,,,81,81,82,82,80,82,,80',
'82,80,,,,82,82,82,,82,82,82,82,,,,,82,82,82,,82,,,,82,82,85,85,81,85',
',81,85,81,,,,85,85,85,,85,85,85,85,,,,,85,85,85,,85,,,,85,85,434,434',
'82,434,,82,434,82,,,,434,434,434,,434,434,434,434,,,,,434,434,434,,434',
',,,434,434,313,313,85,313,,85,313,85,,,,313,313,313,,313,313,313,313',
',,,,313,313,313,,313,,,,313,313,315,315,434,315,,434,315,434,,,,315',
'315,315,,315,315,315,315,,,,,315,315,315,,315,,,,315,315,293,293,313',
'293,,313,293,313,,,,293,293,293,,293,293,293,293,,,,,293,293,293,,293',
',,,293,293,387,387,315,387,,315,387,315,,,,387,387,387,,387,387,387',
'387,,,,,387,387,387,,387,,,,387,387,,,293,293,,293,,293,,226,226,226',
'226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,,,,,192',
'192,,192,387,387,192,387,,387,,192,192,192,,192,192,192,192,,,,,192',
'192,192,226,192,,,,192,192,191,191,,191,,,191,,,,,191,191,191,,191,191',
'191,191,,,,,191,191,191,,191,,,,191,191,268,268,192,268,,192,268,192',
',,,268,268,268,,268,268,268,268,,,,,268,268,268,,268,,,,268,268,270',
'270,191,270,,191,270,191,,,,270,270,270,,270,270,270,270,,,,,270,270',
'270,,270,,,,270,270,190,190,268,190,,268,190,268,,,,190,190,190,,190',
'190,190,190,,,,,190,190,190,,190,,,,190,190,,,270,,,270,270,270,227',
'227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227',
',,,,189,189,,189,,190,189,,190,,190,189,189,189,,189,189,189,189,,,',
',189,189,189,227,189,,,,189,189,29,29,,29,,,29,,,,,29,29,29,,29,29,29',
'29,,,,,29,29,29,,29,,,,29,29,100,100,189,100,,189,100,189,,,,100,100',
'100,,100,100,100,100,,,,,100,100,100,,100,,,,100,100,101,101,29,101',
',29,101,29,,,,101,101,101,,101,101,101,101,,,,,101,101,101,,101,,,,101',
'101,102,102,100,102,,100,102,100,,,,102,102,102,,102,102,102,102,,,',
',102,102,102,,102,,,,102,102,103,103,101,103,,101,103,101,,,,103,103',
'103,,103,103,103,103,,,,,103,103,103,,103,,,,103,103,104,104,102,104',
',102,104,102,,,,104,104,104,,104,104,104,104,,,,,104,104,104,,104,,',
',104,104,105,105,103,105,,103,105,103,,,,105,105,105,,105,105,105,105',
',,,,105,105,105,,105,,,,105,105,106,106,104,106,,104,106,104,,,,106',
'106,106,,106,106,106,106,,,,,106,106,106,,106,,,,106,106,107,107,105',
'107,,105,107,105,,,,107,107,107,,107,107,107,107,,,,,107,107,107,,107',
',,,107,107,108,108,106,108,,106,108,106,,,,108,108,108,,108,108,108',
'108,,,,,108,108,108,,108,,,,108,108,109,109,107,109,,107,109,107,,,',
'109,109,109,,109,109,109,109,,,,,109,109,109,,109,,,,109,109,110,110',
'108,110,,108,110,108,,,,110,110,110,,110,110,110,110,,,,,110,110,110',
',110,,,,110,110,111,111,109,111,,109,111,109,,,,111,111,111,,111,111',
'111,111,,,,,111,111,111,,111,,,,111,111,112,112,110,112,,110,112,110',
',,,112,112,112,,112,112,112,112,,,,,112,112,112,,112,,,,112,112,113',
'113,111,113,,111,113,111,,,,113,113,113,,113,113,113,113,,,,,113,113',
'113,,113,,,,113,113,114,114,112,114,,112,114,112,,,,114,114,114,,114',
'114,114,114,,,,,114,114,114,,114,,,,114,114,115,115,113,115,,113,115',
'113,,,,115,115,115,,115,115,115,115,,,,,115,115,115,,115,,,,115,115',
'116,116,114,116,,114,116,114,,,,116,116,116,,116,116,116,116,,,,,116',
'116,116,,116,,,,116,116,117,117,115,117,,115,117,115,,,,117,117,117',
',117,117,117,117,,,,,117,117,117,,117,,,,117,117,118,118,116,118,,116',
'118,116,,,,118,118,118,,118,118,118,118,,,,,118,118,118,,118,,,,118',
'118,119,119,117,119,,117,119,117,,,,119,119,119,,119,119,119,119,,,',
',119,119,119,,119,,,,119,119,120,120,118,120,,118,120,118,,,,120,120',
'120,,120,120,120,120,,,,,120,120,120,,120,,,,120,120,121,121,119,121',
',119,121,119,,,,121,121,121,,121,121,121,121,,,,,121,121,121,,121,,',
',121,121,122,122,120,122,,120,122,120,,,,122,122,122,,122,122,122,122',
',,,,122,122,122,,122,,,,122,122,123,123,121,123,,121,123,121,,,,123',
'123,123,,123,123,123,123,,,,,123,123,123,,123,,,,123,123,124,124,122',
'124,,122,124,122,,,,124,124,124,,124,124,124,124,,,,,124,124,124,,124',
',,,124,124,125,125,123,125,,123,125,123,,,,125,125,125,,125,125,125',
'125,,,,,125,125,125,,125,,,,125,125,126,126,124,126,,124,126,124,,,',
'126,126,126,,126,126,126,126,,,,,126,126,126,,126,,,,126,126,127,127',
'125,127,,125,127,125,,,,127,127,127,,127,127,127,127,,,,,127,127,127',
',127,,,,127,127,259,259,126,259,,126,259,126,,,,259,259,259,,259,259',
'259,259,,,259,,259,259,259,,259,,,,259,259,129,129,127,129,,127,129',
'127,,,,129,129,129,,129,129,129,129,,,,,129,129,129,,129,,,,129,129',
'130,130,259,130,,259,130,259,,,,130,130,130,,130,130,130,130,,,,,130',
'130,130,,130,,,,130,130,131,131,129,131,,129,131,129,,,,131,131,131',
',131,131,131,131,,,,,131,131,131,,131,,,,131,131,132,132,130,132,,130',
'132,130,,,,132,132,132,,132,132,132,132,,,,,132,132,132,,132,,,,132',
'132,133,133,131,133,,131,133,131,,,,133,133,133,,133,133,133,133,,,',
',133,133,133,,133,,,,133,133,134,134,132,134,,132,134,132,,,,134,134',
'134,,134,134,134,134,,,,,134,134,134,,134,,,,134,134,135,135,133,135',
',133,135,133,,,,135,135,135,,135,135,135,135,,,,,135,135,135,,135,,',
',135,135,136,136,134,136,,134,136,134,,,,136,136,136,,136,136,136,136',
',,,,136,136,136,,136,,,,136,136,137,137,135,137,,135,137,135,,,,137',
'137,137,,137,137,137,137,,,,,137,137,137,,137,,,,137,137,273,273,136',
'273,,136,273,136,,,,273,273,273,,273,273,273,273,,,,,273,273,273,,273',
',,,273,273,274,274,137,274,,137,274,137,,,,274,274,274,,274,274,274',
'274,,,,,274,274,274,,274,,,,274,274,292,292,273,292,,273,292,273,,,',
'292,292,292,,292,292,292,292,,,,,292,292,292,,292,,,,292,292,,,274,274',
',274,,274,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228',
'228,228,228,,,,,289,289,,289,,292,289,,292,,292,289,289,289,,289,289',
'289,289,,,,,289,289,289,228,289,,,,289,289,186,186,,186,,,186,,,,,186',
'186,186,,186,186,186,186,,,,,186,186,186,,186,,,,186,186,319,319,289',
'319,,289,319,289,,,,319,319,319,,319,319,319,319,,,,,319,319,319,,319',
',,,319,319,322,322,186,322,,186,322,186,,,,322,322,322,,322,322,322',
'322,,,,,322,322,322,,322,,,,322,322,323,323,319,323,,319,323,319,,,',
'323,323,323,,323,323,323,323,,,,,323,323,323,,323,,,,323,323,147,147',
'322,147,,322,147,322,,,,147,147,147,,147,147,147,147,,,,,147,147,147',
',147,,,,147,147,360,360,323,360,,323,360,323,,,,360,360,360,,360,360',
'360,360,,,,,360,360,360,,360,,,,360,360,,,147,147,,147,,147,,229,229',
'229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,,,,',
'324,324,,324,360,360,324,360,,360,,324,324,324,,324,324,324,324,,,,',
'324,324,324,229,324,,,,324,324,176,176,,176,,,176,,,,,176,176,176,,176',
'176,176,176,,,,,176,176,176,,176,,,,176,176,333,333,324,333,,324,333',
'324,,,,333,333,333,,333,333,333,333,,,,,333,333,333,,333,,,,333,333',
',,176,176,,176,,176,230,230,230,230,230,230,230,230,230,230,230,230',
'230,230,230,230,230,230,,,,,173,173,,173,,333,173,,333,,333,173,173',
'173,,173,173,173,173,,,173,,173,173,173,230,173,,,,173,173,171,171,',
'171,,,171,,,,,171,171,171,,171,171,171,171,,,,,171,171,171,,171,,,,171',
'171,335,335,173,335,,173,335,173,,,,335,335,335,,335,335,335,335,,,',
',335,335,335,,335,,,,335,335,,,171,171,,171,,171,231,231,231,231,231',
'231,231,231,231,231,231,231,231,231,231,231,231,231,,,,,339,339,,339',
',335,339,,335,,335,339,339,339,,339,339,339,339,,,339,,339,339,339,231',
'339,,,,339,339,165,165,,165,,,165,,,,,165,165,165,,165,165,165,165,',
',,,165,165,165,,165,,,,165,165,286,286,339,286,,339,286,339,,,,286,286',
'286,,286,286,286,286,,,286,,286,286,286,,286,,,,286,286,,,165,165,,165',
',165,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232',
'232,232,,,,,64,64,,64,,286,,,286,,286,64,64,64,,64,64,64,,,,,,64,64',
'64,232,64,,,,64,64,99,99,,99,234,234,234,234,234,234,,99,99,99,,99,99',
'99,99,,,,,99,99,99,,99,,,,99,99,57,57,64,57,,64,,,,,,57,57,57,,57,57',
'57,,234,,,,57,57,57,,57,,,,57,57,,,99,,,99,,,,,,,,,,,,,,,,378,,,,,,235',
'235,235,235,235,235,,,57,,,57,378,378,378,378,378,378,378,378,378,378',
'378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378',
'378,378,378,378,378,378,378,378,379,235,,,,,236,236,236,236,236,236',
',378,,,,,379,379,379,379,379,379,379,379,379,379,379,379,379,379,379',
'379,379,379,379,379,379,379,379,379,379,379,379,379,379,379,379,379',
'379,379,379,203,236,,,,,237,237,237,237,237,237,,379,,,,,203,203,203',
'203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203',
'203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,436,237',
',,,,238,238,238,238,238,238,,203,,,,,436,436,436,436,436,436,436,436',
'436,436,436,436,436,436,436,436,436,436,436,436,436,436,436,436,436',
'436,436,436,436,436,436,436,436,436,436,204,238,,,,,239,239,239,239',
'239,239,,436,,,,,204,204,204,204,204,204,204,204,204,204,204,204,204',
'204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204',
'204,204,204,204,204,377,239,,,,,240,240,240,240,240,240,,204,,,,,377',
'377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377',
'377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377',
'451,240,,,,241,241,241,241,241,241,,,377,,,,,451,451,451,451,451,451',
'451,451,451,451,451,451,451,451,451,451,451,451,451,451,451,451,451',
'451,451,451,451,451,451,451,451,451,451,451,451,241,242,242,242,242',
'242,242,243,243,243,243,243,243,451,425,425,425,425,425,425,425,425',
'425,425,425,425,425,425,425,425,425,425,425,425,425,425,425,425,425',
'425,425,425,425,425,425,425,425,425,425,242,,,,,,243,244,244,244,244',
'244,244,425,306,306,306,306,306,306,306,306,306,306,306,306,306,306',
'306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306',
'306,306,306,306,,,,,,,244,,,,,,,306,391,391,391,391,391,391,391,391',
'391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391',
'391,391,391,391,391,391,391,391,391,391,,,,,,,,,,,,,,391,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,,,,,,,,',
',,,,,223,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305',
'305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305',
'305,305,305,,,,,,,,,,,,,,305,304,304,304,304,304,304,304,304,304,304',
'304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304',
'304,304,304,304,304,304,304,304,,,,,,,,,,,,,,304,303,303,303,303,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,,,,,,,303,,,,,,',
'303,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199',
'199,199,,,,,,,,,,,,,,199,394,394,394,394,394,394,394,394,394,394,394',
'394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394',
'394,394,394,394,394,394,394,,,,,,,,,,,,,,394,253,253,253,253,253,253',
'253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253',
'253,253,253,253,253,253,253,253,253,253,253,253,,,,,,,,,,,,,,253,254',
'254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254',
'254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254',
',,,,,,,,,,,,,254,255,255,255,255,255,255,255,255,255,255,255,255,255',
'255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255',
'255,255,255,255,255,,,,,,,,,,,,,255,255,389,389,389,389,389,389,389',
'389,389,389,389,389,389,389,389,389,389,389,389,389,389,389,389,389',
'389,389,389,389,389,389,389,389,389,389,389,,,,,,,,,,,,,,389,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,,,,',
',,,,,257,,,257,257,294,294,294,294,294,294,294,294,294,294,294,294,294',
'294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294',
'294,294,294,294,294,,,,,,,294,,,,,,,294,287,287,287,287,287,287,287',
'287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287',
'287,287,287,287,287,287,287,287,287,287,287,,,,,,,,,,,,,,287,369,369',
'369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369',
'369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,,,,',
',,,,,,,,,369,145,145,145,145,145,145,145,145,145,145,145,145,145,145',
'145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145',
'145,145,145,145,,,,,,,145,,,,,,,145,444,444,444,444,444,444,444,444',
'444,444,444,444,444,444,444,444,444,444,444,444,444,444,444,444,444',
'444,444,444,444,444,444,444,444,444,444,,,,,,,,,,,,,,444,450,450,450',
'450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450',
'450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,,,,,,,,',
',,,,,450,368,368,368,368,368,368,368,368,368,368,368,368,368,368,368',
'368,368,368,368,368,368,368,368,368,368,368,368,368,368,368,368,368',
'368,368,368,,,,,,,,,,,,,,368,332,332,332,332,332,332,332,332,332,332',
'332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332',
'332,332,332,332,332,332,332,332,,,,,,,,,,,,,,332,356,356,356,356,356',
'356,356,356,356,356,356,356,356,356,356,356,356,356,356,356,356,356',
'356,356,356,356,356,356,356,356,356,356,356,356,356,,,,,,,,,,,,,,356',
'350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350',
'350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350',
'350,,,,,,,,,,,,,,350,347,347,347,347,347,347,347,347,347,347,347,347',
'347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,347',
'347,347,347,347,347,347,,,,,,,,,,,,,,347,156,156,156,156,156,156,156',
'156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156',
'156,156,156,156,156,156,156,156,156,156,156,,,,,,,,,,,,,,156,290,290',
'290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290',
'290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,,,,',
',,290,,,,,,,290,345,345,345,345,345,345,345,345,345,345,345,345,345',
'345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345',
'345,345,345,345,345,,,,,,,,,,345,,,,345,336,336,336,336,336,336,336',
'336,336,336,336,336,336,336,336,336,336,336,336,336,336,336,336,336',
'336,336,336,336,336,336,336,336,336,336,336,,,,,,,,,,336,,,336,336,168',
'168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168',
'168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168',
',,,,,,,,,,,,,168,159,159,159,159,159,159,159,159,159,159,159,159,159',
'159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159',
'159,159,159,159,159,,,,,,,,,,,,,159,159,341,341,341,341,341,341,341',
'341,341,341,341,341,341,341,341,341,341,341,341,341,341,341,341,341',
'341,341,341,341,341,341,341,341,341,341,341,,,,,,,,,,,,,,341,251,251',
'251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251',
'251,251,251,251,251,251,251,251,251,251,251,,,,,,,,,,,,,,,,,,,251' ]
        racc_action_check = arr = ::Array.new(6602, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   471,   787,   172,   100,   nil,   nil,   nil,   nil,    -2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   675,
   nil,   nil,    -2,   656,   689,   nil,   nil,   653,   nil,  2394,
   nil,   232,   689,   895,   nil,   686,   nil,   nil,   nil,   nil,
   117,   nil,   238,   611,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1577,   nil,  1379,   127,  1346,  4525,  1412,   103,
   nil,  1478,  1511,  1544,  4459,   nil,   167,   nil,   nil,   nil,
   654,   nil,   285,   120,   -42,   nil,   nil,   nil,  1805,   nil,
  1838,  1871,  1904,   nil,   nil,  1937,   295,   573,   544,   538,
   492,   nil,   561,    55,   744,   835,   434,   483,   nil,  4492,
  2427,  2460,  2493,  2526,  2559,  2592,  2625,  2658,  2691,  2724,
  2757,  2790,  2823,  2856,  2889,  2922,  2955,  2988,  3021,  3054,
  3087,  3120,  3153,  3186,  3219,  3252,  3285,  3318,  1313,  3384,
  3417,  3450,  3483,  3516,  3549,  3582,  3615,  3648,   149,  1043,
   478,   478,    -7,   140,   nil,  5769,   402,  3975,   433,   nil,
   432,   392,   nil,   nil,   337,   155,  6161,    35,   nil,  6406,
   307,   156,    82,   nil,  1445,  4363,   305,   nil,  6357,   255,
   290,  4234,   nil,  4201,   219,   135,  4105,   nil,   167,   293,
   -22,   585,    90,   326,  1098,   959,  3843,   398,   nil,  2361,
  2298,  2199,  2166,   nil,   nil,   nil,   nil,   455,   144,  5279,
    -1,   297,   218,  4675,  4781,   551,   589,   595,   147,   380,
   610,   215,   nil,  1216,   nil,   nil,   nil,   nil,   478,   569,
   660,   751,  1168,  5083,  1263,  1689,  2116,  2311,  3760,  4022,
  4151,  4280,  4409,   769,  4468,  4557,  4610,  4663,  4716,  4769,
  4822,  4874,  4923,  4929,  4978,   417,   689,   561,   605,   781,
   610,  6504,   387,  5377,  5426,  5475,  1119,  5573,   644,  3351,
   nil,   nil,   nil,   nil,   293,  1643,   674,   nil,  2232,   nil,
  2265,   nil,  1249,  3681,  3714,   137,   143,   nil,   nil,   165,
   246,    54,   145,   219,   213,    67,  4396,  5671,   248,  3810,
  6210,   680,  3747,  2069,  5622,   646,   154,   641,   641,   638,
   -69,   683,   nil,  5230,  5181,  5132,  4985,   840,   561,   121,
   216,   223,  1739,  2003,   515,  2036,   924,   nil,   480,  3876,
   399,   128,  3909,  3942,  4072,   nil,   145,   -13,    -3,   -23,
    79,   156,  5965,  4138,   230,  4267,  6308,   252,   nil,  4330,
   nil,  6455,   356,   308,   nil,  6259,   nil,  6112,   nil,   nil,
  6063,   340,   nil,   336,   339,   nil,  6014,   380,   291,   nil,
  4008,   nil,   nil,   436,   441,   -22,    -9,   nil,  5916,  5720,
   nil,  1048,     3,   nil,   971,   nil,   nil,  4834,  4569,  4622,
   nil,   535,   191,   nil,   538,   569,   534,  2102,  1153,  5524,
   nil,  5034,   nil,   nil,  5328,   nil,   nil,   nil,   nil,   292,
   522,   nil,   nil,   606,   nil,   138,   527,   566,   nil,   nil,
   nil,   334,   626,  1676,   nil,   653,   660,   662,   665,   nil,
   -28,   nil,   nil,   637,   605,  4936,  1610,   289,   nil,   662,
    -6,   666,  1772,   nil,  1970,   653,  4728,   nil,   nil,   nil,
   nil,   nil,   700,   nil,  5818,   111,   644,   651,   nil,   114,
  5867,  4887,    66,   562,   742,   744,   716,   753,    81,    -7,
   nil,   nil,   113,   nil,    76,   786,   nil ]

racc_action_default = [
    -1,  -257,    -2,    -3,    -4,    -8,    -9,   -10,   -11,   -12,
   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,
   -23,   -24,   -25,   -26,   -27,   -29,   -30,   -31,   -32,  -116,
   -34,   -35,   -36,   -37,   -38,   -39,   -40,   -49,   -50,   -51,
   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,   -60,   -63,
   -64,   -65,   -69,   -72,   -75,  -257,  -116,  -116,  -119,  -116,
  -115,  -116,  -116,  -116,  -116,  -168,  -257,  -177,  -179,  -180,
  -257,  -184,  -116,  -116,  -116,  -200,  -201,  -202,  -217,  -219,
  -116,  -116,  -116,  -228,  -229,  -116,  -116,  -257,  -116,  -116,
  -255,  -256,  -257,    -7,  -116,    -6,  -257,  -257,  -188,  -116,
  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,
  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,
  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,
  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,   -83,  -116,
   -28,  -257,  -116,   -26,   -31,  -257,  -257,  -116,   -80,   -94,
   -79,   -81,   -61,   -62,  -182,  -257,   -70,  -257,   -76,  -257,
  -257,  -183,  -185,  -189,  -116,  -116,  -101,  -102,  -127,   -35,
   -37,  -116,   -54,   -69,  -257,  -257,  -116,  -107,  -120,  -111,
  -116,  -109,  -257,  -164,  -165,  -166,  -116,  -257,  -167,  -116,
  -116,  -116,  -116,  -181,  -186,  -187,  -117,  -257,  -257,  -218,
  -214,  -257,  -257,  -257,  -257,  -257,  -257,  -257,  -237,  -243,
  -257,  -257,  -253,  -116,   467,    -5,  -183,  -170,  -129,  -130,
  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,
  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,
  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,
  -161,  -162,  -163,  -222,  -225,  -257,  -116,  -257,  -257,   -93,
   -97,   -96,  -169,   -41,   -33,  -116,  -257,   -95,  -116,   -67,
  -116,   -73,  -116,  -116,  -116,  -257,  -190,  -191,  -192,   -29,
   -30,   -35,   -36,   -37,   -39,   -52,   -75,  -257,  -257,  -116,
  -127,  -257,  -116,  -116,  -127,  -257,  -257,   -83,  -257,  -257,
  -257,  -116,  -110,  -257,  -171,  -172,  -173,  -174,  -257,  -204,
  -203,  -207,  -116,  -116,  -257,  -116,  -116,  -244,  -257,  -116,
  -257,  -257,  -116,  -116,  -116,  -234,  -257,  -257,  -242,  -257,
  -105,  -122,  -123,  -116,  -257,  -116,  -257,  -257,   -86,   -91,
   -87,   -92,   -82,   -84,   -99,  -257,   -68,   -71,   -74,   -77,
   -78,  -257,  -193,  -257,  -257,  -100,  -128,  -257,  -257,  -103,
  -116,  -106,  -108,  -257,  -116,  -257,  -208,  -205,  -215,  -216,
  -220,  -257,  -242,  -223,  -257,  -227,  -230,  -257,  -257,  -257,
  -235,  -257,  -257,  -238,  -257,  -257,  -116,  -116,  -116,  -124,
  -254,  -226,   -88,   -89,   -90,   -66,   -98,  -194,  -195,  -114,
  -257,  -112,  -118,  -257,  -206,  -257,  -257,  -209,  -210,  -221,
  -245,  -246,  -257,  -116,  -224,  -257,  -257,  -257,  -257,  -240,
  -257,  -239,  -251,  -257,  -257,  -125,  -116,  -113,  -196,  -207,
  -257,  -207,  -116,  -247,  -116,  -116,  -257,  -231,  -232,  -233,
  -236,  -241,  -257,  -104,  -126,  -257,  -257,  -211,  -212,  -257,
  -213,  -257,  -248,  -116,  -257,  -257,  -207,  -257,  -116,  -249,
  -252,  -197,  -257,  -198,  -250,  -257,  -199 ]

racc_goto_table = [
     2,   170,    27,    95,    27,     3,   148,    98,   365,   151,
   384,    96,   284,   258,   169,   155,   408,   410,   172,   181,
   177,   154,   314,   318,     1,   334,   331,   188,   212,   205,
   179,   166,   280,   282,   279,   198,   349,   207,   405,   354,
   200,   140,   326,   215,   411,   nil,   nil,   206,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   433,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   420,   nil,    97,   nil,   nil,
   nil,   194,   195,   nil,   154,    96,    96,   nil,   nil,   nil,
   448,   nil,   nil,   nil,   nil,   160,   nil,   nil,   nil,   nil,
   145,   nil,   278,    95,   289,   nil,    27,    27,   nil,   nil,
   nil,   217,   nil,   nil,   nil,   nil,   nil,   nil,   283,   266,
   nil,   162,   nil,   156,   nil,   159,   175,   168,   182,   168,
   nil,   281,   183,   184,   185,   nil,   445,   291,   449,   nil,
   337,    97,    97,   196,   284,   285,   296,   284,   299,   199,
   300,   201,   202,   203,   262,    97,   204,   210,   211,   nil,
   nil,   179,   297,   462,   280,   282,   279,   280,   282,   279,
   nil,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
   237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
   247,   248,   249,   250,   251,   252,   253,   254,   255,   nil,
   257,   nil,   nil,   nil,   nil,   298,   278,   nil,   168,   nil,
   nil,    27,   nil,   nil,   328,   nil,   289,   nil,   353,   nil,
   nil,   nil,   nil,   nil,   nil,   287,   290,   208,   311,   nil,
   283,   162,   294,   283,   156,   143,   351,   290,   342,   182,
   278,   330,   343,   281,   nil,   nil,   281,   303,   nil,   nil,
   304,   305,   306,   307,   310,   357,   148,   285,   151,   nil,
   285,   nil,   nil,   174,   nil,   nil,   nil,   310,   nil,   nil,
   187,   nil,   nil,   nil,   332,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   187,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   336,    27,   nil,
   341,   372,   400,   nil,   nil,   nil,   168,   nil,    95,   345,
   nil,   347,   342,   159,   350,   168,   343,   nil,   nil,   nil,
   nil,   nil,   nil,   320,   321,   nil,   nil,   159,   187,   424,
   287,   nil,   nil,   356,   168,   nil,   nil,   nil,   nil,   nil,
   363,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   143,    95,   368,   369,   nil,   371,   143,   nil,   nil,
   374,   nil,   143,   377,   378,   379,   nil,   nil,   nil,   nil,
   nil,   nil,   143,   nil,   389,   nil,   391,   nil,   nil,   nil,
   394,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   168,   nil,   402,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,   nil,   nil,
   452,   nil,   nil,   nil,   nil,   423,   nil,   nil,   168,   425,
   nil,   nil,    95,   nil,   nil,    27,   nil,   nil,   459,    95,
    27,   nil,   nil,   464,    95,   nil,   nil,   383,   nil,   385,
   nil,   nil,   nil,   nil,   436,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   444,   nil,   nil,
   nil,   nil,   nil,   450,   nil,   451,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   403,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   415,   416,   417,
   nil,   418,   419,   nil,   421,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   441,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   454,   nil,   nil,   455,   nil,   nil,   nil,   457,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   465 ]

racc_goto_check = [
     2,    33,    28,     2,    28,     3,    49,    64,    69,    49,
    40,    42,    35,    52,    31,    45,    72,    76,    41,    58,
    55,    50,    74,    74,     1,    60,    61,    62,    57,    65,
    38,    56,    27,    32,    26,    59,    48,    44,    71,    37,
    73,    25,    75,     4,    77,   nil,   nil,    41,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    76,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    40,   nil,    53,   nil,   nil,
   nil,    64,    64,   nil,    50,    42,    42,   nil,   nil,   nil,
    72,   nil,   nil,   nil,   nil,    54,   nil,   nil,   nil,   nil,
    22,   nil,    67,     2,    67,   nil,    28,    28,   nil,   nil,
   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,    33,    55,
   nil,    66,   nil,    22,   nil,    22,    53,    22,    53,    22,
   nil,    31,    22,    22,    22,   nil,    69,    55,    69,   nil,
    52,    53,    53,    53,    35,    38,    45,    35,    55,    22,
    58,    22,    22,    22,    28,    53,    22,    53,    53,   nil,
   nil,    38,    50,    69,    27,    32,    26,    27,    32,    26,
   nil,    22,    22,    22,    22,    22,    22,    22,    22,    22,
    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
    22,    22,    22,    22,    22,    22,    22,    22,    22,   nil,
    22,   nil,   nil,   nil,   nil,    54,    67,   nil,    22,   nil,
   nil,    28,   nil,   nil,     3,   nil,    67,   nil,    67,   nil,
   nil,   nil,   nil,   nil,   nil,    22,    22,    70,    54,   nil,
    33,    66,    22,    33,    22,    23,    55,    22,    49,    53,
    67,    54,    50,    31,   nil,   nil,    31,    22,   nil,   nil,
    22,    22,    22,    22,    66,    55,    49,    38,    49,   nil,
    38,   nil,   nil,    23,   nil,   nil,   nil,    66,   nil,   nil,
    23,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,    28,   nil,
    22,     3,    55,   nil,   nil,   nil,    22,   nil,     2,    22,
   nil,    22,    49,    22,    22,    22,    50,   nil,   nil,   nil,
   nil,   nil,   nil,    70,    70,   nil,   nil,    22,    23,    55,
    22,   nil,   nil,    22,    22,   nil,   nil,   nil,   nil,   nil,
    53,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    23,     2,    22,    22,   nil,    22,    23,   nil,   nil,
    22,   nil,    23,    22,    22,    22,   nil,   nil,   nil,   nil,
   nil,   nil,    23,   nil,    22,   nil,    22,   nil,   nil,   nil,
    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    22,   nil,    53,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,
     3,   nil,   nil,   nil,   nil,    53,   nil,   nil,    22,    22,
   nil,   nil,     2,   nil,   nil,    28,   nil,   nil,     3,     2,
    28,   nil,   nil,     3,     2,   nil,   nil,    70,   nil,    70,
   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,
   nil,   nil,   nil,    22,   nil,    22,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    70,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    70,    70,    70,
   nil,    70,    70,   nil,    70,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    70,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    70,   nil,   nil,    70,   nil,   nil,   nil,    70,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    70 ]

racc_goto_pointer = [
   nil,    24,     0,     5,   -52,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    61,   206,   nil,    17,  -130,  -132,     2,   nil,
   nil,   -43,  -131,   -56,   nil,  -152,   nil,  -250,   -29,   nil,
  -317,   -39,     3,   nil,   -49,   -37,   nil,   nil,  -236,   -26,
   -22,   nil,  -126,    59,    30,   -38,   -25,   -61,   -40,   -39,
  -188,  -187,   -37,   nil,    -1,   -57,    56,   -70,   nil,  -303,
   140,  -328,  -350,   -38,  -179,  -166,  -355,  -328 ]

racc_goto_default = [
   nil,   nil,    94,    93,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,   nil,    25,    26,   144,    28,
    30,    31,    32,    33,    34,    35,    36,   288,    40,    39,
    41,    42,    43,    51,    67,   nil,    53,   157,   158,   150,
   138,    68,   nil,    55,   nil,   295,   178,   nil,   nil,   nil,
   nil,   nil,    65,    66,    71,    69,   276,   163,    74,   nil,
   317,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 99, :_reduce_1,
  1, 99, :_reduce_2,
  1, 99, :_reduce_3,
  1, 101, :_reduce_4,
  3, 101, :_reduce_5,
  2, 101, :_reduce_6,
  2, 101, :_reduce_7,
  1, 102, :_reduce_8,
  1, 102, :_reduce_9,
  1, 102, :_reduce_10,
  1, 102, :_reduce_11,
  1, 102, :_reduce_12,
  1, 102, :_reduce_13,
  1, 102, :_reduce_14,
  1, 102, :_reduce_15,
  1, 102, :_reduce_16,
  1, 102, :_reduce_17,
  1, 102, :_reduce_18,
  1, 102, :_reduce_19,
  1, 102, :_reduce_20,
  1, 102, :_reduce_21,
  1, 102, :_reduce_22,
  1, 102, :_reduce_23,
  1, 102, :_reduce_24,
  1, 102, :_reduce_25,
  1, 120, :_reduce_26,
  1, 120, :_reduce_27,
  2, 120, :_reduce_28,
  1, 120, :_reduce_29,
  1, 120, :_reduce_30,
  1, 120, :_reduce_31,
  1, 120, :_reduce_32,
  3, 120, :_reduce_33,
  1, 121, :_reduce_34,
  1, 121, :_reduce_35,
  1, 121, :_reduce_36,
  1, 121, :_reduce_37,
  1, 121, :_reduce_38,
  1, 121, :_reduce_39,
  1, 121, :_reduce_40,
  3, 121, :_reduce_41,
  1, 135, :_reduce_42,
  1, 135, :_reduce_43,
  1, 135, :_reduce_44,
  1, 135, :_reduce_45,
  1, 135, :_reduce_46,
  1, 135, :_reduce_47,
  1, 135, :_reduce_48,
  1, 100, :_reduce_49,
  1, 100, :_reduce_50,
  1, 132, :_reduce_51,
  1, 132, :_reduce_52,
  1, 132, :_reduce_53,
  1, 132, :_reduce_54,
  1, 132, :_reduce_55,
  1, 132, :_reduce_56,
  1, 132, :_reduce_57,
  1, 137, :_reduce_58,
  1, 136, :_reduce_59,
  1, 136, :_reduce_60,
  2, 136, :_reduce_61,
  2, 136, :_reduce_62,
  1, 138, :_reduce_63,
  1, 140, :_reduce_64,
  1, 139, :_reduce_65,
  5, 142, :_reduce_66,
  3, 141, :_reduce_67,
  4, 141, :_reduce_68,
  0, 143, :_reduce_69,
  1, 143, :_reduce_70,
  3, 143, :_reduce_71,
  1, 122, :_reduce_72,
  3, 144, :_reduce_73,
  4, 144, :_reduce_74,
  0, 145, :_reduce_75,
  1, 145, :_reduce_76,
  3, 145, :_reduce_77,
  3, 146, :_reduce_78,
  2, 129, :_reduce_79,
  2, 129, :_reduce_80,
  2, 129, :_reduce_81,
  4, 129, :_reduce_82,
  2, 130, :_reduce_83,
  4, 130, :_reduce_84,
  2, 149, :_reduce_85,
  3, 148, :_reduce_86,
  3, 148, :_reduce_87,
  4, 148, :_reduce_88,
  4, 148, :_reduce_89,
  3, 150, :_reduce_90,
  2, 150, :_reduce_91,
  2, 150, :_reduce_92,
  1, 150, :_reduce_93,
  1, 147, :_reduce_94,
  2, 147, :_reduce_95,
  2, 123, :_reduce_96,
  2, 123, :_reduce_97,
  5, 133, :_reduce_98,
  4, 133, :_reduce_99,
  4, 133, :_reduce_100,
  2, 133, :_reduce_101,
  2, 133, :_reduce_102,
  4, 133, :_reduce_103,
  5, 155, :_reduce_104,
  2, 155, :_reduce_105,
  4, 115, :_reduce_106,
  2, 115, :_reduce_107,
  4, 116, :_reduce_108,
  2, 116, :_reduce_109,
  2, 156, :_reduce_110,
  1, 156, :_reduce_111,
  4, 156, :_reduce_112,
  6, 103, :_reduce_113,
  5, 103, :_reduce_114,
  1, 151, :_reduce_115,
  0, 151, :_reduce_116,
  1, 157, :_reduce_117,
  4, 157, :_reduce_118,
  0, 153, :_reduce_119,
  1, 153, :_reduce_120,
  0, 158, :_reduce_121,
  1, 158, :_reduce_122,
  1, 159, :_reduce_123,
  2, 159, :_reduce_124,
  3, 159, :_reduce_125,
  4, 159, :_reduce_126,
  1, 154, :_reduce_127,
  3, 154, :_reduce_128,
  3, 124, :_reduce_129,
  3, 124, :_reduce_130,
  3, 124, :_reduce_131,
  3, 124, :_reduce_132,
  3, 124, :_reduce_133,
  3, 124, :_reduce_134,
  3, 124, :_reduce_135,
  3, 124, :_reduce_136,
  3, 124, :_reduce_137,
  3, 124, :_reduce_138,
  3, 124, :_reduce_139,
  3, 124, :_reduce_140,
  3, 124, :_reduce_141,
  3, 124, :_reduce_142,
  3, 124, :_reduce_143,
  3, 124, :_reduce_144,
  3, 124, :_reduce_145,
  3, 124, :_reduce_146,
  3, 124, :_reduce_147,
  3, 124, :_reduce_148,
  3, 124, :_reduce_149,
  3, 124, :_reduce_150,
  3, 124, :_reduce_151,
  3, 124, :_reduce_152,
  3, 124, :_reduce_153,
  3, 124, :_reduce_154,
  3, 124, :_reduce_155,
  3, 124, :_reduce_156,
  3, 124, :_reduce_157,
  3, 124, :_reduce_158,
  3, 124, :_reduce_159,
  3, 124, :_reduce_160,
  3, 124, :_reduce_161,
  3, 124, :_reduce_162,
  3, 124, :_reduce_163,
  2, 128, :_reduce_164,
  2, 128, :_reduce_165,
  2, 128, :_reduce_166,
  2, 126, :_reduce_167,
  1, 126, :_reduce_168,
  3, 117, :_reduce_169,
  3, 117, :_reduce_170,
  3, 160, :_reduce_171,
  3, 160, :_reduce_172,
  3, 160, :_reduce_173,
  3, 160, :_reduce_174,
  1, 161, :_reduce_175,
  1, 161, :_reduce_176,
  1, 161, :_reduce_177,
  1, 161, :_reduce_178,
  1, 161, :_reduce_179,
  1, 162, :_reduce_180,
  2, 162, :_reduce_181,
  2, 162, :_reduce_182,
  2, 163, :_reduce_183,
  1, 131, :_reduce_184,
  2, 131, :_reduce_185,
  2, 106, :_reduce_186,
  2, 106, :_reduce_187,
  2, 106, :_reduce_188,
  1, 164, :_reduce_189,
  2, 164, :_reduce_190,
  2, 164, :_reduce_191,
  2, 164, :_reduce_192,
  3, 165, :_reduce_193,
  4, 165, :_reduce_194,
  4, 165, :_reduce_195,
  6, 104, :_reduce_196,
  9, 104, :_reduce_197,
  9, 104, :_reduce_198,
  11, 104, :_reduce_199,
  1, 166, :_reduce_200,
  1, 166, :_reduce_201,
  1, 166, :_reduce_202,
  1, 152, :_reduce_203,
  1, 152, :_reduce_204,
  1, 167, :_reduce_205,
  2, 167, :_reduce_206,
  0, 167, :_reduce_207,
  0, 169, :_reduce_208,
  1, 169, :_reduce_209,
  1, 169, :_reduce_210,
  3, 169, :_reduce_211,
  3, 169, :_reduce_212,
  3, 170, :_reduce_213,
  2, 105, :_reduce_214,
  4, 105, :_reduce_215,
  4, 105, :_reduce_216,
  0, 171, :_reduce_217,
  1, 171, :_reduce_218,
  1, 114, :_reduce_219,
  4, 118, :_reduce_220,
  5, 118, :_reduce_221,
  3, 118, :_reduce_222,
  4, 119, :_reduce_223,
  5, 119, :_reduce_224,
  3, 119, :_reduce_225,
  5, 125, :_reduce_226,
  4, 109, :_reduce_227,
  1, 113, :_reduce_228,
  1, 113, :_reduce_229,
  4, 110, :_reduce_230,
  6, 108, :_reduce_231,
  6, 108, :_reduce_232,
  6, 108, :_reduce_233,
  3, 111, :_reduce_234,
  4, 111, :_reduce_235,
  6, 111, :_reduce_236,
  0, 173, :_reduce_237,
  2, 173, :_reduce_238,
  3, 173, :_reduce_239,
  3, 173, :_reduce_240,
  4, 173, :_reduce_241,
  2, 168, :_reduce_242,
  1, 168, :_reduce_243,
  1, 172, :_reduce_244,
  3, 172, :_reduce_245,
  3, 172, :_reduce_246,
  4, 172, :_reduce_247,
  3, 174, :_reduce_248,
  4, 175, :_reduce_249,
  5, 175, :_reduce_250,
  5, 112, :_reduce_251,
  8, 112, :_reduce_252,
  2, 134, :_reduce_253,
  4, 127, :_reduce_254,
  1, 127, :_reduce_255,
  1, 107, :_reduce_256 ]

racc_reduce_n = 257

racc_shift_n = 467

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :ELSEIF => 4,
  :THEN => 5,
  :UNLESS => 6,
  :END => 7,
  :WHILE => 8,
  :UNTIL => 9,
  :BREAK => 10,
  :CONTINUE => 11,
  :TRY => 12,
  :CATCH => 13,
  :FINALLY => 14,
  :FOR => 15,
  :IN => 16,
  :DEF => 17,
  :DEF_BANG => 18,
  :SPLAT_PARAM => 19,
  :SPLAT_ARG => 20,
  :CALL => 21,
  :BUILTIN_COMMAND => 22,
  :CLASS => 23,
  :NEW => 24,
  :DEFM => 25,
  :DEFM_BANG => 26,
  :SUPER => 27,
  :RIML_FILE_COMMAND => 28,
  :RIML_CLASS_COMMAND => 29,
  :RETURN => 30,
  :NEWLINE => 31,
  :NUMBER => 32,
  :STRING_D => 33,
  :STRING_S => 34,
  :EX_LITERAL => 35,
  :REGEXP => 36,
  :TRUE => 37,
  :FALSE => 38,
  :LET => 39,
  :UNLET => 40,
  :UNLET_BANG => 41,
  :IDENTIFIER => 42,
  :DICT_VAL => 43,
  :SCOPE_MODIFIER => 44,
  :SCOPE_MODIFIER_LITERAL => 45,
  :SPECIAL_VAR_PREFIX => 46,
  :FINISH => 47,
  "!" => 48,
  "*" => 49,
  "/" => 50,
  "%" => 51,
  "+" => 52,
  "-" => 53,
  "." => 54,
  ">" => 55,
  ">#" => 56,
  ">?" => 57,
  "<" => 58,
  "<#" => 59,
  "<?" => 60,
  ">=" => 61,
  ">=#" => 62,
  ">=?" => 63,
  "<=" => 64,
  "<=#" => 65,
  "<=?" => 66,
  "==" => 67,
  "==?" => 68,
  "==#" => 69,
  "=~" => 70,
  "=~?" => 71,
  "=~#" => 72,
  "!~" => 73,
  "!~?" => 74,
  "!~#" => 75,
  "!=" => 76,
  "!=?" => 77,
  "!=#" => 78,
  :IS => 79,
  :ISNOT => 80,
  "&&" => 81,
  "||" => 82,
  "?" => 83,
  "=" => 84,
  "+=" => 85,
  "-=" => 86,
  ".=" => 87,
  "," => 88,
  "(" => 89,
  ")" => 90,
  ";" => 91,
  "[" => 92,
  "]" => 93,
  "{" => 94,
  "}" => 95,
  ":" => 96,
  "===" => 97 }

racc_nt_base = 98

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "ELSEIF",
  "THEN",
  "UNLESS",
  "END",
  "WHILE",
  "UNTIL",
  "BREAK",
  "CONTINUE",
  "TRY",
  "CATCH",
  "FINALLY",
  "FOR",
  "IN",
  "DEF",
  "DEF_BANG",
  "SPLAT_PARAM",
  "SPLAT_ARG",
  "CALL",
  "BUILTIN_COMMAND",
  "CLASS",
  "NEW",
  "DEFM",
  "DEFM_BANG",
  "SUPER",
  "RIML_FILE_COMMAND",
  "RIML_CLASS_COMMAND",
  "RETURN",
  "NEWLINE",
  "NUMBER",
  "STRING_D",
  "STRING_S",
  "EX_LITERAL",
  "REGEXP",
  "TRUE",
  "FALSE",
  "LET",
  "UNLET",
  "UNLET_BANG",
  "IDENTIFIER",
  "DICT_VAL",
  "SCOPE_MODIFIER",
  "SCOPE_MODIFIER_LITERAL",
  "SPECIAL_VAR_PREFIX",
  "FINISH",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\".\"",
  "\">\"",
  "\">#\"",
  "\">?\"",
  "\"<\"",
  "\"<#\"",
  "\"<?\"",
  "\">=\"",
  "\">=#\"",
  "\">=?\"",
  "\"<=\"",
  "\"<=#\"",
  "\"<=?\"",
  "\"==\"",
  "\"==?\"",
  "\"==#\"",
  "\"=~\"",
  "\"=~?\"",
  "\"=~#\"",
  "\"!~\"",
  "\"!~?\"",
  "\"!~#\"",
  "\"!=\"",
  "\"!=?\"",
  "\"!=#\"",
  "IS",
  "ISNOT",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\"=\"",
  "\"+=\"",
  "\"-=\"",
  "\".=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\":\"",
  "\"===\"",
  "$start",
  "Root",
  "Terminator",
  "Statements",
  "Statement",
  "ExplicitCall",
  "Def",
  "Return",
  "UnletVariable",
  "ExLiteral",
  "For",
  "While",
  "Until",
  "Try",
  "ClassDefinition",
  "LoopKeyword",
  "EndScript",
  "RimlFileCommand",
  "RimlClassCommand",
  "MultiAssign",
  "If",
  "Unless",
  "Expression",
  "ExpressionWithoutDictLiteral",
  "Dictionary",
  "DictGetWithDotLiteral",
  "BinaryOperator",
  "Ternary",
  "Assign",
  "Super",
  "UnaryOperator",
  "DictGet",
  "ListOrDictGet",
  "AllVariableRetrieval",
  "LiteralWithoutDictLiteral",
  "Call",
  "ObjectInstantiation",
  "PossibleStringValue",
  "String",
  "Number",
  "Regexp",
  "List",
  "ScopeModifierLiteral",
  "ListLiteral",
  "ListUnpack",
  "ListItems",
  "DictionaryLiteral",
  "DictItems",
  "DictItem",
  "DictGetWithDot",
  "ListOrDictGetWithBrackets",
  "ListOrDictGetAssign",
  "SubList",
  "Scope",
  "DefCallIdentifier",
  "ArgList",
  "ArgListWithoutNothing",
  "ObjectInstantiationCall",
  "ClassArgList",
  "SIDAndScope",
  "ArgListWithSplat",
  "ArgListWithoutNothingWithSplat",
  "AssignExpression",
  "AssignLHS",
  "VariableRetrieval",
  "SimpleVariableRetrieval",
  "CurlyBraceName",
  "CurlyBraceVarPart",
  "FunctionType",
  "DefKeywords",
  "Block",
  "ParamList",
  "DefaultParam",
  "Returnable",
  "IfBlock",
  "Catch",
  "ElseBlock",
  "ElseifBlock" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_1(val, _values, result)
     result = make_node(val) { |_| Riml::Nodes.new([]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 41)
  def _reduce_2(val, _values, result)
     result = make_node(val) { |_| Riml::Nodes.new([]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 42)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_4(val, _values, result)
     result = make_node(val) { |v| Riml::Nodes.new([ v[0] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_5(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_7(val, _values, result)
     result = make_node(val) { |v| Riml::Nodes.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_21(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_26(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_27(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_28(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_32(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_33(val, _values, result)
     result = make_node(val) { |v| Riml::WrapInParensNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 87)
  def _reduce_34(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_35(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_37(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_38(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_40(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_41(val, _values, result)
     result = make_node(val) { |v| Riml::WrapInParensNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_42(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_45(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_47(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_48(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_49(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_50(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_51(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_52(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_53(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_55(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_56(val, _values, result)
     result = make_node(val) { |_| Riml::TrueNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_57(val, _values, result)
     result = make_node(val) { |_| Riml::FalseNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_58(val, _values, result)
     result = make_node(val) { |v| Riml::NumberNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_59(val, _values, result)
     result = make_node(val) { |v| Riml::StringNode.new(v[0], :s) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_60(val, _values, result)
     result = make_node(val) { |v| Riml::StringNode.new(v[0], :d) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_61(val, _values, result)
     result = make_node(val) { |v| Riml::StringLiteralConcatNode.new(v[0], Riml::StringNode.new(v[1], :s)) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_62(val, _values, result)
     result = make_node(val) { |v| Riml::StringLiteralConcatNode.new(v[0], Riml::StringNode.new(v[1], :d)) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_63(val, _values, result)
     result = make_node(val) { |v| Riml::RegexpNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_64(val, _values, result)
     result = make_node(val) { |v| Riml::ScopeModifierLiteralNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_65(val, _values, result)
     result = make_node(val) { |v| Riml::ListNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_66(val, _values, result)
     result = make_node(val) { |v| Riml::ListUnpackNode.new(v[1] << v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_67(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_68(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_69(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_70(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_71(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_72(val, _values, result)
     result = make_node(val) { |v| Riml::DictionaryNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_73(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 170)
  def _reduce_74(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_75(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_76(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_77(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_78(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_79(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 187)
  def _reduce_80(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 188)
  def _reduce_81(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 189)
  def _reduce_82(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(Riml::WrapInParensNode.new(v[1]), v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 193)
  def _reduce_83(val, _values, result)
     result = make_node(val) { |v| Riml::ListOrDictGetNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 194)
  def _reduce_84(val, _values, result)
     result = make_node(val) { |v| Riml::ListOrDictGetNode.new(Riml::WrapInParensNode.new(v[1]), v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 198)
  def _reduce_85(val, _values, result)
     result = make_node(val) { |v| Riml::ListOrDictGetNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_86(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 203)
  def _reduce_87(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 204)
  def _reduce_88(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 205)
  def _reduce_89(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 209)
  def _reduce_90(val, _values, result)
     result = make_node(val) { |v| Riml::SublistNode.new([v[0], Riml::LiteralNode.new(' : '), v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 210)
  def _reduce_91(val, _values, result)
     result = make_node(val) { |v| Riml::SublistNode.new([v[0], Riml::LiteralNode.new(' :')]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 211)
  def _reduce_92(val, _values, result)
     result = make_node(val) { |v| Riml::SublistNode.new([Riml::LiteralNode.new(': '), v[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 212)
  def _reduce_93(val, _values, result)
     result = make_node(val) { |_| Riml::SublistNode.new([Riml::LiteralNode.new(':')]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 216)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 217)
  def _reduce_95(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 221)
  def _reduce_96(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 222)
  def _reduce_97(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_98(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(v[0], v[1], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 227)
  def _reduce_99(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 228)
  def _reduce_100(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_101(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 230)
  def _reduce_102(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], []) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 231)
  def _reduce_103(val, _values, result)
     result = make_node(val) { |v| Riml::ExplicitCallNode.new(nil, nil, v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 235)
  def _reduce_104(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(v[0], v[1], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_105(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(v[0], v[1], []) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 240)
  def _reduce_106(val, _values, result)
     result = make_node(val) { |v| Riml::RimlFileCommandNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 241)
  def _reduce_107(val, _values, result)
     result = make_node(val) { |v| Riml::RimlFileCommandNode.new(nil, v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_108(val, _values, result)
     result = make_node(val) { |v| Riml::RimlClassCommandNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_109(val, _values, result)
     result = make_node(val) { |v| Riml::RimlClassCommandNode.new(nil, v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 250)
  def _reduce_110(val, _values, result)
     result = ["#{val[0]}#{val[1]}"] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 251)
  def _reduce_111(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_112(val, _values, result)
     result = val[0].concat ["#{val[2]}#{val[3]}"] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 256)
  def _reduce_113(val, _values, result)
     result = make_node(val) { |v| Riml::ExplicitCallNode.new(v[1], v[2], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_114(val, _values, result)
     result = make_node(val) { |v| Riml::ExplicitCallNode.new(nil, v[1], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 261)
  def _reduce_115(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_116(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 267)
  def _reduce_117(val, _values, result)
     result = [ nil, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 268)
  def _reduce_118(val, _values, result)
     result = [ make_node(val) { |v| Riml::SIDNode.new(v[1]) }, val[3] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 272)
  def _reduce_119(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 273)
  def _reduce_120(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 277)
  def _reduce_121(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 278)
  def _reduce_122(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 282)
  def _reduce_123(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 283)
  def _reduce_124(val, _values, result)
     result = [ make_node(val) { |v| Riml::SplatNode.new(v[1]) } ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 284)
  def _reduce_125(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 285)
  def _reduce_126(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::SplatNode.new(v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 289)
  def _reduce_127(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 290)
  def _reduce_128(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 294)
  def _reduce_129(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 295)
  def _reduce_130(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 297)
  def _reduce_131(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 298)
  def _reduce_132(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 299)
  def _reduce_133(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 302)
  def _reduce_134(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 304)
  def _reduce_135(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 305)
  def _reduce_136(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_137(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 308)
  def _reduce_138(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 309)
  def _reduce_139(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 310)
  def _reduce_140(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 312)
  def _reduce_141(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 313)
  def _reduce_142(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 314)
  def _reduce_143(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_144(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 317)
  def _reduce_145(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_146(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 320)
  def _reduce_147(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 321)
  def _reduce_148(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 322)
  def _reduce_149(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 324)
  def _reduce_150(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 325)
  def _reduce_151(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 326)
  def _reduce_152(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_153(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 329)
  def _reduce_154(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 330)
  def _reduce_155(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 332)
  def _reduce_156(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 333)
  def _reduce_157(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_158(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_159(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 336)
  def _reduce_160(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 337)
  def _reduce_161(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 339)
  def _reduce_162(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 340)
  def _reduce_163(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 344)
  def _reduce_164(val, _values, result)
     result = make_node(val) { |v| Riml::UnaryOperatorNode.new(val[0], [val[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 345)
  def _reduce_165(val, _values, result)
     result = make_node(val) { |v| Riml::UnaryOperatorNode.new(val[0], [val[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 346)
  def _reduce_166(val, _values, result)
     result = make_node(val) { |v| Riml::UnaryOperatorNode.new(val[0], [val[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 351)
  def _reduce_167(val, _values, result)
     result = make_node(val) { |v| Riml::AssignNode.new(v[1][0], v[1][1], v[1][2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 352)
  def _reduce_168(val, _values, result)
     result = make_node(val) { |v| Riml::AssignNode.new(v[0][0], v[0][1], v[0][2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 356)
  def _reduce_169(val, _values, result)
     result = make_node(val) { |v| Riml::MultiAssignNode.new([v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_170(val, _values, result)
     val[0].assigns << val[2]; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 362)
  def _reduce_171(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 363)
  def _reduce_172(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 364)
  def _reduce_173(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 365)
  def _reduce_174(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 369)
  def _reduce_175(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 370)
  def _reduce_176(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 371)
  def _reduce_177(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 372)
  def _reduce_178(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 373)
  def _reduce_179(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_180(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 379)
  def _reduce_181(val, _values, result)
     result = make_node(val) { |v| Riml::GetSpecialVariableNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 380)
  def _reduce_182(val, _values, result)
     result = make_node(val) { |v| Riml::GetVariableByScopeAndDictNameNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 384)
  def _reduce_183(val, _values, result)
     result = make_node(val) { |v| Riml::GetVariableNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 388)
  def _reduce_184(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 389)
  def _reduce_185(val, _values, result)
     result = make_node(val) { |v| Riml::GetCurlyBraceNameNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 393)
  def _reduce_186(val, _values, result)
     result = make_node(val) { |v| Riml::UnletVariableNode.new('!', [ v[1] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 394)
  def _reduce_187(val, _values, result)
     result = make_node(val) { |v| Riml::UnletVariableNode.new('!', [ v[1] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 395)
  def _reduce_188(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 399)
  def _reduce_189(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBraceVariable.new([ v[0] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 400)
  def _reduce_190(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBraceVariable.new([ Riml::CurlyBracePart.new(v[0]), v[1] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 401)
  def _reduce_191(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::CurlyBracePart.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 402)
  def _reduce_192(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 406)
  def _reduce_193(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBracePart.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 407)
  def _reduce_194(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBracePart.new([v[1], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 408)
  def _reduce_195(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBracePart.new([v[1], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 414)
  def _reduce_196(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], [], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 415)
  def _reduce_197(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], v[4], v[6], v[7]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 416)
  def _reduce_198(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], [v[4]], v[6], v[7]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 417)
  def _reduce_199(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], v[4] << v[6], v[8], v[9]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 421)
  def _reduce_200(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 422)
  def _reduce_201(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 423)
  def _reduce_202(val, _values, result)
     result = "DefMethodNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 428)
  def _reduce_203(val, _values, result)
     result = make_node(val) { |v| Riml::GetCurlyBraceNameNode.new('', v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 429)
  def _reduce_204(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 434)
  def _reduce_205(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 435)
  def _reduce_206(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 436)
  def _reduce_207(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 440)
  def _reduce_208(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 441)
  def _reduce_209(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 442)
  def _reduce_210(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 443)
  def _reduce_211(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 444)
  def _reduce_212(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 448)
  def _reduce_213(val, _values, result)
     result = make_node(val) { |v| Riml::DefaultParamNode.new(v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 452)
  def _reduce_214(val, _values, result)
     result = make_node(val) { |v| Riml::ReturnNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 453)
  def _reduce_215(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[3], Nodes.new([ReturnNode.new(v[1])])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 454)
  def _reduce_216(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[3], Nodes.new([ReturnNode.new(v[1])])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 458)
  def _reduce_217(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 459)
  def _reduce_218(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 463)
  def _reduce_219(val, _values, result)
     result = make_node(val) { |_| Riml::FinishNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 468)
  def _reduce_220(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 469)
  def _reduce_221(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[1], Riml::Nodes.new([v[3]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 470)
  def _reduce_222(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[2], Riml::Nodes.new([v[0]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 474)
  def _reduce_223(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 475)
  def _reduce_224(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[1], Riml::Nodes.new([v[3]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 476)
  def _reduce_225(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[2], Riml::Nodes.new([v[0]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 480)
  def _reduce_226(val, _values, result)
     result = make_node(val) { |v| Riml::TernaryOperatorNode.new([v[0], v[2], v[4]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 484)
  def _reduce_227(val, _values, result)
     result = make_node(val) { |v| Riml::WhileNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 488)
  def _reduce_228(val, _values, result)
     result = make_node(val) { |_| Riml::BreakNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 489)
  def _reduce_229(val, _values, result)
     result = make_node(val) { |_| Riml::ContinueNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 493)
  def _reduce_230(val, _values, result)
     result = make_node(val) { |v| Riml::UntilNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 497)
  def _reduce_231(val, _values, result)
     result = make_node(val) { |v| Riml::ForNode.new(v[1], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 498)
  def _reduce_232(val, _values, result)
     result = make_node(val) { |v| Riml::ForNode.new(v[1], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 499)
  def _reduce_233(val, _values, result)
     result = make_node(val) { |v| Riml::ForNode.new(v[1], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 503)
  def _reduce_234(val, _values, result)
     result = make_node(val) { |v| Riml::TryNode.new(v[1], nil, nil) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 504)
  def _reduce_235(val, _values, result)
     result = make_node(val) { |v| Riml::TryNode.new(v[1], v[2], nil) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 505)
  def _reduce_236(val, _values, result)
     result = make_node(val) { |v| Riml::TryNode.new(v[1], v[2], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 509)
  def _reduce_237(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 510)
  def _reduce_238(val, _values, result)
     result = [ make_node(val) { |v| Riml::CatchNode.new(nil, v[1]) } ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 511)
  def _reduce_239(val, _values, result)
     result = [ make_node(val) { |v| Riml::CatchNode.new(v[1], v[2]) } ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 512)
  def _reduce_240(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::CatchNode.new(nil, v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 513)
  def _reduce_241(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::CatchNode.new(v[2], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 520)
  def _reduce_242(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 521)
  def _reduce_243(val, _values, result)
     result = make_node(val) { |_| Riml::Nodes.new([]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 525)
  def _reduce_244(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 526)
  def _reduce_245(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 527)
  def _reduce_246(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 528)
  def _reduce_247(val, _values, result)
     result = val[1] << val[2] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 532)
  def _reduce_248(val, _values, result)
     result = make_node(val) { |v| Riml::ElseNode.new(v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 536)
  def _reduce_249(val, _values, result)
     result = make_node(val) { |v| Riml::Nodes.new([Riml::ElseifNode.new(v[1], v[3])]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 537)
  def _reduce_250(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::ElseifNode.new(v[2], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 541)
  def _reduce_251(val, _values, result)
     result = make_node(val) { |v| Riml::ClassDefinitionNode.new(v[1], v[2], nil, v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 542)
  def _reduce_252(val, _values, result)
     result = make_node(val) { |v| Riml::ClassDefinitionNode.new(v[1], v[2], (v[4] || ClassDefinitionNode::DEFAULT_SCOPE_MODIFIER) + v[5], v[6]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 546)
  def _reduce_253(val, _values, result)
     result = make_node(val) { |v| Riml::ObjectInstantiationNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 550)
  def _reduce_254(val, _values, result)
     result = make_node(val) { |v| Riml::SuperNode.new(v[2], true) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 551)
  def _reduce_255(val, _values, result)
     result = make_node(val) { |_| Riml::SuperNode.new([], false) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 555)
  def _reduce_256(val, _values, result)
     result = make_node(val) { |v| Riml::ExLiteralNode.new(v[0]) } 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
