#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require File.expand_path("../errors", __FILE__)
  require File.expand_path("../ast_rewriter", __FILE__)
module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 571)
  # This code will be put as-is in the parser class

  attr_accessor :ast_rewriter
  attr_writer :options

  # The Parser and AST_Rewriter share this same hash of options
  def options
    @options ||= {}
  end

  def self.ast_cache
    @ast_cache
  end
  @ast_cache = {}

  # parses tokens or code into output nodes
  def parse(object, ast_rewriter = Riml::AST_Rewriter.new, filename = nil, included = false)
    if (ast = self.class.ast_cache[filename])
    else
      if tokens?(object)
        @tokens = object
      elsif code?(object)
        @lexer = Riml::Lexer.new(object, filename, true)
      end

      begin
        ast = do_parse
      rescue Racc::ParseError => e
        raise unless @lexer
        if (invalid_token = @lexer.prev_token_is_keyword?)
          warning = "#{invalid_token.inspect} is a keyword, and cannot " \
            "be used as a variable name"
        end
        error_msg = e.message
        error_msg << "\nWARNING: #{warning}" if warning
        error = Riml::ParseError.new(error_msg, @lexer.filename, @lexer.lineno)
        raise error
      end
      self.class.ast_cache[filename] = ast if filename
    end
    @ast_rewriter ||= ast_rewriter
    return ast unless @ast_rewriter
    @ast_rewriter.ast = ast.dup
    @ast_rewriter.options ||= options
    @ast_rewriter.rewrite(filename, included)
    @ast_rewriter.ast
  end

  # get the next token from either the list of tokens provided, or
  # the lexer getting the next token
  def next_token
    return @tokens.shift unless @lexer
    token = @lexer.next_token
    if token && @lexer.parser_info
      @current_parser_info = token.pop
    end
    token
  end

  private

  def tokens?(object)
    Array === object
  end

  def code?(object)
    String === object
  end

  def make_node(racc_val)
    node = yield racc_val
    node.parser_info = @current_parser_info
    node
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'135,265,60,139,136,211,417,418,211,211,448,211,411,440,146,56,199,89',
'272,409,409,270,409,271,37,46,48,47,37,49,44,45,392,449,37,412,274,60',
'50,70,316,61,149,273,317,62,63,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113',
'106,108,107,133,134,101,100,137,171,80,38,173,37,81,38,82,85,83,84,87',
'38,105,86,37,75,76,153,152,57,56,88,89,77,37,90,58,59,78,37,46,48,47',
'91,49,44,45,64,72,73,302,277,60,50,70,79,61,211,37,384,62,63,272,48',
'47,386,385,271,409,380,48,47,295,38,60,-178,-178,-178,-178,379,147,60',
'153,152,38,-43,-43,329,-42,-42,279,153,152,331,38,393,161,29,313,38',
'52,80,54,164,279,81,277,82,85,83,84,87,161,277,86,149,75,76,38,182,57',
'56,88,89,77,313,90,58,59,78,37,46,48,47,91,49,44,45,64,72,73,-116,164',
'60,50,70,79,61,164,302,164,62,63,-204,164,354,164,279,164,371,305,149',
'366,394,164,164,-44,-44,-85,-85,-85,-85,191,192,193,194,258,164,211',
'294,48,47,276,49,-98,60,50,70,29,397,38,52,80,54,153,152,81,149,82,85',
'83,84,87,149,-203,86,370,75,76,164,139,57,56,88,89,77,-99,90,58,59,78',
'37,46,48,47,91,49,44,45,64,72,73,-116,-98,60,50,70,79,61,-47,-47,319',
'62,63,-175,-175,-175,-175,-48,-48,-176,-176,-176,-176,-45,-45,-178,-178',
'-178,-178,-116,147,60,50,70,-99,377,320,60,50,70,149,417,437,129,130',
'132,305,433,29,432,38,52,269,54,129,130,132,127,128,131,115,116,117',
'121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114',
'113,106,108,107,133,134,101,100,137,139,80,105,-46,-46,81,-245,82,85',
'83,84,87,258,105,86,258,75,76,269,269,57,56,88,89,77,400,90,58,59,78',
'37,46,48,47,91,49,44,45,64,72,73,60,401,60,50,70,79,61,402,269,403,62',
'63,267,374,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120',
'124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133,134',
'101,29,52,38,52,80,54,263,262,81,406,82,85,83,84,87,105,60,86,306,75',
'76,105,139,57,56,88,89,77,218,90,58,59,78,37,46,48,47,91,49,44,45,64',
'72,73,-116,139,60,50,70,79,61,216,215,60,62,63,60,211,129,130,132,127',
'128,131,115,116,117,121,122,123,118,119,120,124,125,126,102,104,103',
'109,111,110,112,114,113,106,108,107,133,134,211,29,312,38,52,80,54,368',
'211,81,427,82,85,83,84,87,105,60,86,326,75,76,327,328,57,56,88,89,77',
'195,90,58,59,78,37,46,48,47,91,49,44,45,64,72,73,430,60,60,50,70,79',
'61,431,333,434,62,63,435,105,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,211,438,48,47,139,49,139,441,442,443',
'211,129,130,132,445,29,446,38,52,80,54,363,371,81,362,82,85,83,84,87',
'105,371,86,258,75,76,149,361,57,56,88,89,77,149,90,58,59,78,37,46,48',
'47,91,49,44,45,64,72,73,105,211,60,50,70,79,61,105,458,435,62,63,105',
'342,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124',
'125,126,129,130,132,127,128,131,142,141,139,462,463,371,129,130,132',
'29,465,38,52,80,54,99,357,81,346,82,85,83,84,87,105,92,86,468,75,76',
',,57,56,88,89,77,,90,58,59,78,105,46,48,47,91,49,44,45,64,72,73,-116',
'105,60,50,70,79,61,,,,62,63,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113',
'106,108,107,133,134,101,100,137,29,,80,52,,54,81,,82,85,83,84,87,105',
'149,86,,75,76,,,57,56,88,89,77,,90,58,59,78,37,46,48,47,91,49,44,45',
'64,72,73,,,60,50,70,79,61,,,323,62,63,,-175,-175,-175,-175,,,,,,,,,',
',,,,,,,,,320,,,,,,129,130,132,127,128,131,29,,38,52,,54,129,130,132',
'127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102,104',
'103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,414,105',
',,,,,,,,,,,105,,,,,,,,,,,,,,,,,129,130,132,127,128,131,129,130,132,127',
'128,131,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120',
'124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133,134',
'101,100,137,419,105,,,,,,105,,146,56,,89,105,,90,,,,,46,48,47,,49,44',
'45,64,,,,,60,50,70,,61,,,,62,63,129,130,132,127,128,131,115,116,117',
'121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114',
'113,106,108,107,133,134,101,100,137,29,,,52,,54,,261,146,56,,89,,105',
'90,129,130,132,,46,48,47,,49,44,45,64,129,130,132,,60,50,70,,61,,,,62',
'63,180,146,56,,89,,,90,,,,,46,48,47,,49,44,45,64,,,105,,60,50,70,,61',
',,,62,63,105,29,,,52,,54,,261,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,,,,180,146,56,,89,29,-121,90,52,,54',
',46,48,47,,49,44,45,64,,,,,60,50,70,105,61,,,,62,63,180,146,56,,89,',
',90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,,29,-119,,52',
',54,,,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124',
'125,126,,,,,146,56,,89,29,-119,90,52,,54,,46,48,47,,49,44,45,64,,,,',
'60,50,70,105,61,,,,62,63,180,146,56,,89,,,90,,,,,46,48,47,,49,44,45',
'64,,,,,60,50,70,,61,,,,62,63,,29,,,52,,54,350,,129,130,132,127,128,131',
'115,116,117,121,122,123,118,119,120,124,125,126,,,,180,146,56,,89,29',
'-119,90,52,,54,,46,48,47,,49,44,45,64,,,,,60,50,70,105,61,,,,62,63,180',
'146,56,,89,,,90,,,,,46,48,47,,49,44,45,64,,,-116,,60,50,70,,61,,,,62',
'63,,29,-119,,52,,54,,129,130,132,127,128,131,115,116,117,121,122,123',
'118,119,120,124,125,126,,,,180,146,56,,89,,176,90,,52,,54,46,48,47,',
'49,44,45,64,,,,,60,50,70,105,61,,,,62,63,180,146,56,,89,,,90,,,,,46',
'48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,,29,-119,,52,,54,,,129',
'130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126',
',,,180,146,56,,89,29,-119,90,52,,54,,46,48,47,,49,44,45,64,,,,,60,50',
'70,105,61,,,,62,63,365,146,56,,89,,,90,,,,,46,48,47,,49,44,45,64,,,',
',60,50,70,,61,,,,62,63,,29,-119,,52,,54,,129,130,132,127,128,131,115',
'116,117,121,122,123,118,119,120,124,125,126,,,,180,146,56,,89,,29,90',
',52,,54,46,48,47,,49,44,45,64,,,,,60,50,70,105,61,,,,62,63,180,146,56',
',89,,,90,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,,29,-119',
',52,,54,,,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120',
'124,125,126,,,,,146,56,,89,29,-119,90,52,,54,,46,48,47,,49,44,45,64',
',,,,60,50,70,105,61,,,,62,63,146,56,,89,,,90,,,,,46,48,47,,49,44,45',
'64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49',
'44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47',
',49,44,45,64,,,-116,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,',
',46,48,47,,49,44,45,64,,,-116,,60,50,70,,61,,,,62,63,146,56,29,89,,52',
'90,288,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29',
'89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146',
'56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63',
'146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,',
'62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,',
'61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,',
'60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64',
',,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44',
'45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,',
'49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48',
'47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,',
'46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90',
'54,,,,46,48,47,,49,44,45,64,,,-116,,60,50,70,,61,,,,62,63,146,56,29',
'89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146',
'56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63',
'146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,',
'62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,',
'61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,',
'60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64',
',,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44',
'45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,',
'49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48',
'47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,',
'46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90',
'54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,',
'52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29',
'89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146',
'56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63',
'146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,',
'62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,',
'61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,',
'60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64',
',,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44',
'45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,',
'49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48',
'47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,',
'46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90',
'54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,',
'52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29',
'89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146',
'56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63',
'146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,',
'62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,',
'61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,',
'60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64',
',,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44',
'45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,',
'49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48',
'47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,',
'46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90',
'54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,',
'52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29',
'89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146',
'56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63',
'146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,',
'62,63,146,56,29,89,,52,90,54,,,167,46,48,47,,49,44,45,64,,,,,60,50,70',
',61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60',
'50,70,,61,,,,62,63,146,56,165,89,,52,90,54,,,,46,48,47,,49,44,45,64',
',,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44',
'45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,',
'49,44,45,64,,,-116,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,',
'46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90',
'54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,,,29,,,52,348',
'54,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125',
'126,,,,,146,56,,89,,29,90,,52,,54,46,48,47,,49,44,45,64,,,-116,,60,50',
'70,105,61,,,,62,63,146,56,,89,,,90,,,,,46,48,47,,49,44,45,64,,,,,60',
'50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,',
',-116,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47,,49',
'44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46,48,47',
',49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54,,,,46',
'48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52,90,54',
',,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146,56,29,89,,52',
'90,54,,,,46,48,47,,49,44,45,64,,,-116,,60,50,70,,61,,,,62,63,146,56',
'29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63,146',
'56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,,62,63',
'146,56,29,89,,52,90,54,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61,,,',
'62,63,146,56,29,89,,52,,288,,,,46,48,47,,49,44,45,64,,,,,60,50,70,,61',
',,,62,63,146,56,29,89,,52,,54,,,,46,48,47,,49,44,45,,,,,,60,50,70,,61',
',,,62,63,146,56,188,89,,52,,,,,,46,48,47,,49,44,45,64,,,,,60,50,70,',
'61,,,,62,63,,,188,,,52,,,,,,,,,,,,,,,,211,,,,,,129,130,132,127,128,131',
',,188,,,52,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120',
'124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133,134',
'101,100,137,211,105,,,,,129,130,132,127,128,131,,105,,,,,129,130,132',
'127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102,104',
'103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,211,105',
',,,,129,130,132,127,128,131,,105,,,,,129,130,132,127,128,131,115,116',
'117,121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112',
'114,113,106,108,107,133,134,101,100,137,455,105,,,,,129,130,132,127',
'128,131,,105,,,,,129,130,132,127,128,131,115,116,117,121,122,123,118',
'119,120,124,125,126,102,104,103,109,111,110,112,114,113,106,108,107',
'133,134,101,100,137,460,105,,,,,129,130,132,127,128,131,,105,,,,,129',
'130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126',
'102,104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137',
'211,105,,,,,129,130,132,127,128,131,,105,,,,,129,130,132,127,128,131',
'115,116,117,121,122,123,118,119,120,124,125,126,102,104,103,109,111',
'110,112,114,113,106,108,107,133,134,101,100,137,211,105,,,,129,130,132',
'127,128,131,,,105,,,,,129,130,132,127,128,131,115,116,117,121,122,123',
'118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106,108',
'107,133,134,101,100,137,105,129,130,132,127,128,131,,,,,,,105,129,130',
'132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102',
'104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,105',
',,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122,123,118',
'119,120,124,125,126,102,104,103,109,111,110,112,114,113,106,108,107',
'133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116',
'117,121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112',
'114,113,106,108,107,133,134,101,100,137,,,,,,,360,,,,,,,105,129,130',
'132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102',
'104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,',
',,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122,123,118,119',
'120,124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133',
'134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117',
'121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114',
'113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127',
'128,131,115,116,117,121,122,123,118,119,120,124,125,126,102,104,103',
'109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,396',
',,341,105,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120',
'124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133,134',
'101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,129,130,132,127,128,131,115,116,117',
'121,122,123,118,119,120,124,125,126,,,,,,,,,,,,,105,,,,,,,,,,,,,,,,',
',105,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124',
'125,126,102,104,103,109,111,110,112,114,113,106,108,107,133,134,101',
'100,137,,,,,,,,,,,,,275,105,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113',
'106,108,107,133,134,101,100,137,,,,,,,360,,,,,,,105,129,130,132,127',
'128,131,115,116,117,121,122,123,118,119,120,124,125,126,102,104,103',
'109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,',
',105,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124',
'125,126,102,104,103,109,111,110,112,114,113,106,108,107,133,134,101',
'100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122',
'123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106',
'108,107,,,,,,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113',
'106,108,107,,,,,,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117',
'121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114',
'113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127',
'128,131,115,116,117,121,122,123,118,119,120,124,125,126,102,104,103',
'109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,',
',105,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124',
'125,126,102,104,103,109,111,110,112,114,113,106,108,107,133,134,101',
'100,137,,,,,,,,,,,,,337,105,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113',
'106,108,107,133,134,101,100,137,,,,,,,,,,399,,,,105,129,130,132,127',
'128,131,115,116,117,121,122,123,118,119,120,124,125,126,102,104,103',
'109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,340',
',,341,105,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120',
'124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133,134',
'101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121',
'122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113',
'106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128',
'131,115,116,117,121,122,123,118,119,120,124,125,126,102,104,103,109',
'111,110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105',
'129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125',
'126,102,104,103,109,111,110,112,114,113,106,108,107,133,134,101,100',
'137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122,123',
'118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106,108',
'107,133,134,101,100,137,,,,,,,266,,,,,,,105,129,130,132,127,128,131',
'115,116,117,121,122,123,118,119,120,124,125,126,102,104,103,109,111',
'110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,266,,,,,,,105',
'129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124,125',
'126,102,104,103,109,111,110,112,114,113,106,108,107,133,134,101,100',
'137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122,123',
'118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106,108',
'107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115',
'116,117,121,122,123,118,119,120,124,125,126,102,104,103,109,111,110',
'112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130',
'132,127,128,131,115,116,117,121,122,123,118,119,120,124,125,126,102',
'104,103,109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,',
',,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122,123,118,119',
'120,124,125,126,102,104,103,109,111,110,112,114,113,106,108,107,133',
'134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117',
'121,122,123,118,119,120,124,125,126,102,104,103,109,111,110,112,114',
'113,106,108,107,133,134,101,100,137,,,,,,,,,,,,,,105,129,130,132,127',
'128,131,115,116,117,121,122,123,118,119,120,124,125,126,102,104,103',
'109,111,110,112,114,113,106,108,107,133,134,101,100,137,,,,,,,,,,,,',
',105,129,130,132,127,128,131,115,116,117,121,122,123,118,119,120,124',
'125,126,102,104,103,109,111,110,112,114,113,106,108,107,133,134,101',
'100,137,,,,,,,,,,,,,,105,129,130,132,127,128,131,115,116,117,121,122',
'123,118,119,120,124,125,126,102,104,103,109,111,110,112,114,113,106',
'108,107,133,134,101,100,137,,,,,,,,,,,,,,105' ]
        racc_action_table = arr = ::Array.new(6663, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'22,143,74,143,22,333,376,376,451,369,433,447,370,420,57,57,74,57,155',
'451,369,155,447,155,454,57,57,57,3,57,57,57,333,433,376,370,157,57,57',
'57,202,57,170,157,202,57,57,22,22,22,22,22,22,22,22,22,22,22,22,22,22',
'22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,57,460',
'454,57,332,460,3,460,460,460,460,460,376,22,460,461,460,460,287,287',
'460,460,460,460,460,466,460,460,460,460,460,460,460,460,460,460,460',
'460,460,460,460,178,277,460,460,460,460,460,464,93,330,460,460,298,59',
'59,330,330,298,464,325,182,182,169,332,59,283,283,283,283,324,283,182',
'387,387,461,283,283,210,287,287,278,40,40,210,466,334,175,460,213,460',
'460,2,460,277,314,2,161,2,2,2,2,2,55,313,2,284,2,2,93,59,2,2,2,2,2,200',
'2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,278,2,2,2,2,2,175,335,213,2,2,161,290',
'290,314,162,161,315,304,266,304,336,55,313,284,284,138,138,138,138,66',
'66,66,66,138,200,331,166,331,331,160,331,430,72,72,72,2,339,2,2,211',
'2,181,181,211,286,211,211,211,211,211,285,162,211,315,211,211,162,266',
'211,211,211,211,211,403,211,211,211,211,211,211,211,211,211,211,211',
'211,211,211,211,211,430,211,211,211,211,211,282,282,203,211,211,285',
'285,285,285,286,286,42,42,42,42,285,285,31,31,31,31,8,31,8,8,8,403,322',
'203,73,73,73,360,416,416,247,247,247,183,410,211,410,211,211,344,211',
'203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203',
'203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203',
'203,360,320,247,281,281,320,320,320,320,320,320,320,345,203,320,154',
'320,320,151,150,320,320,320,320,320,353,320,320,320,320,320,320,320',
'320,320,320,320,320,320,320,320,86,355,320,320,320,320,320,356,148,359',
'320,320,146,318,220,220,220,220,220,220,220,220,220,220,220,220,220',
'220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220',
'220,220,220,320,86,320,320,0,320,141,140,0,367,0,0,0,0,0,220,368,0,184',
'0,0,185,189,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,0,0',
'0,92,90,89,0,0,88,87,221,221,221,221,221,221,221,221,221,221,221,221',
'221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221',
'221,221,221,385,0,199,0,0,455,0,312,389,455,391,455,455,455,455,455',
'221,392,455,207,455,455,208,209,455,455,455,455,455,70,455,455,455,455',
'455,455,455,455,455,455,455,455,455,455,455,404,305,455,455,455,455',
'455,408,212,411,455,455,412,249,222,222,222,222,222,222,222,222,222',
'222,222,222,222,222,222,222,222,222,386,417,386,386,43,386,174,421,422',
'423,425,248,248,248,428,455,429,455,455,438,455,301,432,438,300,438',
'438,438,438,438,222,434,438,299,438,438,35,297,438,438,438,438,438,32',
'438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,248,445',
'438,438,438,438,438,250,448,449,438,438,252,260,223,223,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,223,223,235,235,235,235',
'235,235,27,24,23,456,457,458,186,186,186,438,459,438,438,95,438,19,293',
'95,268,95,95,95,95,95,223,1,95,467,95,95,,,95,95,95,95,95,,95,95,95',
'95,235,95,95,95,95,95,95,95,95,95,95,95,186,95,95,95,95,95,,,,95,95',
'349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349',
'349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349',
'349,95,,94,95,,95,94,,94,94,94,94,94,349,33,94,,94,94,,,94,94,94,94',
'94,,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,,,94,94,94,94,94,,',
'204,94,94,,33,33,33,33,,,,,,,,,,,,,,,,,,,204,,,,,,236,236,236,236,236',
'236,94,,94,94,,94,204,204,204,204,204,204,204,204,204,204,204,204,204',
'204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204',
'204,204,204,204,204,375,236,,,,,,,,,,,,204,,,,,,,,,,,,,,,,,237,237,237',
'237,237,237,238,238,238,238,238,238,375,375,375,375,375,375,375,375',
'375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375',
'375,375,375,375,375,375,375,375,375,375,378,237,,,,,,238,,139,139,,139',
'375,,139,,,,,139,139,139,,139,139,139,139,,,,,139,139,139,,139,,,,139',
'139,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378',
'378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378',
'378,378,139,,,139,,139,,139,258,258,,258,,378,258,187,187,187,,258,258',
'258,,258,258,258,258,251,251,251,,258,258,258,,258,,,,258,258,215,215',
'215,,215,,,215,,,,,215,215,215,,215,215,215,215,,,187,,215,215,215,',
'215,,,,215,215,251,258,,,258,,258,,258,224,224,224,224,224,224,224,224',
'224,224,224,224,224,224,224,224,224,224,,,,147,147,147,,147,215,215',
'147,215,,215,,147,147,147,,147,147,147,147,,,,,147,147,147,224,147,',
',,147,147,362,362,362,,362,,,362,,,,,362,362,362,,362,362,362,362,,',
',,362,362,362,,362,,,,362,362,,147,147,,147,,147,,,226,226,226,226,226',
'226,226,226,226,226,226,226,226,226,226,226,226,226,,,,,274,274,,274',
'362,362,274,362,,362,,274,274,274,,274,274,274,274,,,,,274,274,274,226',
'274,,,,274,274,267,267,267,,267,,,267,,,,,267,267,267,,267,267,267,267',
',,,,267,267,267,,267,,,,267,267,,274,,,274,,274,274,,227,227,227,227',
'227,227,227,227,227,227,227,227,227,227,227,227,227,227,,,,171,171,171',
',171,267,267,171,267,,267,,171,171,171,,171,171,171,171,,,,,171,171',
'171,227,171,,,,171,171,58,58,58,,58,,,58,,,,,58,58,58,,58,58,58,58,',
',58,,58,58,58,,58,,,,58,58,,171,171,,171,,171,,228,228,228,228,228,228',
'228,228,228,228,228,228,228,228,228,228,228,228,,,,276,276,276,,276',
',58,276,,58,,58,276,276,276,,276,276,276,276,,,,,276,276,276,228,276',
',,,276,276,295,295,295,,295,,,295,,,,,295,295,295,,295,295,295,295,',
',,,295,295,295,,295,,,,295,295,,276,276,,276,,276,,,229,229,229,229',
'229,229,229,229,229,229,229,229,229,229,229,229,229,229,,,,165,165,165',
',165,295,295,165,295,,295,,165,165,165,,165,165,165,165,,,,,165,165',
'165,229,165,,,,165,165,302,302,302,,302,,,302,,,,,302,302,302,,302,302',
'302,302,,,,,302,302,302,,302,,,,302,302,,165,165,,165,,165,,230,230',
'230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,,,,176',
'176,176,,176,,302,176,,302,,302,176,176,176,,176,176,176,176,,,,,176',
'176,176,230,176,,,,176,176,393,393,393,,393,,,393,,,,,393,393,393,,393',
'393,393,393,,,,,393,393,393,,393,,,,393,393,,176,176,,176,,176,,,231',
'231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231',
',,,,131,131,,131,393,393,131,393,,393,,131,131,131,,131,131,131,131',
',,,,131,131,131,231,131,,,,131,131,291,291,,291,,,291,,,,,291,291,291',
',291,291,291,291,,,,,291,291,291,,291,,,,291,291,319,319,131,319,,131',
'319,131,,,,319,319,319,,319,319,319,319,,,,,319,319,319,,319,,,,319',
'319,288,288,291,288,,291,288,291,,,,288,288,288,,288,288,288,288,,,288',
',288,288,288,,288,,,,288,288,78,78,319,78,,319,78,319,,,,78,78,78,,78',
'78,78,78,,,78,,78,78,78,,78,,,,78,78,80,80,288,80,,288,80,288,,,,80',
'80,80,,80,80,80,80,,,,,80,80,80,,80,,,,80,80,81,81,78,81,,78,81,78,',
',,81,81,81,,81,81,81,81,,,,,81,81,81,,81,,,,81,81,82,82,80,82,,80,82',
'80,,,,82,82,82,,82,82,82,82,,,,,82,82,82,,82,,,,82,82,85,85,81,85,,81',
'85,81,,,,85,85,85,,85,85,85,85,,,,,85,85,85,,85,,,,85,85,323,323,82',
'323,,82,323,82,,,,323,323,323,,323,323,323,323,,,,,323,323,323,,323',
',,,323,323,180,180,85,180,,85,180,85,,,,180,180,180,,180,180,180,180',
',,,,180,180,180,,180,,,,180,180,326,326,323,326,,323,326,323,,,,326',
'326,326,,326,326,326,326,,,,,326,326,326,,326,,,,326,326,316,316,180',
'316,,180,316,180,,,,316,316,316,,316,316,316,316,,,,,316,316,316,,316',
',,,316,316,63,63,326,63,,326,63,326,,,,63,63,63,,63,63,63,63,,,,,63',
'63,63,,63,,,,63,63,62,62,316,62,,316,62,316,,,,62,62,62,,62,62,62,62',
',,,,62,62,62,,62,,,,62,62,327,327,63,327,,63,327,63,,,,327,327,327,',
'327,327,327,327,,,,,327,327,327,,327,,,,327,327,29,29,62,29,,62,29,62',
',,,29,29,29,,29,29,29,29,,,,,29,29,29,,29,,,,29,29,173,173,327,173,',
'327,173,327,,,,173,173,173,,173,173,173,173,,,173,,173,173,173,,173',
',,,173,173,61,61,29,61,,29,61,29,,,,61,61,61,,61,61,61,61,,,,,61,61',
'61,,61,,,,61,61,188,188,173,188,,173,188,173,,,,188,188,188,,188,188',
'188,188,,,,,188,188,188,,188,,,,188,188,191,191,61,191,,61,191,61,,',
',191,191,191,,191,191,191,191,,,,,191,191,191,,191,,,,191,191,100,100',
'188,100,,188,100,188,,,,100,100,100,,100,100,100,100,,,,,100,100,100',
',100,,,,100,100,101,101,191,101,,191,101,191,,,,101,101,101,,101,101',
'101,101,,,,,101,101,101,,101,,,,101,101,102,102,100,102,,100,102,100',
',,,102,102,102,,102,102,102,102,,,,,102,102,102,,102,,,,102,102,103',
'103,101,103,,101,103,101,,,,103,103,103,,103,103,103,103,,,,,103,103',
'103,,103,,,,103,103,104,104,102,104,,102,104,102,,,,104,104,104,,104',
'104,104,104,,,,,104,104,104,,104,,,,104,104,105,105,103,105,,103,105',
'103,,,,105,105,105,,105,105,105,105,,,,,105,105,105,,105,,,,105,105',
'106,106,104,106,,104,106,104,,,,106,106,106,,106,106,106,106,,,,,106',
'106,106,,106,,,,106,106,107,107,105,107,,105,107,105,,,,107,107,107',
',107,107,107,107,,,,,107,107,107,,107,,,,107,107,108,108,106,108,,106',
'108,106,,,,108,108,108,,108,108,108,108,,,,,108,108,108,,108,,,,108',
'108,109,109,107,109,,107,109,107,,,,109,109,109,,109,109,109,109,,,',
',109,109,109,,109,,,,109,109,110,110,108,110,,108,110,108,,,,110,110',
'110,,110,110,110,110,,,,,110,110,110,,110,,,,110,110,111,111,109,111',
',109,111,109,,,,111,111,111,,111,111,111,111,,,,,111,111,111,,111,,',
',111,111,112,112,110,112,,110,112,110,,,,112,112,112,,112,112,112,112',
',,,,112,112,112,,112,,,,112,112,113,113,111,113,,111,113,111,,,,113',
'113,113,,113,113,113,113,,,,,113,113,113,,113,,,,113,113,114,114,112',
'114,,112,114,112,,,,114,114,114,,114,114,114,114,,,,,114,114,114,,114',
',,,114,114,115,115,113,115,,113,115,113,,,,115,115,115,,115,115,115',
'115,,,,,115,115,115,,115,,,,115,115,116,116,114,116,,114,116,114,,,',
'116,116,116,,116,116,116,116,,,,,116,116,116,,116,,,,116,116,117,117',
'115,117,,115,117,115,,,,117,117,117,,117,117,117,117,,,,,117,117,117',
',117,,,,117,117,328,328,116,328,,116,328,116,,,,328,328,328,,328,328',
'328,328,,,,,328,328,328,,328,,,,328,328,119,119,117,119,,117,119,117',
',,,119,119,119,,119,119,119,119,,,,,119,119,119,,119,,,,119,119,120',
'120,328,120,,328,120,328,,,,120,120,120,,120,120,120,120,,,,,120,120',
'120,,120,,,,120,120,121,121,119,121,,119,121,119,,,,121,121,121,,121',
'121,121,121,,,,,121,121,121,,121,,,,121,121,122,122,120,122,,120,122',
'120,,,,122,122,122,,122,122,122,122,,,,,122,122,122,,122,,,,122,122',
'123,123,121,123,,121,123,121,,,,123,123,123,,123,123,123,123,,,,,123',
'123,123,,123,,,,123,123,124,124,122,124,,122,124,122,,,,124,124,124',
',124,124,124,124,,,,,124,124,124,,124,,,,124,124,125,125,123,125,,123',
'125,123,,,,125,125,125,,125,125,125,125,,,,,125,125,125,,125,,,,125',
'125,126,126,124,126,,124,126,124,,,,126,126,126,,126,126,126,126,,,',
',126,126,126,,126,,,,126,126,127,127,125,127,,125,127,125,,,,127,127',
'127,,127,127,127,127,,,,,127,127,127,,127,,,,127,127,128,128,126,128',
',126,128,126,,,,128,128,128,,128,128,128,128,,,,,128,128,128,,128,,',
',128,128,129,129,127,129,,127,129,127,,,,129,129,129,,129,129,129,129',
',,,,129,129,129,,129,,,,129,129,130,130,128,130,,128,130,128,,,,130',
'130,130,,130,130,130,130,,,,,130,130,130,,130,,,,130,130,317,317,129',
'317,,129,317,129,,,,317,317,317,,317,317,317,317,,,,,317,317,317,,317',
',,,317,317,132,132,130,132,,130,132,130,,,,132,132,132,,132,132,132',
'132,,,,,132,132,132,,132,,,,132,132,133,133,317,133,,317,133,317,,,',
'133,133,133,,133,133,133,133,,,,,133,133,133,,133,,,,133,133,134,134',
'132,134,,132,134,132,,,,134,134,134,,134,134,134,134,,,,,134,134,134',
',134,,,,134,134,135,135,133,135,,133,135,133,,,,135,135,135,,135,135',
'135,135,,,,,135,135,135,,135,,,,135,135,136,136,134,136,,134,136,134',
',,,136,136,136,,136,136,136,136,,,,,136,136,136,,136,,,,136,136,137',
'137,135,137,,135,137,135,,,,137,137,137,,137,137,137,137,,,,,137,137',
'137,,137,,,,137,137,275,275,136,275,,136,275,136,,,,275,275,275,,275',
'275,275,275,,,,,275,275,275,,275,,,,275,275,56,56,137,56,,137,56,137',
',,56,56,56,56,,56,56,56,56,,,,,56,56,56,,56,,,,56,56,365,365,275,365',
',275,365,275,,,,365,365,365,,365,365,365,365,,,,,365,365,365,,365,,',
',365,365,192,192,56,192,,56,192,56,,,,192,192,192,,192,192,192,192,',
',,,192,192,192,,192,,,,192,192,337,337,365,337,,365,337,365,,,,337,337',
'337,,337,337,337,337,,,,,337,337,337,,337,,,,337,337,54,54,192,54,,192',
'54,192,,,,54,54,54,,54,54,54,54,,,54,,54,54,54,,54,,,,54,54,272,272',
'337,272,,337,272,337,,,,272,272,272,,272,272,272,272,,,,,272,272,272',
',272,,,,272,272,270,270,54,270,,54,270,54,,,,270,270,270,,270,270,270',
'270,,,,,270,270,270,,270,,,,270,270,,,272,,,272,272,272,232,232,232',
'232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,,,,,52,52',
',52,,270,52,,270,,270,52,52,52,,52,52,52,52,,,52,,52,52,52,232,52,,',
',52,52,418,418,,418,,,418,,,,,418,418,418,,418,418,418,418,,,,,418,418',
'418,,418,,,,418,418,261,261,52,261,,52,261,52,,,,261,261,261,,261,261',
'261,261,,,261,,261,261,261,,261,,,,261,261,294,294,418,294,,418,294',
'418,,,,294,294,294,,294,294,294,294,,,,,294,294,294,,294,,,,294,294',
'193,193,261,193,,261,193,261,,,,193,193,193,,193,193,193,193,,,,,193',
'193,193,,193,,,,193,193,435,435,294,435,,294,435,294,,,,435,435,435',
',435,435,435,435,,,,,435,435,435,,435,,,,435,435,437,437,193,437,,193',
'437,193,,,,437,437,437,,437,437,437,437,,,,,437,437,437,,437,,,,437',
'437,341,341,435,341,,435,341,435,,,,341,341,341,,341,341,341,341,,,341',
',341,341,341,,341,,,,341,341,194,194,437,194,,437,194,437,,,,194,194',
'194,,194,194,194,194,,,,,194,194,194,,194,,,,194,194,164,164,341,164',
',341,164,341,,,,164,164,164,,164,164,164,164,,,,,164,164,164,,164,,',
',164,164,118,118,194,118,,194,118,194,,,,118,118,118,,118,118,118,118',
',,,,118,118,118,,118,,,,118,118,99,99,164,99,,164,,164,,,,99,99,99,',
'99,99,99,99,,,,,99,99,99,,99,,,,99,99,64,64,118,64,,118,,118,,,,64,64',
'64,,64,64,64,,,,,,64,64,64,,64,,,,64,64,142,142,99,142,,99,,,,,,142',
'142,142,,142,142,142,142,,,,,142,142,142,,142,,,,142,142,,,64,,,64,',
',,,,,,,,,,,,,,383,,,,,,239,239,239,239,239,239,,,142,,,142,383,383,383',
'383,383,383,383,383,383,383,383,383,383,383,383,383,383,383,383,383',
'383,383,383,383,383,383,383,383,383,383,383,383,383,383,383,206,239',
',,,,240,240,240,240,240,240,,383,,,,,206,206,206,206,206,206,206,206',
'206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206',
'206,206,206,206,206,206,206,206,206,206,382,240,,,,,241,241,241,241',
'241,241,,206,,,,,382,382,382,382,382,382,382,382,382,382,382,382,382',
'382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382',
'382,382,382,382,382,439,241,,,,,242,242,242,242,242,242,,382,,,,,439',
'439,439,439,439,439,439,439,439,439,439,439,439,439,439,439,439,439',
'439,439,439,439,439,439,439,439,439,439,439,439,439,439,439,439,439',
'453,242,,,,,243,243,243,243,243,243,,439,,,,,453,453,453,453,453,453',
'453,453,453,453,453,453,453,453,453,453,453,453,453,453,453,453,453',
'453,453,453,453,453,453,453,453,453,453,453,453,381,243,,,,,244,244',
'244,244,244,244,,453,,,,,381,381,381,381,381,381,381,381,381,381,381',
'381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381',
'381,381,381,381,381,381,381,205,244,,,,245,245,245,245,245,245,,,381',
',,,,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205',
'205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205',
'205,205,245,246,246,246,246,246,246,,,,,,,205,309,309,309,309,309,309',
'309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309',
'309,309,309,309,309,309,309,309,309,309,309,309,246,,,,,,,,,,,,,309',
'308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308',
'308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308',
'308,,,,,,,,,,,,,,308,307,307,307,307,307,307,307,307,307,307,307,307',
'307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307',
'307,307,307,307,307,307,,,,,,,307,,,,,,,307,179,179,179,179,179,179',
'179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179',
'179,179,179,179,179,179,179,179,179,179,179,179,,,,,,,,,,,,,,179,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303',
',,,,,,,,,,,,,303,168,168,168,168,168,168,168,168,168,168,168,168,168',
'168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168',
'168,168,168,168,168,,,,,,,,,,,,,,168,338,338,338,338,338,338,338,338',
'338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338',
'338,338,338,338,338,338,338,338,338,338,,,,,,,,,,338,,,338,338,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,,,,',
',,,,,,,,,225,233,233,233,233,233,233,233,233,233,233,233,233,233,233',
'233,233,233,233,234,234,234,234,234,234,234,234,234,234,234,234,234',
'234,234,234,234,234,,,,,,,,,,,,,233,,,,,,,,,,,,,,,,,,234,159,159,159',
'159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159',
'159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,,,,,,,,',
',,,,159,159,296,296,296,296,296,296,296,296,296,296,296,296,296,296',
'296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296',
'296,296,296,296,,,,,,,296,,,,,,,296,156,156,156,156,156,156,156,156',
'156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156',
'156,156,156,156,156,156,156,156,156,156,,,,,,,,,,,,,,156,343,343,343',
'343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343',
'343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,,,,,,,,',
',,,,,343,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253',
'253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,,,,,,,,',
',,,,,,,,,,253,254,254,254,254,254,254,254,254,254,254,254,254,254,254',
'254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,,,,',
',,,,,,,,,,,,,,254,255,255,255,255,255,255,255,255,255,255,255,255,255',
'255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255',
'255,255,255,255,255,,,,,,,,,,,,,,255,256,256,256,256,256,256,256,256',
'256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256',
'256,256,256,256,256,256,256,256,256,256,,,,,,,,,,,,,,256,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,,,,,,,,',
',,,,257,257,347,347,347,347,347,347,347,347,347,347,347,347,347,347',
'347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,347',
'347,347,347,347,,,,,,,,,,347,,,,347,259,259,259,259,259,259,259,259',
'259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259',
'259,259,259,259,259,259,259,259,259,259,,,,,,,,,,259,,,259,259,310,310',
'310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310',
'310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,,,,',
',,,,,,,,,310,352,352,352,352,352,352,352,352,352,352,352,352,352,352',
'352,352,352,352,352,352,352,352,352,352,352,352,352,352,352,352,352',
'352,352,352,352,,,,,,,,,,,,,,352,311,311,311,311,311,311,311,311,311',
'311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311',
'311,311,311,311,311,311,311,311,311,,,,,,,,,,,,,,311,358,358,358,358',
'358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358',
'358,358,358,358,358,358,358,358,358,358,358,358,358,358,,,,,,,,,,,,',
',358,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292',
'292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292',
'292,292,,,,,,,292,,,,,,,292,145,145,145,145,145,145,145,145,145,145',
'145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145',
'145,145,145,145,145,145,145,145,,,,,,,145,,,,,,,145,364,364,364,364',
'364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364',
'364,364,364,364,364,364,364,364,364,364,364,364,364,364,,,,,,,,,,,,',
',364,372,372,372,372,372,372,372,372,372,372,372,372,372,372,372,372',
'372,372,372,372,372,372,372,372,372,372,372,372,372,372,372,372,372',
'372,372,,,,,,,,,,,,,,372,373,373,373,373,373,373,373,373,373,373,373',
'373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373',
'373,373,373,373,373,373,373,,,,,,,,,,,,,,373,395,395,395,395,395,395',
'395,395,395,395,395,395,395,395,395,395,395,395,395,395,395,395,395',
'395,395,395,395,395,395,395,395,395,395,395,395,,,,,,,,,,,,,,395,398',
'398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398',
'398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398',
',,,,,,,,,,,,,398,405,405,405,405,405,405,405,405,405,405,405,405,405',
'405,405,405,405,405,405,405,405,405,405,405,405,405,405,405,405,405',
'405,405,405,405,405,,,,,,,,,,,,,,405,201,201,201,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,201,,,,,,,,,,,,,,201,452,452,452',
'452,452,452,452,452,452,452,452,452,452,452,452,452,452,452,452,452',
'452,452,452,452,452,452,452,452,452,452,452,452,452,452,452,,,,,,,,',
',,,,,452,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289',
'289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289',
'289,289,289,,,,,,,,,,,,,,289' ]
        racc_action_check = arr = ::Array.new(6663, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   483,   770,   172,    -3,   nil,   nil,   nil,   nil,   291,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   672,
   nil,   nil,    -2,   655,   692,   nil,   nil,   657,   nil,  2328,
   nil,   245,   648,   816,   nil,   641,   nil,   nil,   nil,   nil,
   131,   nil,   239,   560,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  4041,   nil,  3912,   143,  3780,    -7,  1444,   103,
   nil,  2394,  2262,  2229,  4437,   nil,   161,   nil,   nil,   nil,
   558,   nil,   214,   297,   -42,   nil,   nil,   nil,  1932,   nil,
  1965,  1998,  2031,   nil,   nil,  2064,   390,   507,   493,   490,
   444,   nil,   532,   100,   845,   756,   434,   467,   nil,  4404,
  2493,  2526,  2559,  2592,  2625,  2658,  2691,  2724,  2757,  2790,
  2823,  2856,  2889,  2922,  2955,  2988,  3021,  3054,  4371,  3120,
  3153,  3186,  3219,  3252,  3285,  3318,  3351,  3384,  3417,  3450,
  3483,  1800,  3549,  3582,  3615,  3648,  3681,  3714,   157,  1040,
   445,   445,  4470,   -89,   nil,  6124,   357,  1214,   399,   nil,
   369,   368,   nil,   nil,   316,   -70,  5438,   -52,   nil,  5340,
   166,   137,   188,   nil,  4338,  1605,   164,   nil,  5126,    56,
    -1,  1410,   nil,  2361,   562,   127,  1702,   nil,    35,  5028,
  2130,   234,   110,   262,   457,   405,   702,  1095,  2427,   411,
   nil,  2460,  3846,  4173,  4305,   nil,   nil,   nil,   nil,   531,
   156,  6467,    38,   309,   891,  4832,  4567,   574,   577,   578,
   153,   263,   582,   129,   nil,  1150,   nil,   nil,   nil,   nil,
   399,   490,   581,   672,  1164,  5224,  1262,  1360,  1457,  1555,
  1652,  1750,  3991,  5273,  5291,   690,   879,   956,   962,  4502,
  4555,  4608,  4661,  4714,  4767,  4819,  4868,   298,   610,   532,
   617,  1107,   622,  5536,  5585,  5634,  5683,  5732,  1116,  5830,
   627,  4107,   nil,   nil,   nil,   nil,   191,  1346,   673,   nil,
  3978,   nil,  3945,   nil,  1312,  3747,  1507,    82,   121,   nil,
   nil,   302,   218,    64,   145,   233,   227,    67,  1899,  6565,
   133,  1833,  6075,   671,  4140,  1541,  5389,   595,    47,   589,
   583,   579,  1639,  5077,   145,   573,   nil,  4979,  4930,  4881,
  5879,  5977,   523,   144,   135,   190,  2196,  3516,   440,  1866,
   392,   nil,   332,  2097,   145,   135,  2163,  2295,  3087,   nil,
   125,   220,    55,   -26,    79,   134,   146,  3879,  5175,   169,
   nil,  4272,   nil,  5487,   313,   313,   nil,  5781,   nil,   761,
   nil,   nil,  5928,   328,   nil,   340,   346,   nil,  6026,   353,
   301,   nil,  1248,   nil,  6173,  3813,   nil,   448,   453,   -22,
    -7,   nil,  6222,  6271,   nil,   968,     3,   nil,  1045,   nil,
   nil,  4779,  4620,  4514,   nil,   540,   617,   122,   nil,   548,
   nil,   574,   544,  1736,   nil,  6320,   nil,   nil,  6369,   nil,
   nil,   nil,   nil,   246,   526,  6418,   nil,   nil,   616,   nil,
   263,   535,   544,   nil,   nil,   nil,   342,   618,  4074,   nil,
     6,   648,   649,   650,   nil,   627,   nil,   nil,   620,   574,
   214,   nil,   628,    -9,   637,  4206,   nil,  4239,   665,  4673,
   nil,   nil,   nil,   nil,   nil,   677,   nil,   -20,   625,   632,
   nil,   -23,  6516,  4726,    -7,   574,   741,   742,   708,   748,
    81,    66,   nil,   nil,    99,   nil,    76,   765,   nil ]

racc_action_default = [
    -1,  -259,    -2,    -3,    -4,    -8,    -9,   -10,   -11,   -12,
   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,
   -23,   -24,   -25,   -26,   -27,   -29,   -30,   -31,   -32,  -116,
   -34,   -35,   -36,   -37,   -38,   -39,   -40,   -49,   -50,   -51,
   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,   -60,   -63,
   -64,   -65,   -69,   -72,   -75,  -259,  -116,  -116,  -119,  -116,
  -115,  -116,  -116,  -116,  -116,  -168,  -259,  -177,  -179,  -180,
  -259,  -184,  -116,  -116,  -116,  -200,  -201,  -202,  -217,  -219,
  -116,  -116,  -116,  -228,  -229,  -116,  -116,  -259,  -116,  -116,
  -257,  -258,  -259,    -7,  -116,    -6,  -259,  -259,  -188,  -116,
  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,
  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,
  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,
  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,   -83,  -116,
   -28,  -259,  -116,   -26,   -31,  -259,  -259,  -116,   -80,   -94,
   -79,   -81,   -61,   -62,  -182,  -259,   -70,  -259,   -76,  -259,
  -259,  -183,  -185,  -189,  -116,  -116,  -101,  -102,  -127,   -35,
   -37,  -116,   -54,   -69,  -259,  -259,  -116,  -107,  -120,  -123,
  -116,  -111,  -116,  -109,  -259,  -164,  -165,  -166,  -116,  -259,
  -167,  -116,  -116,  -116,  -116,  -181,  -186,  -187,  -117,  -259,
  -259,  -218,  -214,  -259,  -259,  -259,  -259,  -259,  -259,  -259,
  -237,  -245,  -259,  -259,  -255,  -116,   469,    -5,  -183,  -170,
  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,
  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,
  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,
  -159,  -160,  -161,  -162,  -163,  -222,  -225,  -259,  -116,  -259,
  -259,   -93,   -97,   -96,  -169,   -41,   -33,  -116,  -259,   -95,
  -116,   -67,  -116,   -73,  -116,  -116,  -116,  -259,  -190,  -191,
  -192,   -29,   -30,   -35,   -36,   -37,   -39,   -52,   -75,  -259,
  -259,  -116,  -123,  -259,  -116,  -116,  -123,  -259,  -259,   -83,
  -259,  -259,  -116,  -124,  -259,  -116,  -110,  -259,  -171,  -172,
  -173,  -174,  -259,  -204,  -203,  -207,  -116,  -116,  -259,  -116,
  -116,  -246,  -259,  -116,  -259,  -259,  -116,  -116,  -116,  -234,
  -259,  -259,  -244,  -259,  -105,  -122,  -259,  -116,  -259,  -259,
   -86,   -91,   -87,   -92,   -82,   -84,   -99,  -259,   -68,   -71,
   -74,   -77,   -78,  -259,  -193,  -259,  -259,  -100,  -128,  -259,
  -259,  -103,  -116,  -106,  -125,  -116,  -108,  -259,  -116,  -259,
  -208,  -205,  -215,  -216,  -220,  -259,  -244,  -223,  -259,  -227,
  -230,  -259,  -259,  -259,  -235,  -259,  -259,  -243,  -238,  -259,
  -242,  -259,  -116,  -116,  -256,  -226,   -88,   -89,   -90,   -66,
   -98,  -194,  -195,  -114,  -259,  -126,  -112,  -118,  -259,  -206,
  -259,  -259,  -209,  -210,  -221,  -247,  -248,  -259,  -116,  -224,
  -259,  -259,  -259,  -259,  -240,  -259,  -239,  -253,  -259,  -259,
  -113,  -196,  -207,  -259,  -207,  -116,  -249,  -116,  -116,  -259,
  -231,  -232,  -233,  -236,  -241,  -259,  -104,  -259,  -259,  -211,
  -212,  -259,  -213,  -259,  -250,  -116,  -259,  -259,  -207,  -259,
  -116,  -251,  -254,  -197,  -259,  -198,  -252,  -259,  -199 ]

racc_goto_table = [
     2,   154,     3,    95,    27,   169,    27,    96,   210,    98,
   389,   170,   148,   286,   155,   151,   183,   369,   413,   260,
   390,   415,   172,   318,   322,     1,   281,   336,   190,   200,
   284,   282,   207,   214,   166,   335,    97,   351,   410,   209,
   202,   356,   330,   140,   177,   217,   416,   nil,   nil,   nil,
   nil,   208,   nil,   nil,   154,   nil,   nil,   nil,   nil,   nil,
   nil,   436,   nil,   nil,   nil,   425,   nil,   nil,   nil,   nil,
   nil,    96,    96,   196,   197,   390,   nil,   nil,   nil,   nil,
   nil,   450,   nil,   nil,   nil,   175,   nil,   184,   nil,   nil,
   nil,   nil,   160,    95,   nil,   nil,   145,   nil,    27,    27,
    97,    97,   198,   219,   nil,   nil,   181,   nil,   nil,   nil,
   nil,   nil,   283,   nil,    97,   nil,   212,   213,   285,   156,
   nil,   159,   nil,   168,   nil,   179,   324,   325,   185,   186,
   187,   162,   299,   268,   447,   298,   451,   286,   339,   304,
   286,   280,   nil,   291,   nil,   201,   264,   203,   204,   205,
   281,   293,   206,   281,   284,   282,   nil,   284,   282,   nil,
   464,   nil,   301,   nil,   nil,   nil,   nil,   220,   221,   222,
   223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
   233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
   243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
   253,   254,   255,   256,   257,   nil,   259,   nil,   nil,   nil,
   184,   287,   300,   332,   179,    27,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   345,   nil,   nil,   nil,   nil,   181,
   nil,   289,   292,   nil,   nil,   nil,   283,   315,   296,   283,
   156,   nil,   285,   292,   nil,   285,   344,   303,   nil,   nil,
   334,   162,   388,   nil,   391,   307,   nil,   280,   308,   309,
   310,   311,   353,   nil,   148,   nil,   151,   291,   nil,   355,
   nil,   nil,   nil,   nil,   nil,   nil,   314,   nil,   nil,   nil,
   nil,   359,   179,   nil,   nil,   nil,   nil,   nil,   nil,   314,
   408,   nil,   nil,   280,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   420,   421,   422,   nil,   423,   424,   nil,   nil,
   426,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   345,   nil,
   nil,   nil,   376,   nil,    27,   338,   nil,   nil,   343,   nil,
   nil,   nil,    95,   367,   179,   287,   143,   347,   287,   349,
   344,   159,   352,   179,   nil,   nil,   444,   nil,   404,   nil,
   nil,   nil,   nil,   nil,   nil,   159,   nil,   nil,   289,   nil,
   nil,   358,   179,   nil,   174,   nil,   456,   nil,   457,   364,
   nil,   189,   459,   nil,   nil,   nil,    95,   nil,   387,   429,
   nil,   nil,   nil,   372,   373,   467,   375,   nil,   nil,   nil,
   378,   nil,   nil,   381,   382,   383,   407,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   395,   nil,   189,   nil,   398,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   428,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   179,
   nil,   nil,   405,   387,   nil,   nil,   nil,   nil,   nil,   nil,
   454,   nil,    27,   nil,   nil,   nil,   nil,   nil,   nil,   189,
   nil,   nil,   nil,   nil,    95,   nil,   nil,   461,   nil,    27,
   179,    95,   466,   nil,    27,   nil,    95,   nil,   nil,   nil,
   nil,   nil,   143,   nil,   nil,   nil,   nil,   nil,   143,   nil,
   nil,   nil,   nil,   143,   nil,   439,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   143,   nil,   nil,   nil,   nil,
   nil,   nil,   452,   nil,   453 ]

racc_goto_check = [
     2,    50,     3,     2,    28,    31,    28,    42,    70,    64,
    76,    33,    49,    35,    45,    49,    58,    69,    72,    52,
    40,    77,    41,    74,    74,     1,    26,    61,    62,    59,
    32,    27,    65,    57,    56,    60,    53,    48,    71,    44,
    73,    37,    75,    25,    55,     4,    78,   nil,   nil,   nil,
   nil,    41,   nil,   nil,    50,   nil,   nil,   nil,   nil,   nil,
   nil,    77,   nil,   nil,   nil,    76,   nil,   nil,   nil,   nil,
   nil,    42,    42,    64,    64,    40,   nil,   nil,   nil,   nil,
   nil,    72,   nil,   nil,   nil,    53,   nil,    53,   nil,   nil,
   nil,   nil,    54,     2,   nil,   nil,    22,   nil,    28,    28,
    53,    53,    53,    28,   nil,   nil,    38,   nil,   nil,   nil,
   nil,   nil,    31,   nil,    53,   nil,    53,    53,    33,    22,
   nil,    22,   nil,    22,   nil,    22,    70,    70,    22,    22,
    22,    66,    50,    55,    69,    45,    69,    35,    52,    58,
    35,    67,   nil,    67,   nil,    22,    28,    22,    22,    22,
    26,    55,    22,    26,    32,    27,   nil,    32,    27,   nil,
    69,   nil,    55,   nil,   nil,   nil,   nil,    22,    22,    22,
    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
    22,    22,    22,    22,    22,   nil,    22,   nil,   nil,   nil,
    53,    38,    54,     3,    22,    28,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    50,   nil,   nil,   nil,   nil,    38,
   nil,    22,    22,   nil,   nil,   nil,    31,    54,    22,    31,
    22,   nil,    33,    22,   nil,    33,    49,    22,   nil,   nil,
    54,    66,    70,   nil,    70,    22,   nil,    67,    22,    22,
    22,    22,    55,   nil,    49,   nil,    49,    67,   nil,    67,
   nil,   nil,   nil,   nil,   nil,   nil,    66,   nil,   nil,   nil,
   nil,    55,    22,   nil,   nil,   nil,   nil,   nil,   nil,    66,
    70,   nil,   nil,    67,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    70,    70,    70,   nil,    70,    70,   nil,   nil,
    70,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,   nil,
   nil,   nil,     3,   nil,    28,    22,   nil,   nil,    22,   nil,
   nil,   nil,     2,    53,    22,    38,    23,    22,    38,    22,
    49,    22,    22,    22,   nil,   nil,    70,   nil,    55,   nil,
   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,    22,   nil,
   nil,    22,    22,   nil,    23,   nil,    70,   nil,    70,    22,
   nil,    23,    70,   nil,   nil,   nil,     2,   nil,    38,    55,
   nil,   nil,   nil,    22,    22,    70,    22,   nil,   nil,   nil,
    22,   nil,   nil,    22,    22,    22,    53,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    22,   nil,    23,   nil,    22,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    53,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,    22,    38,   nil,   nil,   nil,   nil,   nil,   nil,
     3,   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,    23,
   nil,   nil,   nil,   nil,     2,   nil,   nil,     3,   nil,    28,
    22,     2,     3,   nil,    28,   nil,     2,   nil,   nil,   nil,
   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,    23,   nil,
   nil,   nil,   nil,    23,   nil,    22,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,
   nil,   nil,    22,   nil,    22 ]

racc_goto_pointer = [
   nil,    25,     0,     2,   -50,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    67,   307,   nil,    19,  -138,  -133,     4,   nil,
   nil,   -52,  -134,   -46,   nil,  -151,   nil,  -250,    47,   nil,
  -311,   -35,    -1,   nil,   -47,   -38,   nil,   nil,  -237,   -20,
   -42,   nil,  -120,    28,    37,   -14,   -22,   -56,   -43,   -45,
  -180,  -188,   -36,   nil,     1,   -54,    76,   -21,   nil,  -298,
   -79,  -332,  -352,   -38,  -180,  -168,  -321,  -355,  -330 ]

racc_goto_default = [
   nil,   nil,    94,    93,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,   nil,    25,    26,   144,    28,
    30,    31,    32,    33,    34,    35,    36,   290,    40,    39,
    41,    42,    43,    51,    67,   nil,    53,   157,   158,   150,
   138,    68,   nil,    55,   nil,   297,   nil,   nil,   nil,   nil,
   178,   nil,    65,    66,    71,    69,   278,   163,    74,   nil,
   321,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 99, :_reduce_1,
  1, 99, :_reduce_2,
  1, 99, :_reduce_3,
  1, 101, :_reduce_4,
  3, 101, :_reduce_5,
  2, 101, :_reduce_6,
  2, 101, :_reduce_7,
  1, 102, :_reduce_8,
  1, 102, :_reduce_9,
  1, 102, :_reduce_10,
  1, 102, :_reduce_11,
  1, 102, :_reduce_12,
  1, 102, :_reduce_13,
  1, 102, :_reduce_14,
  1, 102, :_reduce_15,
  1, 102, :_reduce_16,
  1, 102, :_reduce_17,
  1, 102, :_reduce_18,
  1, 102, :_reduce_19,
  1, 102, :_reduce_20,
  1, 102, :_reduce_21,
  1, 102, :_reduce_22,
  1, 102, :_reduce_23,
  1, 102, :_reduce_24,
  1, 102, :_reduce_25,
  1, 120, :_reduce_26,
  1, 120, :_reduce_27,
  2, 120, :_reduce_28,
  1, 120, :_reduce_29,
  1, 120, :_reduce_30,
  1, 120, :_reduce_31,
  1, 120, :_reduce_32,
  3, 120, :_reduce_33,
  1, 121, :_reduce_34,
  1, 121, :_reduce_35,
  1, 121, :_reduce_36,
  1, 121, :_reduce_37,
  1, 121, :_reduce_38,
  1, 121, :_reduce_39,
  1, 121, :_reduce_40,
  3, 121, :_reduce_41,
  1, 135, :_reduce_42,
  1, 135, :_reduce_43,
  1, 135, :_reduce_44,
  1, 135, :_reduce_45,
  1, 135, :_reduce_46,
  1, 135, :_reduce_47,
  1, 135, :_reduce_48,
  1, 100, :_reduce_49,
  1, 100, :_reduce_50,
  1, 132, :_reduce_51,
  1, 132, :_reduce_52,
  1, 132, :_reduce_53,
  1, 132, :_reduce_54,
  1, 132, :_reduce_55,
  1, 132, :_reduce_56,
  1, 132, :_reduce_57,
  1, 137, :_reduce_58,
  1, 136, :_reduce_59,
  1, 136, :_reduce_60,
  2, 136, :_reduce_61,
  2, 136, :_reduce_62,
  1, 138, :_reduce_63,
  1, 140, :_reduce_64,
  1, 139, :_reduce_65,
  5, 142, :_reduce_66,
  3, 141, :_reduce_67,
  4, 141, :_reduce_68,
  0, 143, :_reduce_69,
  1, 143, :_reduce_70,
  3, 143, :_reduce_71,
  1, 122, :_reduce_72,
  3, 144, :_reduce_73,
  4, 144, :_reduce_74,
  0, 145, :_reduce_75,
  1, 145, :_reduce_76,
  3, 145, :_reduce_77,
  3, 146, :_reduce_78,
  2, 129, :_reduce_79,
  2, 129, :_reduce_80,
  2, 129, :_reduce_81,
  4, 129, :_reduce_82,
  2, 130, :_reduce_83,
  4, 130, :_reduce_84,
  2, 149, :_reduce_85,
  3, 148, :_reduce_86,
  3, 148, :_reduce_87,
  4, 148, :_reduce_88,
  4, 148, :_reduce_89,
  3, 150, :_reduce_90,
  2, 150, :_reduce_91,
  2, 150, :_reduce_92,
  1, 150, :_reduce_93,
  1, 147, :_reduce_94,
  2, 147, :_reduce_95,
  2, 123, :_reduce_96,
  2, 123, :_reduce_97,
  5, 133, :_reduce_98,
  4, 133, :_reduce_99,
  4, 133, :_reduce_100,
  2, 133, :_reduce_101,
  2, 133, :_reduce_102,
  4, 133, :_reduce_103,
  5, 155, :_reduce_104,
  2, 155, :_reduce_105,
  4, 115, :_reduce_106,
  2, 115, :_reduce_107,
  4, 116, :_reduce_108,
  2, 116, :_reduce_109,
  2, 156, :_reduce_110,
  1, 156, :_reduce_111,
  4, 156, :_reduce_112,
  6, 103, :_reduce_113,
  5, 103, :_reduce_114,
  1, 151, :_reduce_115,
  0, 151, :_reduce_116,
  1, 157, :_reduce_117,
  4, 157, :_reduce_118,
  0, 153, :_reduce_119,
  1, 153, :_reduce_120,
  0, 159, :_reduce_121,
  1, 159, :_reduce_122,
  1, 158, :_reduce_123,
  2, 158, :_reduce_124,
  3, 158, :_reduce_125,
  4, 158, :_reduce_126,
  1, 154, :_reduce_127,
  3, 154, :_reduce_128,
  3, 124, :_reduce_129,
  3, 124, :_reduce_130,
  3, 124, :_reduce_131,
  3, 124, :_reduce_132,
  3, 124, :_reduce_133,
  3, 124, :_reduce_134,
  3, 124, :_reduce_135,
  3, 124, :_reduce_136,
  3, 124, :_reduce_137,
  3, 124, :_reduce_138,
  3, 124, :_reduce_139,
  3, 124, :_reduce_140,
  3, 124, :_reduce_141,
  3, 124, :_reduce_142,
  3, 124, :_reduce_143,
  3, 124, :_reduce_144,
  3, 124, :_reduce_145,
  3, 124, :_reduce_146,
  3, 124, :_reduce_147,
  3, 124, :_reduce_148,
  3, 124, :_reduce_149,
  3, 124, :_reduce_150,
  3, 124, :_reduce_151,
  3, 124, :_reduce_152,
  3, 124, :_reduce_153,
  3, 124, :_reduce_154,
  3, 124, :_reduce_155,
  3, 124, :_reduce_156,
  3, 124, :_reduce_157,
  3, 124, :_reduce_158,
  3, 124, :_reduce_159,
  3, 124, :_reduce_160,
  3, 124, :_reduce_161,
  3, 124, :_reduce_162,
  3, 124, :_reduce_163,
  2, 128, :_reduce_164,
  2, 128, :_reduce_165,
  2, 128, :_reduce_166,
  2, 126, :_reduce_167,
  1, 126, :_reduce_168,
  3, 117, :_reduce_169,
  3, 117, :_reduce_170,
  3, 160, :_reduce_171,
  3, 160, :_reduce_172,
  3, 160, :_reduce_173,
  3, 160, :_reduce_174,
  1, 161, :_reduce_175,
  1, 161, :_reduce_176,
  1, 161, :_reduce_177,
  1, 161, :_reduce_178,
  1, 161, :_reduce_179,
  1, 162, :_reduce_180,
  2, 162, :_reduce_181,
  2, 162, :_reduce_182,
  2, 163, :_reduce_183,
  1, 131, :_reduce_184,
  2, 131, :_reduce_185,
  2, 106, :_reduce_186,
  2, 106, :_reduce_187,
  2, 106, :_reduce_188,
  1, 164, :_reduce_189,
  2, 164, :_reduce_190,
  2, 164, :_reduce_191,
  2, 164, :_reduce_192,
  3, 165, :_reduce_193,
  4, 165, :_reduce_194,
  4, 165, :_reduce_195,
  6, 104, :_reduce_196,
  9, 104, :_reduce_197,
  9, 104, :_reduce_198,
  11, 104, :_reduce_199,
  1, 166, :_reduce_200,
  1, 166, :_reduce_201,
  1, 166, :_reduce_202,
  1, 152, :_reduce_203,
  1, 152, :_reduce_204,
  1, 167, :_reduce_205,
  2, 167, :_reduce_206,
  0, 167, :_reduce_207,
  0, 169, :_reduce_208,
  1, 169, :_reduce_209,
  1, 169, :_reduce_210,
  3, 169, :_reduce_211,
  3, 169, :_reduce_212,
  3, 170, :_reduce_213,
  2, 105, :_reduce_214,
  4, 105, :_reduce_215,
  4, 105, :_reduce_216,
  0, 171, :_reduce_217,
  1, 171, :_reduce_218,
  1, 114, :_reduce_219,
  4, 118, :_reduce_220,
  5, 118, :_reduce_221,
  3, 118, :_reduce_222,
  4, 119, :_reduce_223,
  5, 119, :_reduce_224,
  3, 119, :_reduce_225,
  5, 125, :_reduce_226,
  4, 109, :_reduce_227,
  1, 113, :_reduce_228,
  1, 113, :_reduce_229,
  4, 110, :_reduce_230,
  6, 108, :_reduce_231,
  6, 108, :_reduce_232,
  6, 108, :_reduce_233,
  3, 111, :_reduce_234,
  4, 111, :_reduce_235,
  6, 111, :_reduce_236,
  0, 173, :_reduce_237,
  2, 173, :_reduce_238,
  3, 173, :_reduce_239,
  3, 173, :_reduce_240,
  4, 173, :_reduce_241,
  1, 174, :_reduce_242,
  1, 174, :_reduce_243,
  2, 168, :_reduce_244,
  1, 168, :_reduce_245,
  1, 172, :_reduce_246,
  3, 172, :_reduce_247,
  3, 172, :_reduce_248,
  4, 172, :_reduce_249,
  3, 175, :_reduce_250,
  4, 176, :_reduce_251,
  5, 176, :_reduce_252,
  5, 112, :_reduce_253,
  8, 112, :_reduce_254,
  2, 134, :_reduce_255,
  4, 127, :_reduce_256,
  1, 127, :_reduce_257,
  1, 107, :_reduce_258 ]

racc_reduce_n = 259

racc_shift_n = 469

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :ELSEIF => 4,
  :THEN => 5,
  :UNLESS => 6,
  :END => 7,
  :WHILE => 8,
  :UNTIL => 9,
  :BREAK => 10,
  :CONTINUE => 11,
  :TRY => 12,
  :CATCH => 13,
  :FINALLY => 14,
  :FOR => 15,
  :IN => 16,
  :DEF => 17,
  :DEF_BANG => 18,
  :SPLAT_PARAM => 19,
  :SPLAT_ARG => 20,
  :CALL => 21,
  :BUILTIN_COMMAND => 22,
  :CLASS => 23,
  :NEW => 24,
  :DEFM => 25,
  :DEFM_BANG => 26,
  :SUPER => 27,
  :RIML_FILE_COMMAND => 28,
  :RIML_CLASS_COMMAND => 29,
  :RETURN => 30,
  :NEWLINE => 31,
  :NUMBER => 32,
  :STRING_D => 33,
  :STRING_S => 34,
  :EX_LITERAL => 35,
  :REGEXP => 36,
  :TRUE => 37,
  :FALSE => 38,
  :LET => 39,
  :UNLET => 40,
  :UNLET_BANG => 41,
  :IDENTIFIER => 42,
  :DICT_VAL => 43,
  :SCOPE_MODIFIER => 44,
  :SCOPE_MODIFIER_LITERAL => 45,
  :SPECIAL_VAR_PREFIX => 46,
  :FINISH => 47,
  "!" => 48,
  "*" => 49,
  "/" => 50,
  "%" => 51,
  "+" => 52,
  "-" => 53,
  "." => 54,
  ">" => 55,
  ">#" => 56,
  ">?" => 57,
  "<" => 58,
  "<#" => 59,
  "<?" => 60,
  ">=" => 61,
  ">=#" => 62,
  ">=?" => 63,
  "<=" => 64,
  "<=#" => 65,
  "<=?" => 66,
  "==" => 67,
  "==?" => 68,
  "==#" => 69,
  "=~" => 70,
  "=~?" => 71,
  "=~#" => 72,
  "!~" => 73,
  "!~?" => 74,
  "!~#" => 75,
  "!=" => 76,
  "!=?" => 77,
  "!=#" => 78,
  :IS => 79,
  :ISNOT => 80,
  "&&" => 81,
  "||" => 82,
  "?" => 83,
  "=" => 84,
  "+=" => 85,
  "-=" => 86,
  ".=" => 87,
  "," => 88,
  "(" => 89,
  ")" => 90,
  ";" => 91,
  "[" => 92,
  "]" => 93,
  "{" => 94,
  "}" => 95,
  ":" => 96,
  "===" => 97 }

racc_nt_base = 98

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "ELSEIF",
  "THEN",
  "UNLESS",
  "END",
  "WHILE",
  "UNTIL",
  "BREAK",
  "CONTINUE",
  "TRY",
  "CATCH",
  "FINALLY",
  "FOR",
  "IN",
  "DEF",
  "DEF_BANG",
  "SPLAT_PARAM",
  "SPLAT_ARG",
  "CALL",
  "BUILTIN_COMMAND",
  "CLASS",
  "NEW",
  "DEFM",
  "DEFM_BANG",
  "SUPER",
  "RIML_FILE_COMMAND",
  "RIML_CLASS_COMMAND",
  "RETURN",
  "NEWLINE",
  "NUMBER",
  "STRING_D",
  "STRING_S",
  "EX_LITERAL",
  "REGEXP",
  "TRUE",
  "FALSE",
  "LET",
  "UNLET",
  "UNLET_BANG",
  "IDENTIFIER",
  "DICT_VAL",
  "SCOPE_MODIFIER",
  "SCOPE_MODIFIER_LITERAL",
  "SPECIAL_VAR_PREFIX",
  "FINISH",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\".\"",
  "\">\"",
  "\">#\"",
  "\">?\"",
  "\"<\"",
  "\"<#\"",
  "\"<?\"",
  "\">=\"",
  "\">=#\"",
  "\">=?\"",
  "\"<=\"",
  "\"<=#\"",
  "\"<=?\"",
  "\"==\"",
  "\"==?\"",
  "\"==#\"",
  "\"=~\"",
  "\"=~?\"",
  "\"=~#\"",
  "\"!~\"",
  "\"!~?\"",
  "\"!~#\"",
  "\"!=\"",
  "\"!=?\"",
  "\"!=#\"",
  "IS",
  "ISNOT",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\"=\"",
  "\"+=\"",
  "\"-=\"",
  "\".=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\":\"",
  "\"===\"",
  "$start",
  "Root",
  "Terminator",
  "Statements",
  "Statement",
  "ExplicitCall",
  "Def",
  "Return",
  "UnletVariable",
  "ExLiteral",
  "For",
  "While",
  "Until",
  "Try",
  "ClassDefinition",
  "LoopKeyword",
  "EndScript",
  "RimlFileCommand",
  "RimlClassCommand",
  "MultiAssign",
  "If",
  "Unless",
  "Expression",
  "ExpressionWithoutDictLiteral",
  "Dictionary",
  "DictGetWithDotLiteral",
  "BinaryOperator",
  "Ternary",
  "Assign",
  "Super",
  "UnaryOperator",
  "DictGet",
  "ListOrDictGet",
  "AllVariableRetrieval",
  "LiteralWithoutDictLiteral",
  "Call",
  "ObjectInstantiation",
  "PossibleStringValue",
  "String",
  "Number",
  "Regexp",
  "List",
  "ScopeModifierLiteral",
  "ListLiteral",
  "ListUnpack",
  "ListItems",
  "DictionaryLiteral",
  "DictItems",
  "DictItem",
  "DictGetWithDot",
  "ListOrDictGetWithBrackets",
  "ListOrDictGetAssign",
  "SubList",
  "Scope",
  "DefCallIdentifier",
  "ArgList",
  "ArgListWithoutNothing",
  "ObjectInstantiationCall",
  "ClassArgList",
  "SIDAndScope",
  "ArgListWithoutNothingWithSplat",
  "ArgListWithSplat",
  "AssignExpression",
  "AssignLHS",
  "VariableRetrieval",
  "SimpleVariableRetrieval",
  "CurlyBraceName",
  "CurlyBraceVarPart",
  "FunctionType",
  "DefKeywords",
  "Block",
  "ParamList",
  "DefaultParam",
  "Returnable",
  "IfBlock",
  "Catch",
  "Catchable",
  "ElseBlock",
  "ElseifBlock" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_1(val, _values, result)
     result = make_node(val) { |_| Riml::Nodes.new([]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 41)
  def _reduce_2(val, _values, result)
     result = make_node(val) { |_| Riml::Nodes.new([]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 42)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_4(val, _values, result)
     result = make_node(val) { |v| Riml::Nodes.new([ v[0] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_5(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_7(val, _values, result)
     result = make_node(val) { |v| Riml::Nodes.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_21(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_26(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_27(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_28(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_32(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_33(val, _values, result)
     result = make_node(val) { |v| Riml::WrapInParensNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 87)
  def _reduce_34(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_35(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_37(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_38(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_40(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_41(val, _values, result)
     result = make_node(val) { |v| Riml::WrapInParensNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_42(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_45(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_47(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_48(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_49(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_50(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_51(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_52(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_53(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_55(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_56(val, _values, result)
     result = make_node(val) { |_| Riml::TrueNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_57(val, _values, result)
     result = make_node(val) { |_| Riml::FalseNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_58(val, _values, result)
     result = make_node(val) { |v| Riml::NumberNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_59(val, _values, result)
     result = make_node(val) { |v| Riml::StringNode.new(v[0], :s) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_60(val, _values, result)
     result = make_node(val) { |v| Riml::StringNode.new(v[0], :d) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_61(val, _values, result)
     result = make_node(val) { |v| Riml::StringLiteralConcatNode.new(v[0], Riml::StringNode.new(v[1], :s)) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_62(val, _values, result)
     result = make_node(val) { |v| Riml::StringLiteralConcatNode.new(v[0], Riml::StringNode.new(v[1], :d)) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_63(val, _values, result)
     result = make_node(val) { |v| Riml::RegexpNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_64(val, _values, result)
     result = make_node(val) { |v| Riml::ScopeModifierLiteralNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_65(val, _values, result)
     result = make_node(val) { |v| Riml::ListNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_66(val, _values, result)
     result = make_node(val) { |v| Riml::ListUnpackNode.new(v[1] << v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_67(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_68(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_69(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_70(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_71(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_72(val, _values, result)
     result = make_node(val) { |v| Riml::DictionaryNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_73(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 170)
  def _reduce_74(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_75(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_76(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_77(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_78(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_79(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 187)
  def _reduce_80(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 188)
  def _reduce_81(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 189)
  def _reduce_82(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(Riml::WrapInParensNode.new(v[1]), v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 193)
  def _reduce_83(val, _values, result)
     result = make_node(val) { |v| Riml::ListOrDictGetNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 194)
  def _reduce_84(val, _values, result)
     result = make_node(val) { |v| Riml::ListOrDictGetNode.new(Riml::WrapInParensNode.new(v[1]), v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 198)
  def _reduce_85(val, _values, result)
     result = make_node(val) { |v| Riml::ListOrDictGetNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_86(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 203)
  def _reduce_87(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 204)
  def _reduce_88(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 205)
  def _reduce_89(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 209)
  def _reduce_90(val, _values, result)
     result = make_node(val) { |v| Riml::SublistNode.new([v[0], Riml::LiteralNode.new(' : '), v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 210)
  def _reduce_91(val, _values, result)
     result = make_node(val) { |v| Riml::SublistNode.new([v[0], Riml::LiteralNode.new(' :')]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 211)
  def _reduce_92(val, _values, result)
     result = make_node(val) { |v| Riml::SublistNode.new([Riml::LiteralNode.new(': '), v[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 212)
  def _reduce_93(val, _values, result)
     result = make_node(val) { |_| Riml::SublistNode.new([Riml::LiteralNode.new(':')]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 216)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 217)
  def _reduce_95(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 221)
  def _reduce_96(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 222)
  def _reduce_97(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_98(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(v[0], v[1], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 227)
  def _reduce_99(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 228)
  def _reduce_100(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_101(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 230)
  def _reduce_102(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], []) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 231)
  def _reduce_103(val, _values, result)
     result = make_node(val) { |v| Riml::ExplicitCallNode.new(nil, nil, v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 235)
  def _reduce_104(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(v[0], v[1], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_105(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(v[0], v[1], []) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 240)
  def _reduce_106(val, _values, result)
     result = make_node(val) { |v| Riml::RimlFileCommandNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 241)
  def _reduce_107(val, _values, result)
     result = make_node(val) { |v| Riml::RimlFileCommandNode.new(nil, v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_108(val, _values, result)
     result = make_node(val) { |v| Riml::RimlClassCommandNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_109(val, _values, result)
     result = make_node(val) { |v| Riml::RimlClassCommandNode.new(nil, v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 250)
  def _reduce_110(val, _values, result)
     result = ["#{val[0]}#{val[1]}"] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 251)
  def _reduce_111(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_112(val, _values, result)
     result = val[0].concat ["#{val[2]}#{val[3]}"] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 256)
  def _reduce_113(val, _values, result)
     result = make_node(val) { |v| Riml::ExplicitCallNode.new(v[1], v[2], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_114(val, _values, result)
     result = make_node(val) { |v| Riml::ExplicitCallNode.new(nil, v[1], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 261)
  def _reduce_115(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_116(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 267)
  def _reduce_117(val, _values, result)
     result = [ nil, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 268)
  def _reduce_118(val, _values, result)
     result = [ make_node(val) { |v| Riml::SIDNode.new(v[1]) }, val[3] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 272)
  def _reduce_119(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 273)
  def _reduce_120(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 277)
  def _reduce_121(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 278)
  def _reduce_122(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 282)
  def _reduce_123(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 283)
  def _reduce_124(val, _values, result)
     result = [ make_node(val) { |v| Riml::SplatNode.new(v[1]) } ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 284)
  def _reduce_125(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 285)
  def _reduce_126(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::SplatNode.new(v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 289)
  def _reduce_127(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 290)
  def _reduce_128(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 294)
  def _reduce_129(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 295)
  def _reduce_130(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 297)
  def _reduce_131(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 298)
  def _reduce_132(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 299)
  def _reduce_133(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 302)
  def _reduce_134(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 304)
  def _reduce_135(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 305)
  def _reduce_136(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_137(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 308)
  def _reduce_138(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 309)
  def _reduce_139(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 310)
  def _reduce_140(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 312)
  def _reduce_141(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 313)
  def _reduce_142(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 314)
  def _reduce_143(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_144(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 317)
  def _reduce_145(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_146(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 320)
  def _reduce_147(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 321)
  def _reduce_148(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 322)
  def _reduce_149(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 324)
  def _reduce_150(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 325)
  def _reduce_151(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 326)
  def _reduce_152(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_153(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 329)
  def _reduce_154(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 330)
  def _reduce_155(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 332)
  def _reduce_156(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 333)
  def _reduce_157(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_158(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_159(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 336)
  def _reduce_160(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 337)
  def _reduce_161(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 339)
  def _reduce_162(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 340)
  def _reduce_163(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 344)
  def _reduce_164(val, _values, result)
     result = make_node(val) { |v| Riml::UnaryOperatorNode.new(val[0], [val[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 345)
  def _reduce_165(val, _values, result)
     result = make_node(val) { |v| Riml::UnaryOperatorNode.new(val[0], [val[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 346)
  def _reduce_166(val, _values, result)
     result = make_node(val) { |v| Riml::UnaryOperatorNode.new(val[0], [val[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 351)
  def _reduce_167(val, _values, result)
     result = make_node(val) { |v| Riml::AssignNode.new(v[1][0], v[1][1], v[1][2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 352)
  def _reduce_168(val, _values, result)
     result = make_node(val) { |v| Riml::AssignNode.new(v[0][0], v[0][1], v[0][2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 356)
  def _reduce_169(val, _values, result)
     result = make_node(val) { |v| Riml::MultiAssignNode.new([v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_170(val, _values, result)
     val[0].assigns << val[2]; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 362)
  def _reduce_171(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 363)
  def _reduce_172(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 364)
  def _reduce_173(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 365)
  def _reduce_174(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 369)
  def _reduce_175(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 370)
  def _reduce_176(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 371)
  def _reduce_177(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 372)
  def _reduce_178(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 373)
  def _reduce_179(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_180(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 379)
  def _reduce_181(val, _values, result)
     result = make_node(val) { |v| Riml::GetSpecialVariableNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 380)
  def _reduce_182(val, _values, result)
     result = make_node(val) { |v| Riml::GetVariableByScopeAndDictNameNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 384)
  def _reduce_183(val, _values, result)
     result = make_node(val) { |v| Riml::GetVariableNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 388)
  def _reduce_184(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 389)
  def _reduce_185(val, _values, result)
     result = make_node(val) { |v| Riml::GetCurlyBraceNameNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 393)
  def _reduce_186(val, _values, result)
     result = make_node(val) { |v| Riml::UnletVariableNode.new('!', [ v[1] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 394)
  def _reduce_187(val, _values, result)
     result = make_node(val) { |v| Riml::UnletVariableNode.new('!', [ v[1] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 395)
  def _reduce_188(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 399)
  def _reduce_189(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBraceVariable.new([ v[0] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 400)
  def _reduce_190(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBraceVariable.new([ Riml::CurlyBracePart.new(v[0]), v[1] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 401)
  def _reduce_191(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::CurlyBracePart.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 402)
  def _reduce_192(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 406)
  def _reduce_193(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBracePart.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 407)
  def _reduce_194(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBracePart.new([v[1], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 408)
  def _reduce_195(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBracePart.new([v[1], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 414)
  def _reduce_196(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], [], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 415)
  def _reduce_197(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], v[4], v[6], v[7]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 416)
  def _reduce_198(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], [v[4]], v[6], v[7]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 417)
  def _reduce_199(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], v[4] << v[6], v[8], v[9]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 421)
  def _reduce_200(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 422)
  def _reduce_201(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 423)
  def _reduce_202(val, _values, result)
     result = "DefMethodNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 428)
  def _reduce_203(val, _values, result)
     result = make_node(val) { |v| Riml::GetCurlyBraceNameNode.new('', v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 429)
  def _reduce_204(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 434)
  def _reduce_205(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 435)
  def _reduce_206(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 436)
  def _reduce_207(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 440)
  def _reduce_208(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 441)
  def _reduce_209(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 442)
  def _reduce_210(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 443)
  def _reduce_211(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 444)
  def _reduce_212(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 448)
  def _reduce_213(val, _values, result)
     result = make_node(val) { |v| Riml::DefaultParamNode.new(v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 452)
  def _reduce_214(val, _values, result)
     result = make_node(val) { |v| Riml::ReturnNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 453)
  def _reduce_215(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[3], Nodes.new([ReturnNode.new(v[1])])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 454)
  def _reduce_216(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[3], Nodes.new([ReturnNode.new(v[1])])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 458)
  def _reduce_217(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 459)
  def _reduce_218(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 463)
  def _reduce_219(val, _values, result)
     result = make_node(val) { |_| Riml::FinishNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 468)
  def _reduce_220(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 469)
  def _reduce_221(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[1], Riml::Nodes.new([v[3]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 470)
  def _reduce_222(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[2], Riml::Nodes.new([v[0]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 474)
  def _reduce_223(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 475)
  def _reduce_224(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[1], Riml::Nodes.new([v[3]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 476)
  def _reduce_225(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[2], Riml::Nodes.new([v[0]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 480)
  def _reduce_226(val, _values, result)
     result = make_node(val) { |v| Riml::TernaryOperatorNode.new([v[0], v[2], v[4]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 484)
  def _reduce_227(val, _values, result)
     result = make_node(val) { |v| Riml::WhileNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 488)
  def _reduce_228(val, _values, result)
     result = make_node(val) { |_| Riml::BreakNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 489)
  def _reduce_229(val, _values, result)
     result = make_node(val) { |_| Riml::ContinueNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 493)
  def _reduce_230(val, _values, result)
     result = make_node(val) { |v| Riml::UntilNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 497)
  def _reduce_231(val, _values, result)
     result = make_node(val) { |v| Riml::ForNode.new(v[1], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 498)
  def _reduce_232(val, _values, result)
     result = make_node(val) { |v| Riml::ForNode.new(v[1], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 499)
  def _reduce_233(val, _values, result)
     result = make_node(val) { |v| Riml::ForNode.new(v[1], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 503)
  def _reduce_234(val, _values, result)
     result = make_node(val) { |v| Riml::TryNode.new(v[1], nil, nil) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 504)
  def _reduce_235(val, _values, result)
     result = make_node(val) { |v| Riml::TryNode.new(v[1], v[2], nil) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 505)
  def _reduce_236(val, _values, result)
     result = make_node(val) { |v| Riml::TryNode.new(v[1], v[2], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 509)
  def _reduce_237(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 510)
  def _reduce_238(val, _values, result)
     result = [ make_node(val) { |v| Riml::CatchNode.new(nil, v[1]) } ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 511)
  def _reduce_239(val, _values, result)
     result = [ make_node(val) { |v| Riml::CatchNode.new(v[1], v[2]) } ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 512)
  def _reduce_240(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::CatchNode.new(nil, v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 513)
  def _reduce_241(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::CatchNode.new(v[2], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 517)
  def _reduce_242(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 518)
  def _reduce_243(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 525)
  def _reduce_244(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 526)
  def _reduce_245(val, _values, result)
     result = make_node(val) { |_| Riml::Nodes.new([]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 530)
  def _reduce_246(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 531)
  def _reduce_247(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 532)
  def _reduce_248(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 533)
  def _reduce_249(val, _values, result)
     result = val[1] << val[2] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 537)
  def _reduce_250(val, _values, result)
     result = make_node(val) { |v| Riml::ElseNode.new(v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 541)
  def _reduce_251(val, _values, result)
     result = make_node(val) { |v| Riml::Nodes.new([Riml::ElseifNode.new(v[1], v[3])]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 542)
  def _reduce_252(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::ElseifNode.new(v[2], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 546)
  def _reduce_253(val, _values, result)
     result = make_node(val) { |v| Riml::ClassDefinitionNode.new(v[1], v[2], nil, v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 547)
  def _reduce_254(val, _values, result)
     result = make_node(val) { |v| Riml::ClassDefinitionNode.new(v[1], v[2], (v[4] || ClassDefinitionNode::DEFAULT_SCOPE_MODIFIER) + v[5], v[6]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 551)
  def _reduce_255(val, _values, result)
     result = make_node(val) { |v| Riml::ObjectInstantiationNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 555)
  def _reduce_256(val, _values, result)
     result = make_node(val) { |v| Riml::SuperNode.new(v[2], true) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 556)
  def _reduce_257(val, _values, result)
     result = make_node(val) { |_| Riml::SuperNode.new([], false) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 560)
  def _reduce_258(val, _values, result)
     result = make_node(val) { |v| Riml::ExLiteralNode.new(v[0]) } 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
