#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require File.expand_path("../ast_rewriter", __FILE__)
  require File.expand_path("../errors", __FILE__)
module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 547)
  # This code will be put as-is in the parser class

  attr_accessor :ast_rewriter

  # parses tokens or code into output nodes
  def parse(object, ast_rewriter = Riml::AST_Rewriter.new, filename = nil, included = false)
    if tokens?(object)
      @tokens = object
    elsif code?(object)
      @lexer = Riml::Lexer.new(object, filename, true)
    end

    begin
      ast = do_parse
    rescue Racc::ParseError => e
      raise unless @lexer
      if @lexer.prev_token_is_keyword?
        warning = "#{@lexer.invalid_keyword.inspect} is a keyword, and cannot " \
          "be used as a variable name"
      end
      error_msg = "#{e.message} at #{@lexer.filename}:#{@lexer.lineno}"
      error_msg << "\n\n#{warning}" if warning
      raise Riml::ParseError, error_msg
    end

    @ast_rewriter ||= ast_rewriter
    return ast unless @ast_rewriter
    @ast_rewriter.ast = ast
    @ast_rewriter.rewrite(filename, included)
  end

  # get the next token from either the list of tokens provided, or
  # the lexer getting the next token
  def next_token
    return @tokens.shift unless @lexer
    token = @lexer.next_token
    @current_parser_info = token.pop if token
    token
  end

  private

  def tokens?(object)
    Array === object
  end

  def code?(object)
    String === object
  end

  def make_node(racc_val)
    node = yield racc_val
    node.parser_info = @current_parser_info
    node
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'133,60,-47,-47,134,206,404,405,206,435,206,206,398,144,56,194,88,427',
'298,396,356,396,396,37,46,48,47,37,49,44,45,436,380,37,399,374,60,50',
'69,37,61,376,375,290,62,63,127,128,130,125,126,129,113,114,115,119,120',
'121,116,117,118,122,123,124,100,102,101,107,109,108,110,112,111,104',
'106,105,131,132,99,98,135,183,79,38,52,37,80,38,81,84,82,83,86,38,103',
'85,37,74,75,38,57,56,87,88,76,37,89,58,59,77,37,46,48,47,90,49,44,45',
'64,71,72,60,272,60,50,69,78,61,206,269,369,62,63,49,274,206,268,274',
'370,-171,-171,-171,-171,159,145,38,396,162,346,-43,-43,-85,-85,-85,-85',
'322,38,151,150,253,159,324,-46,-46,267,38,177,265,29,266,38,52,79,54',
'162,147,80,272,81,84,82,83,86,274,306,85,162,74,75,162,57,56,87,88,76',
'162,89,58,59,77,37,46,48,47,90,49,44,45,64,71,72,-115,162,60,50,69,78',
'61,-42,-42,361,62,63,267,-196,-98,-44,-44,266,162,-195,289,420,272,419',
'162,162,-171,-171,-171,-171,206,145,151,150,-115,49,60,50,69,306,309',
'60,50,69,310,271,147,29,147,38,52,79,54,404,424,80,360,81,84,82,83,86',
'147,-98,85,202,74,75,147,57,56,87,88,76,162,89,58,59,77,37,46,48,47',
'90,49,44,45,64,71,72,-115,162,60,50,69,78,61,-48,-48,137,62,63,316,-168',
'-168,-168,-168,186,187,188,189,364,289,-45,-45,52,60,137,-169,-169,-169',
'-169,60,50,69,381,260,313,137,382,253,147,264,-99,385,264,264,29,264',
'38,52,253,54,262,298,127,128,130,125,126,129,113,114,115,119,120,121',
'116,117,118,122,123,124,100,102,101,107,109,108,110,112,111,104,106',
'105,131,132,99,98,135,137,79,-99,258,388,80,-235,81,84,82,83,86,389',
'103,85,390,74,75,257,57,56,87,88,76,391,89,58,59,77,37,46,48,47,90,49',
'44,45,64,71,72,299,137,60,50,69,78,61,393,60,358,62,63,103,213,127,128',
'130,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118,122',
'123,124,211,210,60,60,206,137,305,206,127,128,130,319,29,206,38,52,79',
'54,414,60,80,60,81,84,82,83,86,103,190,85,103,74,75,355,57,56,87,88',
'76,354,89,58,59,77,37,46,48,47,90,49,44,45,64,71,72,-115,103,60,50,69',
'78,61,417,418,253,62,63,421,422,127,128,130,125,126,129,113,114,115',
'119,120,121,116,117,118,122,123,124,100,102,101,107,109,108,110,112',
'111,104,106,105,131,132,99,29,353,38,52,79,54,425,137,80,367,81,84,82',
'83,86,103,147,85,428,74,75,429,57,56,87,88,76,430,89,58,59,77,37,46',
'48,47,90,49,44,45,64,71,72,206,432,60,50,69,78,61,433,320,361,62,63',
'312,321,-168,-168,-168,-168,361,349,147,326,147,206,103,445,422,103',
'103,140,139,137,449,450,361,452,97,313,334,338,91,455,127,128,130,,',
'29,,38,52,,54,,,127,128,130,125,126,129,113,114,115,119,120,121,116',
'117,118,122,123,124,100,102,101,107,109,108,110,112,111,104,106,105',
'131,132,99,98,135,103,79,,,,80,,81,84,82,83,86,,103,85,,74,75,,57,56',
'87,88,76,,89,58,59,77,37,46,48,47,90,49,44,45,64,71,72,,,60,50,69,78',
'61,,,,62,63,,,127,128,130,125,126,129,113,114,115,119,120,121,116,117',
'118,122,123,124,100,102,101,107,109,108,110,112,111,104,106,105,131',
'132,,29,,38,52,79,54,,,80,,81,84,82,83,86,103,,85,,74,75,,57,56,87,88',
'76,,89,58,59,77,,46,48,47,90,49,44,45,64,71,72,-115,,60,50,69,78,61',
',,,62,63,406,,,,,,,,,,,,,,,,,,,,,,,,,,,,,127,128,130,125,126,129,29',
',,52,,54,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118',
'122,123,124,100,102,101,107,109,108,110,112,111,104,106,105,131,132',
'99,98,135,401,103,,,,,,,144,56,,88,,103,89,,,,,46,48,47,,49,44,45,64',
',,,,60,50,69,,61,,,,62,63,127,128,130,125,126,129,113,114,115,119,120',
'121,116,117,118,122,123,124,100,102,101,107,109,108,110,112,111,104',
'106,105,131,132,99,98,135,29,,,52,,54,,256,144,56,,88,,103,89,127,128',
'130,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,127,128,130,62,63,144,56',
',88,,,89,,,,,46,48,47,,49,44,45,64,,,,103,60,50,69,,61,,,,62,63,144',
'56,29,88,,52,89,54,,256,103,46,48,47,,49,44,45,64,,,,,60,50,69,,61,',
',,62,63,144,56,29,88,,52,89,54,342,,,46,48,47,,49,44,45,64,,,-115,,60',
'50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,',
',-115,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49',
'44,45,64,,,-115,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,165',
'46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89',
'283,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,163,88',
',52,89,54,,,,46,48,47,,49,44,45,64,,,-115,,60,50,69,,61,,,,62,63,144',
'56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63',
'144,56,174,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,',
',62,63,,,29,-118,,52,,54,127,128,130,125,126,129,113,114,115,119,120',
'121,116,117,118,122,123,124,,,,,144,56,,88,,29,89,,52,,54,46,48,47,',
'49,44,45,64,,,,,60,50,69,103,61,,,,62,63,144,56,,88,,,89,,,,,46,48,47',
',49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46',
'48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54',
',,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52',
'89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88',
',52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,,,29,-118',
',52,,54,,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118',
'122,123,124,,,,,144,56,,88,29,-118,89,52,,54,,46,48,47,,49,44,45,64',
',,,,60,50,69,103,61,,,,62,63,144,56,,88,,,89,,,,,46,48,47,,49,44,45',
'64,,,-115,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47',
',49,44,45,64,,,-115,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,',
',46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89',
'54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,',
'52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29',
'88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144',
'56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63',
'144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,',
'62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,',
'61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'69,,61,,,,62,63,,,29,-118,,52,,54,127,128,130,125,126,129,113,114,115',
'119,120,121,116,117,118,122,123,124,,,,,144,56,,88,,29,89,,52,,54,46',
'48,47,,49,44,45,64,,,,,60,50,69,103,61,,,,62,63,144,56,,88,,,89,,,,',
'46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89',
'54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,',
'52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,,,29,,,52',
'340,54,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118,122',
'123,124,,,,,144,56,,88,,29,89,,52,,54,46,48,47,,49,44,45,64,,,,,60,50',
'69,103,61,,,,62,63,144,56,,88,,,89,,,,,46,48,47,,49,44,45,64,,,,,60',
'50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,',
',,,60,50,69,,61,,,,62,63,,,29,-118,,52,,54,127,128,130,125,126,129,113',
'114,115,119,120,121,116,117,118,122,123,124,,,,,144,56,,88,,29,89,,52',
',54,46,48,47,,49,44,45,64,,,,,60,50,69,103,61,,,,62,63,144,56,,88,,',
'89,,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88',
',52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56',
'29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144',
'56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63',
'144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,',
'62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,',
'61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,',
'60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64',
',,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44',
'45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,',
'49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48',
'47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,',
'46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89',
'54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,',
'52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29',
'88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144',
'56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63',
'144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,',
'62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,',
'61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,',
'60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64',
',,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44',
'45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,',
'49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48',
'47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,',
'46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89',
'54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,',
'52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29',
'88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144',
'56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63',
'144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,',
'62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,',
'61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,',
'60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64',
',,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44',
'45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,',
'49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48',
'47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,',
'46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89',
'54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,',
'52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,,,29,-118',
',52,,54,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118',
'122,123,124,,,,,144,56,,88,,29,89,,52,,54,46,48,47,,49,44,45,64,,,-115',
',60,50,69,103,61,,,,62,63,144,56,,88,,,89,,,,,46,48,47,,49,44,45,64',
',,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44',
'45,64,,,,,60,50,69,,61,,,,62,63,,,29,-118,,52,,54,,127,128,130,125,126',
'129,113,114,115,119,120,121,116,117,118,122,123,124,,,,,144,56,,88,29',
'-118,89,52,,54,,46,48,47,,49,44,45,64,,,,,60,50,69,103,61,,,,62,63,144',
'56,,88,,,89,,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144',
'56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63',
',,29,-118,,52,,54,127,128,130,125,126,129,113,114,115,119,120,121,116',
'117,118,122,123,124,,,,,144,56,,88,,29,89,,52,,54,46,48,47,,49,44,45',
'64,,,-115,,60,50,69,103,61,,,,62,63,144,56,,88,,,89,,,,,46,48,47,,49',
'44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47',
',49,44,45,64,,,,,60,50,69,,61,,,,62,63,,,29,-118,,52,,54,127,128,130',
'125,126,129,113,114,115,119,120,121,116,117,118,122,123,124,,,,,144',
'56,,88,,29,89,,52,,54,46,48,47,,49,44,45,64,,,,,60,50,69,103,61,,,,62',
'63,144,56,,88,,,89,,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62',
'63,144,56,29,88,,52,89,283,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61',
',,,62,63,144,56,29,88,,52,,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69',
',61,,,,62,63,144,56,29,88,,52,,54,,,,46,48,47,,49,44,45,,,,,,60,50,69',
',61,,,,62,63,144,56,183,88,,52,,,,,,46,48,47,,49,44,45,64,,,,,60,50',
'69,,61,,,,62,63,,,169,,,171,,,,,,,,,,,,,,,,206,,,,,,127,128,130,125',
'126,129,,,183,,,52,127,128,130,125,126,129,113,114,115,119,120,121,116',
'117,118,122,123,124,100,102,101,107,109,108,110,112,111,104,106,105',
'131,132,99,98,135,206,103,,,,,127,128,130,125,126,129,,103,,,,,127,128',
'130,125,126,129,113,114,115,119,120,121,116,117,118,122,123,124,100',
'102,101,107,109,108,110,112,111,104,106,105,131,132,99,98,135,206,103',
',,,,127,128,130,125,126,129,,103,,,,,127,128,130,125,126,129,113,114',
'115,119,120,121,116,117,118,122,123,124,100,102,101,107,109,108,110',
'112,111,104,106,105,131,132,99,98,135,206,103,,,,,127,128,130,125,126',
'129,,103,,,,,127,128,130,125,126,129,113,114,115,119,120,121,116,117',
'118,122,123,124,100,102,101,107,109,108,110,112,111,104,106,105,131',
'132,99,98,135,206,103,,,,,127,128,130,125,126,129,,103,,,,,127,128,130',
'125,126,129,113,114,115,119,120,121,116,117,118,122,123,124,100,102',
'101,107,109,108,110,112,111,104,106,105,131,132,99,98,135,447,103,,',
',,127,128,130,125,126,129,,103,,,,,127,128,130,125,126,129,113,114,115',
'119,120,121,116,117,118,122,123,124,100,102,101,107,109,108,110,112',
'111,104,106,105,131,132,99,98,135,442,103,,,,127,128,130,125,126,129',
',,103,,,,,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118',
'122,123,124,100,102,101,107,109,108,110,112,111,104,106,105,131,132',
'99,98,135,103,127,128,130,125,126,129,,,,,,,103,127,128,130,125,126',
'129,113,114,115,119,120,121,116,117,118,122,123,124,100,102,101,107',
'109,108,110,112,111,104,106,105,131,132,99,98,135,103,,,,,,352,127,128',
'130,125,126,129,103,127,128,130,125,126,129,113,114,115,119,120,121',
'116,117,118,122,123,124,100,102,101,107,109,108,110,112,111,104,106',
'105,131,132,99,98,135,,,,,,,103,127,128,130,125,126,129,103,127,128',
'130,125,126,129,113,114,115,119,120,121,116,117,118,122,123,124,100',
'102,101,107,109,108,110,112,111,104,106,105,131,132,99,98,135,,,,,,',
'103,127,128,130,125,126,129,103,127,128,130,125,126,129,113,114,115',
'119,120,121,116,117,118,122,123,124,100,102,101,107,109,108,110,112',
'111,104,106,105,131,132,99,98,135,,,,,,,103,,,,,,,103,127,128,130,125',
'126,129,113,114,115,119,120,121,116,117,118,122,123,124,100,102,101',
'107,109,108,110,112,111,104,106,105,131,132,99,98,135,,,,,,,261,,,,',
',,103,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118,122',
'123,124,100,102,101,107,109,108,110,112,111,104,106,105,131,132,99,98',
'135,,,,,,,,,,,,,,103,127,128,130,125,126,129,113,114,115,119,120,121',
'116,117,118,122,123,124,100,102,101,107,109,108,110,112,111,104,106',
'105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128,130,125,126,129,113,114',
'115,119,120,121,116,117,118,122,123,124,100,102,101,107,109,108,110',
'112,111,104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128,130,125',
'126,129,113,114,115,119,120,121,116,117,118,122,123,124,127,128,130',
'125,126,129,113,114,115,119,120,121,116,117,118,122,123,124,,,,,,,,',
',,,,103,,,,,,,,,,,,,,,,,,103,127,128,130,125,126,129,113,114,115,119',
'120,121,116,117,118,122,123,124,100,102,101,107,109,108,110,112,111',
'104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128,130,125,126,129',
'113,114,115,119,120,121,116,117,118,122,123,124,100,102,101,107,109',
'108,110,112,111,104,106,105,131,132,99,98,135,,,,,,,352,,,,,,,103,127',
'128,130,125,126,129,113,114,115,119,120,121,116,117,118,122,123,124',
'100,102,101,107,109,108,110,112,111,104,106,105,131,132,99,98,135,,',
',,,,,,,,,,,103,127,128,130,125,126,129,113,114,115,119,120,121,116,117',
'118,122,123,124,100,102,101,107,109,108,110,112,111,104,106,105,131',
'132,99,98,135,,,,,,,,,,,,,,103,127,128,130,125,126,129,113,114,115,119',
'120,121,116,117,118,122,123,124,100,102,101,107,109,108,110,112,111',
'104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128,130,125,126,129',
'113,114,115,119,120,121,116,117,118,122,123,124,100,102,101,107,109',
'108,110,112,111,104,106,105,,,,,,,,,,,,,,,,,,,103,127,128,130,125,126',
'129,113,114,115,119,120,121,116,117,118,122,123,124,100,102,101,107',
'109,108,110,112,111,104,106,105,,,,,,,,,,,,,,,,,,,103,127,128,130,125',
'126,129,113,114,115,119,120,121,116,117,118,122,123,124,100,102,101',
'107,109,108,110,112,111,104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103',
'127,128,130,125,126,129,113,114,115,119,120,121,116,117,118,122,123',
'124,100,102,101,107,109,108,110,112,111,104,106,105,131,132,99,98,135',
',,,,,,,,,,,,,103,127,128,130,125,126,129,113,114,115,119,120,121,116',
'117,118,122,123,124,100,102,101,107,109,108,110,112,111,104,106,105',
'131,132,99,98,135,,,,,,,,,,,,,329,103,127,128,130,125,126,129,113,114',
'115,119,120,121,116,117,118,122,123,124,100,102,101,107,109,108,110',
'112,111,104,106,105,131,132,99,98,135,,,,,,,,,,332,,,333,103,127,128',
'130,125,126,129,113,114,115,119,120,121,116,117,118,122,123,124,100',
'102,101,107,109,108,110,112,111,104,106,105,131,132,99,98,135,,,,,,',
',,,,,,,103,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118',
'122,123,124,100,102,101,107,109,108,110,112,111,104,106,105,131,132',
'99,98,135,,,,,,,,,,,,,,103,127,128,130,125,126,129,113,114,115,119,120',
'121,116,117,118,122,123,124,100,102,101,107,109,108,110,112,111,104',
'106,105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128,130,125,126,129,113',
'114,115,119,120,121,116,117,118,122,123,124,100,102,101,107,109,108',
'110,112,111,104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128,130',
'125,126,129,113,114,115,119,120,121,116,117,118,122,123,124,100,102',
'101,107,109,108,110,112,111,104,106,105,131,132,99,98,135,,,,,,,,,,',
',,,103,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118,122',
'123,124,100,102,101,107,109,108,110,112,111,104,106,105,131,132,99,98',
'135,,,,,,,261,,,,,,,103,127,128,130,125,126,129,113,114,115,119,120',
'121,116,117,118,122,123,124,100,102,101,107,109,108,110,112,111,104',
'106,105,131,132,99,98,135,,,,,,,,,,387,,,,103,127,128,130,125,126,129',
'113,114,115,119,120,121,116,117,118,122,123,124,100,102,101,107,109',
'108,110,112,111,104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128',
'130,125,126,129,113,114,115,119,120,121,116,117,118,122,123,124,100',
'102,101,107,109,108,110,112,111,104,106,105,131,132,99,98,135,,,,,,',
',,,,,,,103,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118',
'122,123,124,100,102,101,107,109,108,110,112,111,104,106,105,131,132',
'99,98,135,,,,,,,,,,384,,,333,103,127,128,130,125,126,129,113,114,115',
'119,120,121,116,117,118,122,123,124,100,102,101,107,109,108,110,112',
'111,104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128,130,125,126',
'129,113,114,115,119,120,121,116,117,118,122,123,124,100,102,101,107',
'109,108,110,112,111,104,106,105,131,132,99,98,135,,,,,,,,,,,,,270,103' ]
        racc_action_table = arr = ::Array.new(6303, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'22,73,277,277,22,326,366,366,434,420,438,359,360,64,64,73,64,407,297',
'434,297,438,359,453,64,64,64,93,64,64,64,420,326,366,360,323,64,64,64',
'2,64,323,323,167,64,64,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22',
'22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,64,447,453',
'64,448,447,93,447,447,447,447,447,366,22,447,325,447,447,2,447,447,447',
'447,447,441,447,447,447,447,447,447,447,447,447,447,447,447,447,447',
'447,59,306,447,447,447,447,447,324,155,317,447,447,324,307,451,155,273',
'318,278,278,278,278,55,278,448,451,285,285,278,278,136,136,136,136,205',
'325,282,282,136,173,205,276,276,153,441,59,153,447,153,447,447,206,447',
'306,279,206,159,206,206,206,206,206,160,208,206,307,206,206,273,206',
'206,206,206,206,55,206,206,206,206,206,206,206,206,206,206,206,206,206',
'206,206,206,173,206,206,206,206,206,282,282,308,206,206,293,159,417',
'279,279,293,159,160,164,397,272,397,160,208,31,31,31,31,376,31,40,40',
'8,376,8,8,8,195,197,71,71,71,197,158,281,206,168,206,206,4,206,403,403',
'4,308,4,4,4,4,4,280,417,4,85,4,4,261,4,4,4,4,4,272,4,4,4,4,4,4,4,4,4',
'4,4,4,4,4,4,4,195,4,4,4,4,4,281,281,172,4,4,199,280,280,280,280,66,66',
'66,66,311,176,280,280,85,177,261,42,42,42,42,72,72,72,327,141,199,141',
'328,152,352,149,391,331,148,146,4,336,4,4,337,4,144,178,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,352,313',
'391,139,345,313,313,313,313,313,313,313,347,199,313,348,313,313,138',
'313,313,313,313,313,351,313,313,313,313,313,313,313,313,313,313,313',
'313,313,313,313,179,95,313,313,313,313,313,357,358,305,313,313,180,94',
'243,243,243,217,217,217,217,217,217,217,217,217,217,217,217,217,217',
'217,217,217,217,91,89,88,87,86,184,194,375,242,242,242,202,313,378,313',
'313,0,313,379,380,0,298,0,0,0,0,0,243,69,0,217,0,0,296,0,0,0,0,0,295',
'0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,242,0,0,0,0,0,392,395,294,0,0,398,399',
'215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215',
'215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,0,292',
'0,0,442,0,404,43,442,315,442,442,442,442,442,215,33,442,408,442,442',
'409,442,442,442,442,442,410,442,442,442,442,442,442,442,442,442,442',
'442,442,442,442,442,412,415,442,442,442,442,442,416,203,419,442,442',
'198,204,33,33,33,33,421,288,35,207,32,432,244,435,436,245,247,27,24',
'23,443,444,445,446,19,198,255,263,1,454,246,246,246,,,442,,442,442,',
'442,,,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198',
'198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198',
'198,198,246,425,,,,425,,425,425,425,425,425,,198,425,,425,425,,425,425',
'425,425,425,,425,425,425,425,425,425,425,425,425,425,425,425,425,425',
'425,,,425,425,425,425,425,,,,425,425,,,216,216,216,216,216,216,216,216',
'216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216',
'216,216,216,216,216,216,216,,425,,425,425,92,425,,,92,,92,92,92,92,92',
'216,,92,,92,92,,92,92,92,92,92,,92,92,92,92,,92,92,92,92,92,92,92,92',
'92,92,92,,92,92,92,92,92,,,,92,92,368,,,,,,,,,,,,,,,,,,,,,,,,,,,,,230',
'230,230,230,230,230,92,,,92,,92,368,368,368,368,368,368,368,368,368',
'368,368,368,368,368,368,368,368,368,368,368,368,368,368,368,368,368',
'368,368,368,368,368,368,368,368,368,365,230,,,,,,,137,137,,137,,368',
'137,,,,,137,137,137,,137,137,137,137,,,,,137,137,137,,137,,,,137,137',
'365,365,365,365,365,365,365,365,365,365,365,365,365,365,365,365,365',
'365,365,365,365,365,365,365,365,365,365,365,365,365,365,365,365,365',
'365,137,,,137,,137,,137,253,253,,253,,365,253,182,182,182,,253,253,253',
',253,253,253,253,,,,,253,253,253,,253,181,181,181,253,253,269,269,,269',
',,269,,,,,269,269,269,,269,269,269,269,,,,182,269,269,269,,269,,,,269',
'269,124,124,253,124,,253,124,253,,253,181,124,124,124,,124,124,124,124',
',,,,124,124,124,,124,,,,124,124,52,52,269,52,,269,52,269,269,,,52,52',
'52,,52,52,52,52,,,52,,52,52,52,,52,,,,52,52,54,54,124,54,,124,54,124',
',,,54,54,54,,54,54,54,54,,,54,,54,54,54,,54,,,,54,54,283,283,52,283',
',52,283,52,,,,283,283,283,,283,283,283,283,,,283,,283,283,283,,283,',
',,283,283,56,56,54,56,,54,56,54,,,56,56,56,56,,56,56,56,56,,,,,56,56',
'56,,56,,,,56,56,286,286,283,286,,283,286,283,,,,286,286,286,,286,286',
'286,286,,,,,286,286,286,,286,,,,286,286,58,58,56,58,,56,58,56,,,,58',
'58,58,,58,58,58,58,,,58,,58,58,58,,58,,,,58,58,210,210,286,210,,286',
'210,286,,,,210,210,210,,210,210,210,210,,,,,210,210,210,,210,,,,210',
'210,61,61,58,61,,58,61,58,,,,61,61,61,,61,61,61,61,,,,,61,61,61,,61',
',,,61,61,,,210,210,,210,,210,218,218,218,218,218,218,218,218,218,218',
'218,218,218,218,218,218,218,218,,,,,62,62,,62,,61,62,,61,,61,62,62,62',
',62,62,62,62,,,,,62,62,62,218,62,,,,62,62,63,63,,63,,,63,,,,,63,63,63',
',63,63,63,63,,,,,63,63,63,,63,,,,63,63,422,422,62,422,,62,422,62,,,',
'422,422,422,,422,422,422,422,,,,,422,422,422,,422,,,,422,422,289,289',
'63,289,,63,289,63,,,,289,289,289,,289,289,289,289,,,,,289,289,289,,289',
',,,289,289,290,290,422,290,,422,290,422,,,,290,290,290,,290,290,290',
'290,,,,,290,290,290,,290,,,,290,290,381,381,289,381,,289,381,289,,,',
'381,381,381,,381,381,381,381,,,,,381,381,381,,381,,,,381,381,,,290,290',
',290,,290,,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219',
'219,219,219,,,,,424,424,,424,381,381,424,381,,381,,424,424,424,,424',
'424,424,424,,,,,424,424,424,219,424,,,,424,424,256,256,,256,,,256,,',
',,256,256,256,,256,256,256,256,,,256,,256,256,256,,256,,,,256,256,77',
'77,424,77,,424,77,424,,,,77,77,77,,77,77,77,77,,,77,,77,77,77,,77,,',
',77,77,79,79,256,79,,256,79,256,,,,79,79,79,,79,79,79,79,,,,,79,79,79',
',79,,,,79,79,80,80,77,80,,77,80,77,,,,80,80,80,,80,80,80,80,,,,,80,80',
'80,,80,,,,80,80,81,81,79,81,,79,81,79,,,,81,81,81,,81,81,81,81,,,,,81',
'81,81,,81,,,,81,81,84,84,80,84,,80,84,80,,,,84,84,84,,84,84,84,84,,',
',,84,84,84,,84,,,,84,84,189,189,81,189,,81,189,81,,,,189,189,189,,189',
'189,189,189,,,,,189,189,189,,189,,,,189,189,188,188,84,188,,84,188,84',
',,,188,188,188,,188,188,188,188,,,,,188,188,188,,188,,,,188,188,262',
'262,189,262,,189,262,189,,,,262,262,262,,262,262,262,262,,,,,262,262',
'262,,262,,,,262,262,29,29,188,29,,188,29,188,,,,29,29,29,,29,29,29,29',
',,,,29,29,29,,29,,,,29,29,,,262,262,,262,,262,221,221,221,221,221,221',
'221,221,221,221,221,221,221,221,221,221,221,221,,,,,265,265,,265,,29',
'265,,29,,29,265,265,265,,265,265,265,265,,,,,265,265,265,221,265,,,',
'265,265,187,187,,187,,,187,,,,,187,187,187,,187,187,187,187,,,,,187',
'187,187,,187,,,,187,187,267,267,265,267,,265,267,265,,,,267,267,267',
',267,267,267,267,,,,,267,267,267,,267,,,,267,267,186,186,187,186,,187',
'186,187,,,,186,186,186,,186,186,186,186,,,,,186,186,186,,186,,,,186',
'186,,,267,,,267,267,267,222,222,222,222,222,222,222,222,222,222,222',
'222,222,222,222,222,222,222,,,,,183,183,,183,,186,183,,186,,186,183',
'183,183,,183,183,183,183,,,,,183,183,183,222,183,,,,183,183,354,354',
',354,,,354,,,,,354,354,354,,354,354,354,354,,,,,354,354,354,,354,,,',
'354,354,309,309,183,309,,183,309,183,,,,309,309,309,,309,309,309,309',
',,,,309,309,309,,309,,,,309,309,,,354,354,,354,,354,223,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,223,223,223,,,,,98,98,,98',
',309,98,,309,,309,98,98,98,,98,98,98,98,,,,,98,98,98,223,98,,,,98,98',
'99,99,,99,,,99,,,,,99,99,99,,99,99,99,99,,,,,99,99,99,,99,,,,99,99,100',
'100,98,100,,98,100,98,,,,100,100,100,,100,100,100,100,,,,,100,100,100',
',100,,,,100,100,101,101,99,101,,99,101,99,,,,101,101,101,,101,101,101',
'101,,,,,101,101,101,,101,,,,101,101,102,102,100,102,,100,102,100,,,',
'102,102,102,,102,102,102,102,,,,,102,102,102,,102,,,,102,102,103,103',
'101,103,,101,103,101,,,,103,103,103,,103,103,103,103,,,,,103,103,103',
',103,,,,103,103,104,104,102,104,,102,104,102,,,,104,104,104,,104,104',
'104,104,,,,,104,104,104,,104,,,,104,104,105,105,103,105,,103,105,103',
',,,105,105,105,,105,105,105,105,,,,,105,105,105,,105,,,,105,105,106',
'106,104,106,,104,106,104,,,,106,106,106,,106,106,106,106,,,,,106,106',
'106,,106,,,,106,106,107,107,105,107,,105,107,105,,,,107,107,107,,107',
'107,107,107,,,,,107,107,107,,107,,,,107,107,108,108,106,108,,106,108',
'106,,,,108,108,108,,108,108,108,108,,,,,108,108,108,,108,,,,108,108',
'109,109,107,109,,107,109,107,,,,109,109,109,,109,109,109,109,,,,,109',
'109,109,,109,,,,109,109,110,110,108,110,,108,110,108,,,,110,110,110',
',110,110,110,110,,,,,110,110,110,,110,,,,110,110,111,111,109,111,,109',
'111,109,,,,111,111,111,,111,111,111,111,,,,,111,111,111,,111,,,,111',
'111,112,112,110,112,,110,112,110,,,,112,112,112,,112,112,112,112,,,',
',112,112,112,,112,,,,112,112,113,113,111,113,,111,113,111,,,,113,113',
'113,,113,113,113,113,,,,,113,113,113,,113,,,,113,113,114,114,112,114',
',112,114,112,,,,114,114,114,,114,114,114,114,,,,,114,114,114,,114,,',
',114,114,115,115,113,115,,113,115,113,,,,115,115,115,,115,115,115,115',
',,,,115,115,115,,115,,,,115,115,116,116,114,116,,114,116,114,,,,116',
'116,116,,116,116,116,116,,,,,116,116,116,,116,,,,116,116,117,117,115',
'117,,115,117,115,,,,117,117,117,,117,117,117,117,,,,,117,117,117,,117',
',,,117,117,118,118,116,118,,116,118,116,,,,118,118,118,,118,118,118',
'118,,,,,118,118,118,,118,,,,118,118,119,119,117,119,,117,119,117,,,',
'119,119,119,,119,119,119,119,,,,,119,119,119,,119,,,,119,119,120,120',
'118,120,,118,120,118,,,,120,120,120,,120,120,120,120,,,,,120,120,120',
',120,,,,120,120,121,121,119,121,,119,121,119,,,,121,121,121,,121,121',
'121,121,,,,,121,121,121,,121,,,,121,121,122,122,120,122,,120,122,120',
',,,122,122,122,,122,122,122,122,,,,,122,122,122,,122,,,,122,122,321',
'321,121,321,,121,321,121,,,,321,321,321,,321,321,321,321,,,,,321,321',
'321,,321,,,,321,321,405,405,122,405,,122,405,122,,,,405,405,405,,405',
'405,405,405,,,,,405,405,405,,405,,,,405,405,125,125,321,125,,321,125',
'321,,,,125,125,125,,125,125,125,125,,,,,125,125,125,,125,,,,125,125',
'126,126,405,126,,405,126,405,,,,126,126,126,,126,126,126,126,,,,,126',
'126,126,,126,,,,126,126,127,127,125,127,,125,127,125,,,,127,127,127',
',127,127,127,127,,,,,127,127,127,,127,,,,127,127,128,128,126,128,,126',
'128,126,,,,128,128,128,,128,128,128,128,,,,,128,128,128,,128,,,,128',
'128,129,129,127,129,,127,129,127,,,,129,129,129,,129,129,129,129,,,',
',129,129,129,,129,,,,129,129,130,130,128,130,,128,130,128,,,,130,130',
'130,,130,130,130,130,,,,,130,130,130,,130,,,,130,130,131,131,129,131',
',129,131,129,,,,131,131,131,,131,131,131,131,,,,,131,131,131,,131,,',
',131,131,132,132,130,132,,130,132,130,,,,132,132,132,,132,132,132,132',
',,,,132,132,132,,132,,,,132,132,133,133,131,133,,131,133,131,,,,133',
'133,133,,133,133,133,133,,,,,133,133,133,,133,,,,133,133,134,134,132',
'134,,132,134,132,,,,134,134,134,,134,134,134,134,,,,,134,134,134,,134',
',,,134,134,135,135,133,135,,133,135,133,,,,135,135,135,,135,135,135',
'135,,,,,135,135,135,,135,,,,135,135,310,310,134,310,,134,310,134,,,',
'310,310,310,,310,310,310,310,,,,,310,310,310,,310,,,,310,310,270,270',
'135,270,,135,270,135,,,,270,270,270,,270,270,270,270,,,,,270,270,270',
',270,,,,270,270,174,174,310,174,,310,174,310,,,,174,174,174,,174,174',
'174,174,,,,,174,174,174,,174,,,,174,174,312,312,270,312,,270,312,270',
',,,312,312,312,,312,312,312,312,,,,,312,312,312,,312,,,,312,312,,,174',
'174,,174,,174,224,224,224,224,224,224,224,224,224,224,224,224,224,224',
'224,224,224,224,,,,,171,171,,171,,312,171,,312,,312,171,171,171,,171',
'171,171,171,,,171,,171,171,171,224,171,,,,171,171,169,169,,169,,,169',
',,,,169,169,169,,169,169,169,169,,,,,169,169,169,,169,,,,169,169,271',
'271,171,271,,171,271,171,,,,271,271,271,,271,271,271,271,,,,,271,271',
'271,,271,,,,271,271,,,169,169,,169,,169,,225,225,225,225,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,,,,,316,316,,316,271,271',
'316,271,,271,,316,316,316,,316,316,316,316,,,,,316,316,316,225,316,',
',,316,316,145,145,,145,,,145,,,,,145,145,145,,145,145,145,145,,,,,145',
'145,145,,145,,,,145,145,319,319,316,319,,316,319,316,,,,319,319,319',
',319,319,319,319,,,,,319,319,319,,319,,,,319,319,,,145,145,,145,,145',
'226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226',
'226,,,,,333,333,,333,,319,333,,319,,319,333,333,333,,333,333,333,333',
',,333,,333,333,333,226,333,,,,333,333,163,163,,163,,,163,,,,,163,163',
'163,,163,163,163,163,,,,,163,163,163,,163,,,,163,163,329,329,333,329',
',333,329,333,,,,329,329,329,,329,329,329,329,,,,,329,329,329,,329,,',
',329,329,,,163,163,,163,,163,227,227,227,227,227,227,227,227,227,227',
'227,227,227,227,227,227,227,227,,,,,162,162,,162,,329,162,,329,,329',
'162,162,162,,162,162,162,162,,,,,162,162,162,227,162,,,,162,162,320',
'320,,320,,,320,,,,,320,320,320,,320,320,320,320,,,,,320,320,320,,320',
',,,320,320,123,123,162,123,,162,123,162,,,,123,123,123,,123,123,123',
'123,,,,,123,123,123,,123,,,,123,123,140,140,320,140,,320,,320,,,,140',
'140,140,,140,140,140,140,,,,,140,140,140,,140,,,,140,140,57,57,123,57',
',123,,123,,,,57,57,57,,57,57,57,,,,,,57,57,57,,57,,,,57,57,97,97,140',
'97,,140,,,,,,97,97,97,,97,97,97,97,,,,,97,97,97,,97,,,,97,97,,,57,,',
'57,,,,,,,,,,,,,,,,201,,,,,,232,232,232,232,232,232,,,97,,,97,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,372',
'232,,,,,233,233,233,233,233,233,,201,,,,,372,372,372,372,372,372,372',
'372,372,372,372,372,372,372,372,372,372,372,372,372,372,372,372,372',
'372,372,372,372,372,372,372,372,372,372,372,373,233,,,,,234,234,234',
'234,234,234,,372,,,,,373,373,373,373,373,373,373,373,373,373,373,373',
'373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373',
'373,373,373,373,373,373,371,234,,,,,235,235,235,235,235,235,,373,,,',
',371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371',
'371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371',
'371,200,235,,,,,236,236,236,236,236,236,,371,,,,,200,200,200,200,200',
'200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200',
'200,200,200,200,200,200,200,200,200,200,200,200,200,440,236,,,,,237',
'237,237,237,237,237,,200,,,,,440,440,440,440,440,440,440,440,440,440',
'440,440,440,440,440,440,440,440,440,440,440,440,440,440,440,440,440',
'440,440,440,440,440,440,440,440,426,237,,,,238,238,238,238,238,238,',
',440,,,,,426,426,426,426,426,426,426,426,426,426,426,426,426,426,426',
'426,426,426,426,426,426,426,426,426,426,426,426,426,426,426,426,426',
'426,426,426,238,239,239,239,239,239,239,,,,,,,426,291,291,291,291,291',
'291,291,291,291,291,291,291,291,291,291,291,291,291,291,291,291,291',
'291,291,291,291,291,291,291,291,291,291,291,291,291,239,,,,,,291,240',
'240,240,240,240,240,291,383,383,383,383,383,383,383,383,383,383,383',
'383,383,383,383,383,383,383,383,383,383,383,383,383,383,383,383,383',
'383,383,383,383,383,383,383,,,,,,,240,241,241,241,241,241,241,383,386',
'386,386,386,386,386,386,386,386,386,386,386,386,386,386,386,386,386',
'386,386,386,386,386,386,386,386,386,386,386,386,386,386,386,386,386',
',,,,,,241,231,231,231,231,231,231,386,301,301,301,301,301,301,301,301',
'301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301',
'301,301,301,301,301,301,301,301,301,301,,,,,,,231,,,,,,,301,287,287',
'287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287',
'287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,,,,',
',,287,,,,,,,287,196,196,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,,,,,,,,,,,,,,196,302,302,302,302,302,302,302,302',
'302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302',
'302,302,302,302,302,302,302,302,302,302,,,,,,,,,,,,,,302,220,220,220',
'220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220',
'220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,,,,,,,,',
',,,,,220,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228',
'228,228,228,229,229,229,229,229,229,229,229,229,229,229,229,229,229',
'229,229,229,229,,,,,,,,,,,,,228,,,,,,,,,,,,,,,,,,229,363,363,363,363',
'363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363',
'363,363,363,363,363,363,363,363,363,363,363,363,363,363,,,,,,,,,,,,',
',363,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300',
'300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300',
'300,300,,,,,,,300,,,,,,,300,303,303,303,303,303,303,303,303,303,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303',
'303,303,303,303,303,303,303,303,,,,,,,,,,,,,,303,284,284,284,284,284',
'284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284',
'284,284,284,284,284,284,284,284,284,284,284,284,284,,,,,,,,,,,,,,284',
'362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362',
'362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362',
'362,,,,,,,,,,,,,,362,248,248,248,248,248,248,248,248,248,248,248,248',
'248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248',
'248,,,,,,,,,,,,,,,,,,,248,249,249,249,249,249,249,249,249,249,249,249',
'249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249',
'249,249,,,,,,,,,,,,,,,,,,,249,250,250,250,250,250,250,250,250,250,250',
'250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250',
'250,250,250,250,250,250,250,250,,,,,,,,,,,,,,250,251,251,251,251,251',
'251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251',
'251,251,251,251,251,251,251,251,251,251,251,251,251,,,,,,,,,,,,,,251',
'252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252',
'252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252',
'252,,,,,,,,,,,,,252,252,254,254,254,254,254,254,254,254,254,254,254',
'254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254',
'254,254,254,254,254,254,254,,,,,,,,,,254,,,254,254,304,304,304,304,304',
'304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304',
'304,304,304,304,304,304,304,304,304,304,304,304,304,,,,,,,,,,,,,,304',
'350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350',
'350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350',
'350,,,,,,,,,,,,,,350,439,439,439,439,439,439,439,439,439,439,439,439',
'439,439,439,439,439,439,439,439,439,439,439,439,439,439,439,439,439',
'439,439,439,439,439,439,,,,,,,,,,,,,,439,344,344,344,344,344,344,344',
'344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344',
'344,344,344,344,344,344,344,344,344,344,344,,,,,,,,,,,,,,344,341,341',
'341,341,341,341,341,341,341,341,341,341,341,341,341,341,341,341,341',
'341,341,341,341,341,341,341,341,341,341,341,341,341,341,341,341,,,,',
',,,,,,,,,341,143,143,143,143,143,143,143,143,143,143,143,143,143,143',
'143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143',
'143,143,143,143,,,,,,,143,,,,,,,143,339,339,339,339,339,339,339,339',
'339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339',
'339,339,339,339,339,339,339,339,339,339,,,,,,,,,,339,,,,339,166,166',
'166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166',
'166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,,,,',
',,,,,,,,,166,335,335,335,335,335,335,335,335,335,335,335,335,335,335',
'335,335,335,335,335,335,335,335,335,335,335,335,335,335,335,335,335',
'335,335,335,335,,,,,,,,,,,,,,335,330,330,330,330,330,330,330,330,330',
'330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330',
'330,330,330,330,330,330,330,330,330,,,,,,,,,,330,,,330,330,154,154,154',
'154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154',
'154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,,,,,,,,',
',,,,,154,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157',
'157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157',
'157,157,157,,,,,,,,,,,,,157,157' ]
        racc_action_check = arr = ::Array.new(6303, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   480,   651,     9,   nil,   260,   nil,   nil,   nil,   204,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   560,
   nil,   nil,    -2,   551,   588,   nil,   nil,   553,   nil,  1935,
   nil,   154,   591,   542,   nil,   589,   nil,   nil,   nil,   nil,
   211,   nil,   246,   484,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1082,   nil,  1115,   102,  1181,  4225,  1247,    78,
   nil,  1313,  1376,  1409,    -7,   nil,   235,   nil,   nil,   453,
   nil,   209,   290,   -42,   nil,   nil,   nil,  1671,   nil,  1704,
  1737,  1770,   nil,   nil,  1803,   235,   440,   426,   425,   379,
   nil,   466,   790,    -3,   403,   341,   nil,  4258,  2289,  2322,
  2355,  2388,  2421,  2454,  2487,  2520,  2553,  2586,  2619,  2652,
  2685,  2718,  2751,  2784,  2817,  2850,  2883,  2916,  2949,  2982,
  3015,  3048,  3081,  4159,  1049,  3180,  3213,  3246,  3279,  3312,
  3345,  3378,  3411,  3444,  3477,  3510,    68,   907,   367,   353,
  4192,   248,   nil,  5912,   266,  3868,   305,   nil,   304,   301,
   nil,   nil,   250,    77,  6157,    42,   nil,  6206,   168,   136,
   142,   nil,  4093,  3997,   144,   nil,  6010,   -45,   217,  3738,
   nil,  3705,   219,   119,  3609,   nil,   236,   284,   268,   390,
   347,   983,   962,  2160,   380,   nil,  2097,  2031,  1869,  1836,
   nil,   nil,   nil,   nil,   431,   209,  4914,   249,   618,   308,
  4514,  4302,   461,   603,   608,   148,   170,   591,   143,   nil,
  1280,   nil,   nil,   nil,   nil,   487,   707,   400,  1326,  1555,
  5012,  1948,  2110,  2239,  3655,  3785,  3914,  4043,  5061,  5079,
   824,  4809,  4290,  4343,  4396,  4449,  4502,  4555,  4607,  4656,
  4711,  4760,   426,   397,   539,   542,   605,   543,  5373,  5422,
  5471,  5520,  5569,   983,  5618,   557,  1638,   nil,   nil,   nil,
   nil,   237,  1902,   561,   nil,  1998,   nil,  2064,   nil,  1016,
  3576,  3771,   192,    96,   nil,   nil,    69,   -91,    56,   133,
   231,   215,   125,  1148,  5275,    54,  1214,  4865,   541,  1475,
  1508,  4669,   480,   136,   439,   417,   410,   -69,   444,   nil,
  5177,  4816,  4963,  5226,  5667,   386,    81,    93,   179,  2226,
  3543,   315,  3642,   390,   nil,   570,  3835,   123,   131,  3901,
  4126,  3114,   nil,    28,    98,    66,   -25,   248,   251,  4030,
  6108,   253,   nil,  3964,   nil,  6059,   307,   261,   nil,  5961,
   nil,  5863,   nil,   nil,  5814,   306,   nil,   309,   312,   nil,
  5716,   326,   300,   nil,  2193,   nil,   nil,   397,   396,   -19,
    -7,   nil,  5324,  5128,   nil,   912,     3,   nil,   836,   nil,
   nil,  4461,  4355,  4408,   nil,   443,   211,   nil,   449,   477,
   442,  1541,   nil,  4718,   nil,   nil,  4767,   nil,   nil,   nil,
   nil,   302,   439,   nil,   nil,   522,   nil,   145,   444,   451,
   nil,   nil,   nil,   261,   544,  3147,   nil,    10,   579,   582,
   588,   nil,   581,   nil,   nil,   571,   529,   183,   nil,   579,
   -10,   588,  1442,   nil,  1605,   700,  4620,   nil,   nil,   nil,
   nil,   nil,   604,   nil,   -22,   547,   554,   nil,   -20,  5765,
  4567,    75,   570,   636,   637,   604,   639,    80,    55,   nil,
   nil,   105,   nil,    -7,   645,   nil ]

racc_action_default = [
    -1,  -249,    -2,    -3,    -6,    -8,    -9,   -10,   -11,   -12,
   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,
   -23,   -24,   -25,   -26,   -27,   -29,   -30,   -31,   -32,  -115,
   -34,   -35,   -36,   -37,   -38,   -39,   -40,   -49,   -50,   -51,
   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,   -60,   -63,
   -64,   -65,   -69,   -72,   -75,  -249,  -115,  -115,  -118,  -115,
  -114,  -115,  -115,  -115,  -115,  -161,  -249,  -170,  -172,  -249,
  -176,  -115,  -115,  -115,  -192,  -193,  -194,  -209,  -211,  -115,
  -115,  -115,  -220,  -221,  -115,  -249,  -249,  -115,  -115,  -247,
  -248,  -249,    -5,    -7,  -249,  -249,  -180,  -115,  -115,  -115,
  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,
  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,
  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,
  -115,  -115,  -115,  -115,  -115,  -115,   -83,  -115,   -28,  -249,
  -115,   -26,   -31,  -249,  -249,  -115,   -80,   -94,   -79,   -81,
   -61,   -62,  -175,  -249,   -70,  -249,   -76,  -249,  -249,  -173,
  -177,  -181,  -115,  -115,  -101,  -102,  -120,   -35,   -37,  -115,
   -54,   -69,  -249,  -249,  -115,  -107,  -119,  -115,  -109,  -249,
  -157,  -158,  -159,  -115,  -249,  -160,  -115,  -115,  -115,  -115,
  -174,  -178,  -179,  -116,  -249,  -249,  -210,  -206,  -249,  -249,
  -249,  -249,  -249,  -249,  -249,  -229,  -235,  -249,  -249,  -245,
  -115,   456,    -4,  -173,  -163,  -122,  -123,  -124,  -125,  -126,
  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,
  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,
  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,
  -214,  -217,  -249,  -115,  -249,  -249,   -93,   -97,   -96,  -162,
   -41,   -33,  -115,  -249,   -95,  -115,   -67,  -115,   -73,  -115,
  -115,  -115,  -249,  -182,  -183,  -184,   -29,   -30,   -35,   -36,
   -37,   -39,   -52,   -75,  -249,  -249,  -115,  -120,  -249,  -115,
  -115,  -120,  -249,  -249,   -83,  -249,  -249,  -249,  -115,  -110,
  -249,  -164,  -165,  -166,  -167,  -249,  -196,  -195,  -199,  -115,
  -115,  -249,  -115,  -115,  -236,  -249,  -115,  -249,  -249,  -115,
  -115,  -115,  -226,  -249,  -249,  -234,  -249,  -105,  -249,  -115,
  -249,  -249,   -86,   -91,   -87,   -92,   -82,   -84,   -99,  -249,
   -68,   -71,   -74,   -77,   -78,  -249,  -185,  -249,  -249,  -100,
  -121,  -249,  -249,  -103,  -115,  -106,  -108,  -249,  -115,  -249,
  -200,  -197,  -207,  -208,  -212,  -249,  -234,  -215,  -249,  -219,
  -222,  -249,  -249,  -249,  -227,  -249,  -249,  -230,  -249,  -249,
  -115,  -115,  -246,  -218,   -88,   -89,   -90,   -66,   -98,  -186,
  -187,  -113,  -249,  -111,  -117,  -249,  -198,  -249,  -249,  -201,
  -202,  -213,  -237,  -238,  -249,  -115,  -216,  -249,  -249,  -249,
  -249,  -232,  -249,  -231,  -243,  -249,  -249,  -112,  -188,  -199,
  -249,  -199,  -115,  -239,  -115,  -115,  -249,  -223,  -224,  -225,
  -228,  -233,  -249,  -104,  -249,  -249,  -203,  -204,  -249,  -205,
  -249,  -240,  -115,  -249,  -249,  -199,  -249,  -115,  -241,  -244,
  -189,  -249,  -190,  -242,  -249,  -191 ]

racc_goto_table = [
    92,     2,    27,   152,   178,    93,    27,   153,   146,   205,
   167,   149,   168,   400,   359,   255,    95,   378,    96,   276,
   170,   402,     1,   279,   281,   311,   315,   185,   209,   277,
   164,   195,   343,   204,   397,   348,   197,   138,   323,   212,
   403,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   203,    94,
   nil,   nil,   nil,   nil,   nil,   152,   nil,    22,   423,   nil,
   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   412,
   nil,   nil,   nil,   437,   nil,   282,   nil,   160,   nil,    95,
    95,   191,   192,   nil,   nil,   nil,   143,   275,   nil,   286,
   nil,    92,   nil,   nil,    27,   158,   nil,   nil,   173,   214,
   179,   nil,   nil,   nil,   nil,   nil,   175,   nil,   nil,   154,
   nil,   157,    94,    94,   193,   278,   nil,   280,   180,   181,
   182,   nil,   297,   317,   318,   434,   293,   438,   207,   208,
   nil,   331,   294,   nil,   196,   nil,   198,   199,   200,   nil,
   276,   201,   259,   276,   279,   281,   nil,   279,   281,    22,
   277,   451,   nil,   277,   nil,   215,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
   230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
   250,   251,   252,   263,   254,   160,   282,   141,   nil,   282,
   275,   nil,   nil,   nil,   nil,   nil,   nil,   325,    27,   nil,
   286,   288,   347,   295,   nil,   nil,   nil,   307,   179,   284,
   287,   337,   296,   nil,   nil,   172,   291,   nil,   154,   nil,
   307,   287,   184,   nil,   275,   308,   278,   336,   280,   278,
   300,   280,   nil,   301,   302,   303,   304,   377,   327,   379,
   nil,   nil,   nil,   nil,   nil,   146,   nil,   149,   328,   nil,
   nil,   nil,   nil,    22,   nil,   184,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   395,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   407,   408,   409,   nil,   410,   411,
   nil,   413,   nil,   nil,   nil,   nil,   nil,   nil,   184,   nil,
   330,   nil,   337,   335,   366,    27,   nil,   nil,   nil,   345,
   nil,   nil,   339,    92,   341,   nil,   157,   344,   336,   nil,
   nil,   141,   nil,   nil,   nil,   431,   nil,   141,   351,   357,
   157,   nil,   141,   284,   nil,   nil,   350,   nil,   nil,   nil,
   nil,   141,   nil,   nil,   nil,   443,   nil,   444,   nil,   nil,
   nil,   446,   nil,   nil,    92,   nil,   362,   363,   nil,   365,
    22,   nil,   nil,   368,   454,   nil,   371,   372,   373,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   383,   nil,   nil,   nil,
   386,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   394,
   nil,   nil,   392,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   415,   nil,   nil,   nil,   nil,   441,    27,   nil,   416,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    92,
   nil,   nil,   nil,   448,    27,   nil,    92,   nil,   453,    27,
   nil,    92,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   426,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   439,
   nil,   440,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,    22 ]

racc_goto_check = [
     4,     2,    28,    50,    58,     2,    28,    45,    49,    67,
    31,    49,    33,    69,    66,    52,    42,    40,    62,    26,
    41,    73,     1,    32,    35,    71,    71,    60,    57,    27,
    56,    59,    48,    44,    68,    37,    70,    25,    72,     3,
    74,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    41,    53,
   nil,   nil,   nil,   nil,   nil,    50,   nil,    22,    73,   nil,
   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,
   nil,   nil,   nil,    69,   nil,    38,   nil,    63,   nil,    42,
    42,    62,    62,   nil,   nil,   nil,    22,    64,   nil,    64,
   nil,     4,   nil,   nil,    28,    54,   nil,   nil,    53,    28,
    53,   nil,   nil,   nil,   nil,   nil,    55,   nil,   nil,    22,
   nil,    22,    53,    53,    53,    31,   nil,    33,    22,    22,
    22,   nil,    58,    67,    67,    66,    45,    66,    53,    53,
   nil,    52,    50,   nil,    22,   nil,    22,    22,    22,   nil,
    26,    22,    28,    26,    32,    35,   nil,    32,    35,    22,
    27,    66,   nil,    27,   nil,    22,    22,    22,    22,    22,
    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
    22,    22,    22,    55,    22,    63,    38,    23,   nil,    38,
    64,   nil,   nil,   nil,   nil,   nil,   nil,     2,    28,   nil,
    64,    55,    64,    54,   nil,   nil,   nil,    63,    53,    22,
    22,    50,    55,   nil,   nil,    23,    22,   nil,    22,   nil,
    63,    22,    23,   nil,    64,    54,    31,    49,    33,    31,
    22,    33,   nil,    22,    22,    22,    22,    67,    54,    67,
   nil,   nil,   nil,   nil,   nil,    49,   nil,    49,    55,   nil,
   nil,   nil,   nil,    22,   nil,    23,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    67,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    67,    67,    67,   nil,    67,    67,
   nil,    67,   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,
    22,   nil,    50,    22,     2,    28,   nil,   nil,   nil,    55,
   nil,   nil,    22,     4,    22,   nil,    22,    22,    49,   nil,
   nil,    23,   nil,   nil,   nil,    67,   nil,    23,    55,    53,
    22,   nil,    23,    22,   nil,   nil,    22,   nil,   nil,   nil,
   nil,    23,   nil,   nil,   nil,    67,   nil,    67,   nil,   nil,
   nil,    67,   nil,   nil,     4,   nil,    22,    22,   nil,    22,
    22,   nil,   nil,    22,    67,   nil,    22,    22,    22,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,
    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    53,
   nil,   nil,    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    53,   nil,   nil,   nil,   nil,     2,    28,   nil,    55,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,
   nil,   nil,   nil,     2,    28,   nil,     4,   nil,     2,    28,
   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,    22,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,    22 ]

racc_goto_pointer = [
   nil,    22,     1,   -53,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    57,   168,   nil,    13,  -143,  -133,     2,   nil,
   nil,   -47,  -139,   -45,   nil,  -138,   nil,  -251,   -87,   nil,
  -307,   -37,     8,   nil,   -52,   -45,   nil,   nil,  -237,   -24,
   -40,   nil,  -122,    41,    40,    48,   -26,   -60,   -55,   -42,
   -37,   nil,    10,    22,   -73,   nil,  -294,   -77,  -326,  -347,
   -41,  -173,  -167,  -345,  -326 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,   166,    23,    24,   nil,    25,    26,   142,    28,
    30,    31,    32,    33,    34,    35,    36,   285,    40,    39,
    41,    42,    43,    51,    67,   nil,    53,   155,   156,   148,
   136,    68,   nil,    55,   nil,   292,   176,   nil,   nil,   nil,
    65,    66,    70,   273,   161,    73,   nil,   314,   nil,   nil,
   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 98, :_reduce_1,
  1, 98, :_reduce_2,
  1, 99, :_reduce_3,
  3, 99, :_reduce_4,
  2, 99, :_reduce_5,
  1, 99, :_reduce_6,
  2, 99, :_reduce_7,
  1, 100, :_reduce_8,
  1, 100, :_reduce_9,
  1, 100, :_reduce_10,
  1, 100, :_reduce_11,
  1, 100, :_reduce_12,
  1, 100, :_reduce_13,
  1, 100, :_reduce_14,
  1, 100, :_reduce_15,
  1, 100, :_reduce_16,
  1, 100, :_reduce_17,
  1, 100, :_reduce_18,
  1, 100, :_reduce_19,
  1, 100, :_reduce_20,
  1, 100, :_reduce_21,
  1, 100, :_reduce_22,
  1, 100, :_reduce_23,
  1, 100, :_reduce_24,
  1, 100, :_reduce_25,
  1, 119, :_reduce_26,
  1, 119, :_reduce_27,
  2, 119, :_reduce_28,
  1, 119, :_reduce_29,
  1, 119, :_reduce_30,
  1, 119, :_reduce_31,
  1, 119, :_reduce_32,
  3, 119, :_reduce_33,
  1, 120, :_reduce_34,
  1, 120, :_reduce_35,
  1, 120, :_reduce_36,
  1, 120, :_reduce_37,
  1, 120, :_reduce_38,
  1, 120, :_reduce_39,
  1, 120, :_reduce_40,
  3, 120, :_reduce_41,
  1, 134, :_reduce_42,
  1, 134, :_reduce_43,
  1, 134, :_reduce_44,
  1, 134, :_reduce_45,
  1, 134, :_reduce_46,
  1, 134, :_reduce_47,
  1, 134, :_reduce_48,
  1, 101, :_reduce_49,
  1, 101, :_reduce_50,
  1, 131, :_reduce_51,
  1, 131, :_reduce_52,
  1, 131, :_reduce_53,
  1, 131, :_reduce_54,
  1, 131, :_reduce_55,
  1, 131, :_reduce_56,
  1, 131, :_reduce_57,
  1, 136, :_reduce_58,
  1, 135, :_reduce_59,
  1, 135, :_reduce_60,
  2, 135, :_reduce_61,
  2, 135, :_reduce_62,
  1, 137, :_reduce_63,
  1, 139, :_reduce_64,
  1, 138, :_reduce_65,
  5, 141, :_reduce_66,
  3, 140, :_reduce_67,
  4, 140, :_reduce_68,
  0, 142, :_reduce_69,
  1, 142, :_reduce_70,
  3, 142, :_reduce_71,
  1, 121, :_reduce_72,
  3, 143, :_reduce_73,
  4, 143, :_reduce_74,
  0, 144, :_reduce_75,
  1, 144, :_reduce_76,
  3, 144, :_reduce_77,
  3, 145, :_reduce_78,
  2, 128, :_reduce_79,
  2, 128, :_reduce_80,
  2, 128, :_reduce_81,
  4, 128, :_reduce_82,
  2, 129, :_reduce_83,
  4, 129, :_reduce_84,
  2, 148, :_reduce_85,
  3, 147, :_reduce_86,
  3, 147, :_reduce_87,
  4, 147, :_reduce_88,
  4, 147, :_reduce_89,
  3, 149, :_reduce_90,
  2, 149, :_reduce_91,
  2, 149, :_reduce_92,
  1, 149, :_reduce_93,
  1, 146, :_reduce_94,
  2, 146, :_reduce_95,
  2, 122, :_reduce_96,
  2, 122, :_reduce_97,
  5, 132, :_reduce_98,
  4, 132, :_reduce_99,
  4, 132, :_reduce_100,
  2, 132, :_reduce_101,
  2, 132, :_reduce_102,
  4, 132, :_reduce_103,
  5, 154, :_reduce_104,
  2, 154, :_reduce_105,
  4, 114, :_reduce_106,
  2, 114, :_reduce_107,
  4, 115, :_reduce_108,
  2, 115, :_reduce_109,
  2, 155, :_reduce_110,
  4, 155, :_reduce_111,
  6, 102, :_reduce_112,
  5, 102, :_reduce_113,
  1, 150, :_reduce_114,
  0, 150, :_reduce_115,
  1, 156, :_reduce_116,
  4, 156, :_reduce_117,
  0, 152, :_reduce_118,
  1, 152, :_reduce_119,
  1, 153, :_reduce_120,
  3, 153, :_reduce_121,
  3, 123, :_reduce_122,
  3, 123, :_reduce_123,
  3, 123, :_reduce_124,
  3, 123, :_reduce_125,
  3, 123, :_reduce_126,
  3, 123, :_reduce_127,
  3, 123, :_reduce_128,
  3, 123, :_reduce_129,
  3, 123, :_reduce_130,
  3, 123, :_reduce_131,
  3, 123, :_reduce_132,
  3, 123, :_reduce_133,
  3, 123, :_reduce_134,
  3, 123, :_reduce_135,
  3, 123, :_reduce_136,
  3, 123, :_reduce_137,
  3, 123, :_reduce_138,
  3, 123, :_reduce_139,
  3, 123, :_reduce_140,
  3, 123, :_reduce_141,
  3, 123, :_reduce_142,
  3, 123, :_reduce_143,
  3, 123, :_reduce_144,
  3, 123, :_reduce_145,
  3, 123, :_reduce_146,
  3, 123, :_reduce_147,
  3, 123, :_reduce_148,
  3, 123, :_reduce_149,
  3, 123, :_reduce_150,
  3, 123, :_reduce_151,
  3, 123, :_reduce_152,
  3, 123, :_reduce_153,
  3, 123, :_reduce_154,
  3, 123, :_reduce_155,
  3, 123, :_reduce_156,
  2, 127, :_reduce_157,
  2, 127, :_reduce_158,
  2, 127, :_reduce_159,
  2, 125, :_reduce_160,
  1, 125, :_reduce_161,
  3, 116, :_reduce_162,
  3, 116, :_reduce_163,
  3, 157, :_reduce_164,
  3, 157, :_reduce_165,
  3, 157, :_reduce_166,
  3, 157, :_reduce_167,
  1, 158, :_reduce_168,
  1, 158, :_reduce_169,
  1, 158, :_reduce_170,
  1, 158, :_reduce_171,
  1, 158, :_reduce_172,
  2, 159, :_reduce_173,
  2, 159, :_reduce_174,
  2, 159, :_reduce_175,
  1, 130, :_reduce_176,
  2, 130, :_reduce_177,
  2, 105, :_reduce_178,
  2, 105, :_reduce_179,
  2, 105, :_reduce_180,
  1, 160, :_reduce_181,
  2, 160, :_reduce_182,
  2, 160, :_reduce_183,
  2, 160, :_reduce_184,
  3, 161, :_reduce_185,
  4, 161, :_reduce_186,
  4, 161, :_reduce_187,
  6, 103, :_reduce_188,
  9, 103, :_reduce_189,
  9, 103, :_reduce_190,
  11, 103, :_reduce_191,
  1, 162, :_reduce_192,
  1, 162, :_reduce_193,
  1, 162, :_reduce_194,
  1, 151, :_reduce_195,
  1, 151, :_reduce_196,
  1, 163, :_reduce_197,
  2, 163, :_reduce_198,
  0, 163, :_reduce_199,
  0, 165, :_reduce_200,
  1, 165, :_reduce_201,
  1, 165, :_reduce_202,
  3, 165, :_reduce_203,
  3, 165, :_reduce_204,
  3, 166, :_reduce_205,
  2, 104, :_reduce_206,
  4, 104, :_reduce_207,
  4, 104, :_reduce_208,
  0, 167, :_reduce_209,
  1, 167, :_reduce_210,
  1, 113, :_reduce_211,
  4, 117, :_reduce_212,
  5, 117, :_reduce_213,
  3, 117, :_reduce_214,
  4, 118, :_reduce_215,
  5, 118, :_reduce_216,
  3, 118, :_reduce_217,
  5, 124, :_reduce_218,
  4, 108, :_reduce_219,
  1, 112, :_reduce_220,
  1, 112, :_reduce_221,
  4, 109, :_reduce_222,
  6, 107, :_reduce_223,
  6, 107, :_reduce_224,
  6, 107, :_reduce_225,
  3, 110, :_reduce_226,
  4, 110, :_reduce_227,
  6, 110, :_reduce_228,
  0, 169, :_reduce_229,
  2, 169, :_reduce_230,
  3, 169, :_reduce_231,
  3, 169, :_reduce_232,
  4, 169, :_reduce_233,
  2, 164, :_reduce_234,
  1, 164, :_reduce_235,
  1, 168, :_reduce_236,
  3, 168, :_reduce_237,
  3, 168, :_reduce_238,
  4, 168, :_reduce_239,
  3, 170, :_reduce_240,
  4, 171, :_reduce_241,
  5, 171, :_reduce_242,
  5, 111, :_reduce_243,
  8, 111, :_reduce_244,
  2, 133, :_reduce_245,
  4, 126, :_reduce_246,
  1, 126, :_reduce_247,
  1, 106, :_reduce_248 ]

racc_reduce_n = 249

racc_shift_n = 456

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :ELSEIF => 4,
  :THEN => 5,
  :UNLESS => 6,
  :END => 7,
  :WHILE => 8,
  :UNTIL => 9,
  :BREAK => 10,
  :CONTINUE => 11,
  :TRY => 12,
  :CATCH => 13,
  :FINALLY => 14,
  :FOR => 15,
  :IN => 16,
  :DEF => 17,
  :DEF_BANG => 18,
  :SPLAT => 19,
  :CALL => 20,
  :BUILTIN_COMMAND => 21,
  :CLASS => 22,
  :NEW => 23,
  :DEFM => 24,
  :DEFM_BANG => 25,
  :SUPER => 26,
  :RIML_FILE_COMMAND => 27,
  :RIML_CLASS_COMMAND => 28,
  :RETURN => 29,
  :NEWLINE => 30,
  :NUMBER => 31,
  :STRING_D => 32,
  :STRING_S => 33,
  :EX_LITERAL => 34,
  :REGEXP => 35,
  :TRUE => 36,
  :FALSE => 37,
  :LET => 38,
  :UNLET => 39,
  :UNLET_BANG => 40,
  :IDENTIFIER => 41,
  :DICT_VAL => 42,
  :SCOPE_MODIFIER => 43,
  :SCOPE_MODIFIER_LITERAL => 44,
  :SPECIAL_VAR_PREFIX => 45,
  :FINISH => 46,
  "!" => 47,
  "*" => 48,
  "/" => 49,
  "%" => 50,
  "+" => 51,
  "-" => 52,
  "." => 53,
  ">" => 54,
  ">#" => 55,
  ">?" => 56,
  "<" => 57,
  "<#" => 58,
  "<?" => 59,
  ">=" => 60,
  ">=#" => 61,
  ">=?" => 62,
  "<=" => 63,
  "<=#" => 64,
  "<=?" => 65,
  "==" => 66,
  "==?" => 67,
  "==#" => 68,
  "=~" => 69,
  "=~?" => 70,
  "=~#" => 71,
  "!~" => 72,
  "!~?" => 73,
  "!~#" => 74,
  "!=" => 75,
  "!=?" => 76,
  "!=#" => 77,
  :IS => 78,
  :ISNOT => 79,
  "&&" => 80,
  "||" => 81,
  "?" => 82,
  "=" => 83,
  "+=" => 84,
  "-=" => 85,
  ".=" => 86,
  "," => 87,
  "(" => 88,
  ")" => 89,
  ";" => 90,
  "[" => 91,
  "]" => 92,
  "{" => 93,
  "}" => 94,
  ":" => 95,
  "===" => 96 }

racc_nt_base = 97

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "ELSEIF",
  "THEN",
  "UNLESS",
  "END",
  "WHILE",
  "UNTIL",
  "BREAK",
  "CONTINUE",
  "TRY",
  "CATCH",
  "FINALLY",
  "FOR",
  "IN",
  "DEF",
  "DEF_BANG",
  "SPLAT",
  "CALL",
  "BUILTIN_COMMAND",
  "CLASS",
  "NEW",
  "DEFM",
  "DEFM_BANG",
  "SUPER",
  "RIML_FILE_COMMAND",
  "RIML_CLASS_COMMAND",
  "RETURN",
  "NEWLINE",
  "NUMBER",
  "STRING_D",
  "STRING_S",
  "EX_LITERAL",
  "REGEXP",
  "TRUE",
  "FALSE",
  "LET",
  "UNLET",
  "UNLET_BANG",
  "IDENTIFIER",
  "DICT_VAL",
  "SCOPE_MODIFIER",
  "SCOPE_MODIFIER_LITERAL",
  "SPECIAL_VAR_PREFIX",
  "FINISH",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\".\"",
  "\">\"",
  "\">#\"",
  "\">?\"",
  "\"<\"",
  "\"<#\"",
  "\"<?\"",
  "\">=\"",
  "\">=#\"",
  "\">=?\"",
  "\"<=\"",
  "\"<=#\"",
  "\"<=?\"",
  "\"==\"",
  "\"==?\"",
  "\"==#\"",
  "\"=~\"",
  "\"=~?\"",
  "\"=~#\"",
  "\"!~\"",
  "\"!~?\"",
  "\"!~#\"",
  "\"!=\"",
  "\"!=?\"",
  "\"!=#\"",
  "IS",
  "ISNOT",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\"=\"",
  "\"+=\"",
  "\"-=\"",
  "\".=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\":\"",
  "\"===\"",
  "$start",
  "Root",
  "Statements",
  "Statement",
  "Terminator",
  "ExplicitCall",
  "Def",
  "Return",
  "UnletVariable",
  "ExLiteral",
  "For",
  "While",
  "Until",
  "Try",
  "ClassDefinition",
  "LoopKeyword",
  "EndScript",
  "RimlFileCommand",
  "RimlClassCommand",
  "MultiAssign",
  "If",
  "Unless",
  "Expression",
  "ExpressionWithoutDictLiteral",
  "Dictionary",
  "DictGetWithDotLiteral",
  "BinaryOperator",
  "Ternary",
  "Assign",
  "Super",
  "UnaryOperator",
  "DictGet",
  "ListOrDictGet",
  "AllVariableRetrieval",
  "LiteralWithoutDictLiteral",
  "Call",
  "ObjectInstantiation",
  "PossibleStringValue",
  "String",
  "Number",
  "Regexp",
  "List",
  "ScopeModifierLiteral",
  "ListLiteral",
  "ListUnpack",
  "ListItems",
  "DictionaryLiteral",
  "DictItems",
  "DictItem",
  "DictGetWithDot",
  "ListOrDictGetWithBrackets",
  "ListOrDictGetAssign",
  "SubList",
  "Scope",
  "DefCallIdentifier",
  "ArgList",
  "ArgListWithoutNothing",
  "ObjectInstantiationCall",
  "ClassArgList",
  "SIDAndScope",
  "AssignExpression",
  "AssignLHS",
  "VariableRetrieval",
  "CurlyBraceName",
  "CurlyBraceVarPart",
  "FunctionType",
  "DefKeywords",
  "Block",
  "ParamList",
  "DefaultParam",
  "Returnable",
  "IfBlock",
  "Catch",
  "ElseBlock",
  "ElseifBlock" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_1(val, _values, result)
     result = make_node(val) { |_| Riml::Nodes.new([]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 41)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_3(val, _values, result)
     result = make_node(val) { |v| Riml::Nodes.new([ v[0] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_6(val, _values, result)
     result = make_node(val) { |_| Riml::Nodes.new([]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_7(val, _values, result)
     result = make_node(val) { |v| Riml::Nodes.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_21(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_26(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_27(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_28(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_32(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_33(val, _values, result)
     result = make_node(val) { |v| Riml::WrapInParensNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 87)
  def _reduce_34(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_35(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_37(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_38(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_40(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_41(val, _values, result)
     result = make_node(val) { |v| Riml::WrapInParensNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_42(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_45(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_47(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_48(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_49(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_50(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_51(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_52(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_53(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_55(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_56(val, _values, result)
     result = make_node(val) { |_| Riml::TrueNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_57(val, _values, result)
     result = make_node(val) { |_| Riml::FalseNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_58(val, _values, result)
     result = make_node(val) { |v| Riml::NumberNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_59(val, _values, result)
     result = make_node(val) { |v| Riml::StringNode.new(v[0], :s) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_60(val, _values, result)
     result = make_node(val) { |v| Riml::StringNode.new(v[0], :d) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_61(val, _values, result)
     result = make_node(val) { |v| Riml::StringLiteralConcatNode.new(v[0], Riml::StringNode.new(v[1], :s)) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_62(val, _values, result)
     result = make_node(val) { |v| Riml::StringLiteralConcatNode.new(v[0], Riml::StringNode.new(v[1], :d)) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_63(val, _values, result)
     result = make_node(val) { |v| Riml::RegexpNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_64(val, _values, result)
     result = make_node(val) { |v| Riml::ScopeModifierLiteralNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_65(val, _values, result)
     result = make_node(val) { |v| Riml::ListNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_66(val, _values, result)
     result = make_node(val) { |v| Riml::ListUnpackNode.new(v[1] << v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_67(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_68(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_69(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_70(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_71(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_72(val, _values, result)
     result = make_node(val) { |v| Riml::DictionaryNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_73(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_74(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_75(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_76(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_77(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_78(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_79(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_80(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_81(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 187)
  def _reduce_82(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(Riml::WrapInParensNode.new(v[1]), v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_83(val, _values, result)
     result = make_node(val) { |v| Riml::ListOrDictGetNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 192)
  def _reduce_84(val, _values, result)
     result = make_node(val) { |v| Riml::ListOrDictGetNode.new(Riml::WrapInParensNode.new(v[1]), v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 196)
  def _reduce_85(val, _values, result)
     result = make_node(val) { |v| Riml::ListOrDictGetNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 200)
  def _reduce_86(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 201)
  def _reduce_87(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_88(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 203)
  def _reduce_89(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 207)
  def _reduce_90(val, _values, result)
     result = make_node(val) { |v| Riml::SublistNode.new([v[0], Riml::LiteralNode.new(' : '), v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_91(val, _values, result)
     result = make_node(val) { |v| Riml::SublistNode.new([v[0], Riml::LiteralNode.new(' :')]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 209)
  def _reduce_92(val, _values, result)
     result = make_node(val) { |v| Riml::SublistNode.new([Riml::LiteralNode.new(': '), v[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 210)
  def _reduce_93(val, _values, result)
     result = make_node(val) { |_| Riml::SublistNode.new([Riml::LiteralNode.new(':')]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 214)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 215)
  def _reduce_95(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 219)
  def _reduce_96(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 220)
  def _reduce_97(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 224)
  def _reduce_98(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(v[0], v[1], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 225)
  def _reduce_99(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_100(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 227)
  def _reduce_101(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 228)
  def _reduce_102(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], []) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_103(val, _values, result)
     result = make_node(val) { |v| Riml::ExplicitCallNode.new(nil, nil, v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_104(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(v[0], v[1], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_105(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(v[0], v[1], []) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 238)
  def _reduce_106(val, _values, result)
     result = make_node(val) { |v| Riml::RimlFileCommandNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 239)
  def _reduce_107(val, _values, result)
     result = make_node(val) { |v| Riml::RimlFileCommandNode.new(nil, v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 243)
  def _reduce_108(val, _values, result)
     result = make_node(val) { |v| Riml::RimlClassCommandNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_109(val, _values, result)
     result = make_node(val) { |v| Riml::RimlClassCommandNode.new(nil, v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 248)
  def _reduce_110(val, _values, result)
     result = ["#{val[0]}#{val[1]}"] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 249)
  def _reduce_111(val, _values, result)
     result = val[0].concat ["#{val[2]}#{val[3]}"] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 253)
  def _reduce_112(val, _values, result)
     result = make_node(val) { |v| Riml::ExplicitCallNode.new(v[1], v[2], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 254)
  def _reduce_113(val, _values, result)
     result = make_node(val) { |v| Riml::ExplicitCallNode.new(nil, v[1], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 258)
  def _reduce_114(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 259)
  def _reduce_115(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 264)
  def _reduce_116(val, _values, result)
     result = [ nil, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 265)
  def _reduce_117(val, _values, result)
     result = [ make_node(val) { |v| Riml::SIDNode.new(v[1]) }, val[3] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 269)
  def _reduce_118(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 270)
  def _reduce_119(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_120(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 275)
  def _reduce_121(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 279)
  def _reduce_122(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_123(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 282)
  def _reduce_124(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 283)
  def _reduce_125(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 284)
  def _reduce_126(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 287)
  def _reduce_127(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 289)
  def _reduce_128(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 290)
  def _reduce_129(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 291)
  def _reduce_130(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_131(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 294)
  def _reduce_132(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 295)
  def _reduce_133(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 297)
  def _reduce_134(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 298)
  def _reduce_135(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 299)
  def _reduce_136(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 301)
  def _reduce_137(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 302)
  def _reduce_138(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 303)
  def _reduce_139(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 305)
  def _reduce_140(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_141(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 307)
  def _reduce_142(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 309)
  def _reduce_143(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 310)
  def _reduce_144(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 311)
  def _reduce_145(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 313)
  def _reduce_146(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 314)
  def _reduce_147(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 315)
  def _reduce_148(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 317)
  def _reduce_149(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_150(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 319)
  def _reduce_151(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 320)
  def _reduce_152(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 321)
  def _reduce_153(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 322)
  def _reduce_154(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 324)
  def _reduce_155(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 325)
  def _reduce_156(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 329)
  def _reduce_157(val, _values, result)
     result = make_node(val) { |v| Riml::UnaryOperatorNode.new(val[0], [val[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 330)
  def _reduce_158(val, _values, result)
     result = make_node(val) { |v| Riml::UnaryOperatorNode.new(val[0], [val[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 331)
  def _reduce_159(val, _values, result)
     result = make_node(val) { |v| Riml::UnaryOperatorNode.new(val[0], [val[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 336)
  def _reduce_160(val, _values, result)
     result = make_node(val) { |v| Riml::AssignNode.new(v[1][0], v[1][1], v[1][2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 337)
  def _reduce_161(val, _values, result)
     result = make_node(val) { |v| Riml::AssignNode.new(v[0][0], v[0][1], v[0][2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 341)
  def _reduce_162(val, _values, result)
     result = make_node(val) { |v| Riml::MultiAssignNode.new([v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 342)
  def _reduce_163(val, _values, result)
     val[0].assigns << val[2]; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 347)
  def _reduce_164(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 348)
  def _reduce_165(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 349)
  def _reduce_166(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 350)
  def _reduce_167(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 354)
  def _reduce_168(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 355)
  def _reduce_169(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 356)
  def _reduce_170(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_171(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 358)
  def _reduce_172(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 363)
  def _reduce_173(val, _values, result)
     result = make_node(val) { |v| Riml::GetVariableNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 364)
  def _reduce_174(val, _values, result)
     result = make_node(val) { |v| Riml::GetSpecialVariableNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 365)
  def _reduce_175(val, _values, result)
     result = make_node(val) { |v| Riml::GetVariableByScopeAndDictNameNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 369)
  def _reduce_176(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 370)
  def _reduce_177(val, _values, result)
     result = make_node(val) { |v| Riml::GetCurlyBraceNameNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 374)
  def _reduce_178(val, _values, result)
     result = make_node(val) { |v| Riml::UnletVariableNode.new('!', [ v[1] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 375)
  def _reduce_179(val, _values, result)
     result = make_node(val) { |v| Riml::UnletVariableNode.new('!', [ v[1] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 376)
  def _reduce_180(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 380)
  def _reduce_181(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBraceVariable.new([ v[0] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 381)
  def _reduce_182(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBraceVariable.new([ Riml::CurlyBracePart.new(v[0]), v[1] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 382)
  def _reduce_183(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::CurlyBracePart.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 383)
  def _reduce_184(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 387)
  def _reduce_185(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBracePart.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 388)
  def _reduce_186(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBracePart.new([v[1], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 389)
  def _reduce_187(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBracePart.new([v[1], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 395)
  def _reduce_188(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], [], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 396)
  def _reduce_189(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], v[4], v[6], v[7]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 397)
  def _reduce_190(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], [v[4]], v[6], v[7]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 398)
  def _reduce_191(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], v[4] << v[6], v[8], v[9]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 402)
  def _reduce_192(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 403)
  def _reduce_193(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 404)
  def _reduce_194(val, _values, result)
     result = "DefMethodNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 409)
  def _reduce_195(val, _values, result)
     result = make_node(val) { |v| Riml::GetCurlyBraceNameNode.new('', v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 410)
  def _reduce_196(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 415)
  def _reduce_197(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 416)
  def _reduce_198(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 417)
  def _reduce_199(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 421)
  def _reduce_200(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 422)
  def _reduce_201(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 423)
  def _reduce_202(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 424)
  def _reduce_203(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 425)
  def _reduce_204(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 429)
  def _reduce_205(val, _values, result)
     result = make_node(val) { |v| Riml::DefaultParamNode.new(v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 433)
  def _reduce_206(val, _values, result)
     result = make_node(val) { |v| Riml::ReturnNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 434)
  def _reduce_207(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[3], Nodes.new([ReturnNode.new(v[1])])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 435)
  def _reduce_208(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[3], Nodes.new([ReturnNode.new(v[1])])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 439)
  def _reduce_209(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 440)
  def _reduce_210(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 444)
  def _reduce_211(val, _values, result)
     result = make_node(val) { |_| Riml::FinishNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 449)
  def _reduce_212(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 450)
  def _reduce_213(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[1], Riml::Nodes.new([v[3]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 451)
  def _reduce_214(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[2], Riml::Nodes.new([v[0]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 455)
  def _reduce_215(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 456)
  def _reduce_216(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[1], Riml::Nodes.new([v[3]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 457)
  def _reduce_217(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[2], Riml::Nodes.new([v[0]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 461)
  def _reduce_218(val, _values, result)
     result = make_node(val) { |v| Riml::TernaryOperatorNode.new([v[0], v[2], v[4]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 465)
  def _reduce_219(val, _values, result)
     result = make_node(val) { |v| Riml::WhileNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 469)
  def _reduce_220(val, _values, result)
     result = make_node(val) { |_| Riml::BreakNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 470)
  def _reduce_221(val, _values, result)
     result = make_node(val) { |_| Riml::ContinueNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 474)
  def _reduce_222(val, _values, result)
     result = make_node(val) { |v| Riml::UntilNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 478)
  def _reduce_223(val, _values, result)
     result = make_node(val) { |v| Riml::ForNode.new(v[1], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 479)
  def _reduce_224(val, _values, result)
     result = make_node(val) { |v| Riml::ForNode.new(v[1], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 480)
  def _reduce_225(val, _values, result)
     result = make_node(val) { |v| Riml::ForNode.new(v[1], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 484)
  def _reduce_226(val, _values, result)
     result = make_node(val) { |v| Riml::TryNode.new(v[1], nil, nil) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 485)
  def _reduce_227(val, _values, result)
     result = make_node(val) { |v| Riml::TryNode.new(v[1], v[2], nil) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 486)
  def _reduce_228(val, _values, result)
     result = make_node(val) { |v| Riml::TryNode.new(v[1], v[2], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 490)
  def _reduce_229(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 491)
  def _reduce_230(val, _values, result)
     result = [ make_node(val) { |v| Riml::CatchNode.new(nil, v[1]) } ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 492)
  def _reduce_231(val, _values, result)
     result = [ make_node(val) { |v| Riml::CatchNode.new(v[1], v[2]) } ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 493)
  def _reduce_232(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::CatchNode.new(nil, v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 494)
  def _reduce_233(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::CatchNode.new(v[2], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 501)
  def _reduce_234(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 502)
  def _reduce_235(val, _values, result)
     result = make_node(val) { |_| Riml::Nodes.new([]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 506)
  def _reduce_236(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 507)
  def _reduce_237(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 508)
  def _reduce_238(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 509)
  def _reduce_239(val, _values, result)
     result = val[1] << val[2] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 513)
  def _reduce_240(val, _values, result)
     result = make_node(val) { |v| Riml::ElseNode.new(v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 517)
  def _reduce_241(val, _values, result)
     result = make_node(val) { |v| Riml::Nodes.new([Riml::ElseifNode.new(v[1], v[3])]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 518)
  def _reduce_242(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::ElseifNode.new(v[2], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 522)
  def _reduce_243(val, _values, result)
     result = make_node(val) { |v| Riml::ClassDefinitionNode.new(v[1], v[2], nil, v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 523)
  def _reduce_244(val, _values, result)
     result = make_node(val) { |v| Riml::ClassDefinitionNode.new(v[1], v[2], (v[4] || ClassDefinitionNode::DEFAULT_SCOPE_MODIFIER) + v[5], v[6]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 527)
  def _reduce_245(val, _values, result)
     result = make_node(val) { |v| Riml::ObjectInstantiationNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 531)
  def _reduce_246(val, _values, result)
     result = make_node(val) { |v| Riml::SuperNode.new(v[2], true) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 532)
  def _reduce_247(val, _values, result)
     result = make_node(val) { |_| Riml::SuperNode.new([], false) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 536)
  def _reduce_248(val, _values, result)
     result = make_node(val) { |v| Riml::ExLiteralNode.new(v[0]) } 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
