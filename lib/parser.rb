#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require File.expand_path("../lexer", __FILE__)
  require File.expand_path("../nodes", __FILE__)
  require File.expand_path("../ast_rewriter", __FILE__)
  require File.expand_path("../errors", __FILE__)
module Riml
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 560)
  # This code will be put as-is in the parser class

  attr_accessor :ast_rewriter

  # parses tokens or code into output nodes
  def parse(object, ast_rewriter = Riml::AST_Rewriter.new, filename = nil, included = false)
    if tokens?(object)
      @tokens = object
    elsif code?(object)
      @lexer = Riml::Lexer.new(object, filename, true)
    end

    begin
      ast = do_parse
    rescue Racc::ParseError => e
      raise unless @lexer
      if @lexer.prev_token_is_keyword?
        warning = "#{@lexer.invalid_keyword.inspect} is a keyword, and cannot " \
          "be used as a variable name"
      end
      error_msg = "#{e.message} at #{@lexer.filename}:#{@lexer.lineno}"
      error_msg << "\n\n#{warning}" if warning
      raise Riml::ParseError, error_msg
    end

    @ast_rewriter ||= ast_rewriter
    return ast unless @ast_rewriter
    @ast_rewriter.ast = ast
    @ast_rewriter.rewrite(filename, included)
  end

  # get the next token from either the list of tokens provided, or
  # the lexer getting the next token
  def next_token
    return @tokens.shift unless @lexer
    token = @lexer.next_token
    @current_parser_info = token.pop if token
    token
  end

  private

  def tokens?(object)
    Array === object
  end

  def code?(object)
    String === object
  end

  def make_node(racc_val)
    node = yield racc_val
    node.parser_info = @current_parser_info
    node
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'133,60,151,150,134,207,409,410,207,442,207,207,403,144,56,195,88,436',
'299,401,360,401,401,37,46,48,47,37,49,44,45,443,384,37,404,270,60,50',
'69,37,61,261,269,137,62,63,127,128,130,125,126,129,113,114,115,119,120',
'121,116,117,118,122,123,124,100,102,101,107,109,108,110,112,111,104',
'106,105,131,132,99,98,135,184,79,38,52,37,80,38,81,84,82,83,86,38,103',
'85,37,74,75,38,57,56,87,88,76,37,89,58,59,77,37,46,48,47,90,49,44,45',
'64,71,72,137,273,60,50,69,78,61,48,47,207,62,63,147,275,48,47,159,323',
'60,427,401,426,275,325,38,60,-85,-85,-85,-85,60,50,69,207,254,38,151',
'150,49,307,-178,-178,-178,-178,38,145,374,29,373,38,52,79,54,162,291',
'80,159,81,84,82,83,86,147,178,85,162,74,75,162,57,56,87,88,76,162,89',
'58,59,77,37,46,48,47,90,49,44,45,64,71,72,-116,162,60,50,69,78,61,-42',
'-42,371,62,63,268,-175,-175,-175,-175,267,162,-99,-46,-46,273,-45,-45',
'-178,-178,-178,-178,207,145,378,-47,-47,49,-43,-43,380,379,307,268,151',
'150,266,310,267,147,29,311,38,52,79,54,147,385,80,275,81,84,82,83,86',
'273,203,85,365,74,75,-99,57,56,87,88,76,162,89,58,59,77,37,46,48,47',
'90,49,44,45,64,71,72,-116,162,60,50,69,78,61,-48,-48,386,62,63,313,-202',
'-44,-44,162,350,162,-203,409,431,364,52,162,-116,290,60,50,69,187,188',
'189,190,60,50,69,314,387,272,299,-98,390,147,147,368,254,29,265,38,52',
'254,54,265,265,127,128,130,125,126,129,113,114,115,119,120,121,116,117',
'118,122,123,124,100,102,101,107,109,108,110,112,111,104,106,105,131',
'132,99,98,135,-98,79,137,137,265,80,-242,81,84,82,83,86,393,103,85,394',
'74,75,395,57,56,87,88,76,263,89,58,59,77,37,46,48,47,90,49,44,45,64',
'71,72,396,300,60,50,69,78,61,259,398,60,62,63,103,137,127,128,130,125',
'126,129,113,114,115,119,120,121,116,117,118,122,123,124,100,102,101',
'107,109,108,110,112,111,104,106,105,131,132,99,29,258,38,52,79,54,306',
'137,80,214,81,84,82,83,86,103,212,85,211,74,75,60,57,56,87,88,76,60',
'89,58,59,77,37,46,48,47,90,49,44,45,64,71,72,-116,207,60,50,69,78,61',
'362,207,419,62,63,60,207,127,128,130,125,126,129,113,114,115,119,120',
'121,116,117,118,122,123,124,100,102,101,107,109,108,110,112,111,104',
'106,105,131,132,320,29,321,38,52,79,54,322,191,80,424,81,84,82,83,86',
'103,425,85,60,74,75,428,57,56,87,88,76,429,89,58,59,77,37,46,48,47,90',
'49,44,45,64,71,72,359,432,60,50,69,78,61,358,434,435,62,63,290,437,127',
'128,130,125,126,129,113,114,115,119,120,121,116,117,118,122,123,124',
'-176,-176,-176,-176,207,439,440,137,254,365,127,128,130,357,365,29,327',
'38,52,79,54,147,103,80,147,81,84,82,83,86,103,207,85,103,74,75,452,57',
'56,87,88,76,429,89,58,59,77,37,46,48,47,90,49,44,45,64,71,72,103,353',
'60,50,69,78,61,103,140,139,62,63,137,456,127,128,130,125,126,129,113',
'114,115,119,120,121,116,117,118,122,123,124,457,365,459,97,338,342,91',
'462,,,,127,128,130,,29,,38,52,79,54,,,80,,81,84,82,83,86,103,147,85',
',74,75,,57,56,87,88,76,,89,58,59,77,,46,48,47,90,49,44,45,64,71,72,-116',
'103,60,50,69,78,61,,,,62,63,317,,-175,-175,-175,-175,,,,,,,,,,,,,,,',
',,,,314,,,,,,127,128,130,,29,,,52,,54,,,127,128,130,125,126,129,113',
'114,115,119,120,121,116,117,118,122,123,124,100,102,101,107,109,108',
'110,112,111,104,106,105,131,132,99,98,135,411,103,,,,,,,,,,,,103,,,',
',,,,,,,,,,,,127,128,130,125,126,129,127,128,130,125,126,129,127,128',
'130,125,126,129,113,114,115,119,120,121,116,117,118,122,123,124,100',
'102,101,107,109,108,110,112,111,104,106,105,131,132,99,98,135,406,103',
',,,,,103,144,56,,88,,103,89,,,,,46,48,47,,49,44,45,64,,,,,60,50,69,',
'61,,,,62,63,127,128,130,125,126,129,113,114,115,119,120,121,116,117',
'118,122,123,124,100,102,101,107,109,108,110,112,111,104,106,105,131',
'132,99,98,135,29,,,52,,54,,257,144,56,,88,,103,89,127,128,130,,46,48',
'47,,49,44,45,64,127,128,130,,60,50,69,,61,,,,62,63,331,144,56,,88,,',
'89,,,,,46,48,47,,49,44,45,64,,,103,,60,50,69,,61,,,,62,63,103,29,,,52',
',54,,257,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118',
'122,123,124,,,,,144,56,,88,29,-121,89,52,,54,,46,48,47,,49,44,45,64',
',,,,60,50,69,103,61,,,,62,63,423,144,56,,88,,,89,,,,,46,48,47,,49,44',
'45,64,,,,,60,50,69,,61,,,,62,63,,29,144,56,52,88,54,346,89,,,,,46,48',
'47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,29,144,56,52,88,54,,89,,,',
',46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,,29,144,56,52,88,54',
',89,,,,165,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,29,144,56',
'52,88,54,,89,,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,,163',
'144,56,52,88,54,,89,,,,,46,48,47,,49,44,45,64,,,-116,,60,50,69,,61,',
',,62,63,29,144,56,52,88,54,,89,,,,,46,48,47,,49,44,45,64,,,,,60,50,69',
',61,,,,62,63,,174,144,56,52,88,54,,89,,,,,46,48,47,,49,44,45,64,,,,',
'60,50,69,,61,,,,62,63,29,144,56,52,88,54,,89,,,,,46,48,47,,49,44,45',
'64,,,,,60,50,69,,61,,,,62,63,,29,144,56,52,88,54,,89,,,,,46,48,47,,49',
'44,45,64,,,,,60,50,69,,61,,,,62,63,29,144,56,52,88,54,,89,,,,,46,48',
'47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,,29,144,56,52,88,54,,89,,',
',,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,29,144,56,52,88,54',
',89,,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,,29,144,56,52',
'88,54,,89,,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,29,144',
'56,52,88,54,,89,,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63',
',29,144,56,52,88,54,,89,,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,',
',,62,63,29,144,56,52,88,54,,89,,,,,46,48,47,,49,44,45,64,,,-116,,60',
'50,69,,61,,,,62,63,,29,-119,,52,,54,,127,128,130,125,126,129,113,114',
'115,119,120,121,116,117,118,122,123,124,,,,,144,56,,88,,29,89,,52,,54',
'46,48,47,,49,44,45,64,,,,,60,50,69,103,61,,,,62,63,144,56,,88,,,89,',
',,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52',
'89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88',
',52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56',
'29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144',
'56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63',
',,29,-119,,52,,54,,127,128,130,125,126,129,113,114,115,119,120,121,116',
'117,118,122,123,124,,,,,144,56,,88,29,-119,89,52,,54,,46,48,47,,49,44',
'45,64,,,,,60,50,69,103,61,,,,62,63,144,56,,88,,,89,,,,,46,48,47,,49',
'44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47',
',49,44,45,64,,,,,60,50,69,,61,,,,62,63,,,29,-119,,52,,54,127,128,130',
'125,126,129,113,114,115,119,120,121,116,117,118,122,123,124,,,,,144',
'56,,88,,29,89,,52,,54,46,48,47,,49,44,45,64,,,-116,,60,50,69,103,61',
',,,62,63,144,56,,88,,,89,,,,,46,48,47,,49,44,45,64,,,-116,,60,50,69',
',61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60',
'50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,',
',-116,,60,50,69,,61,,,,62,63,,,29,-119,,52,,54,127,128,130,125,126,129',
'113,114,115,119,120,121,116,117,118,122,123,124,,,,,144,56,,88,,29,89',
',52,,284,46,48,47,,49,44,45,64,,,,,60,50,69,103,61,,,,62,63,144,56,',
'88,,,89,,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29',
'88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144',
'56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63',
'144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,',
'62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,',
'61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,',
'60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64',
',,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44',
'45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,',
'49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48',
'47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,',
'46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89',
'54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,',
'52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29',
'88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144',
'56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63',
'144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,',
'62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,',
'61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,',
'60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64',
',,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44',
'45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,',
'49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48',
'47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,',
'46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89',
'54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,',
'52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29',
'88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144',
'56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63',
'144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,',
'62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,',
'61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,-116,',
'60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64',
',,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44',
'45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,',
'49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48',
'47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89,54,,,',
'46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,89',
'54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88,',
'52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29',
'88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144',
'56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63',
'144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,',
'62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,',
'61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'69,,61,,,,62,63,,,29,-119,,52,,54,,127,128,130,125,126,129,113,114,115',
'119,120,121,116,117,118,122,123,124,,,,,144,56,,88,29,-119,89,52,,54',
',46,48,47,,49,44,45,64,,,,,60,50,69,103,61,,,,62,63,144,56,,88,,,89',
',,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,,,29,,,52,344,54',
'127,128,130,125,126,129,113,114,115,119,120,121,116,117,118,122,123',
'124,,,,,144,56,,88,,29,89,,52,,54,46,48,47,,49,44,45,64,,,,,60,50,69',
'103,61,,,,62,63,144,56,,88,,,89,,,,,46,48,47,,49,44,45,64,,,,,60,50',
'69,,61,,,,62,63,,,29,-119,,52,,54,,127,128,130,125,126,129,113,114,115',
'119,120,121,116,117,118,122,123,124,,,,,144,56,,88,29,-119,89,52,,54',
',46,48,47,,49,44,45,64,,,-116,,60,50,69,103,61,,,,62,63,144,56,,88,',
',89,,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56,29,88',
',52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144,56',
'29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,,61,,,,62,63,144',
'56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,-116,,60,50,69,,61,,,',
'62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50,69,',
'61,,,,62,63,144,56,29,88,,52,89,54,,,,46,48,47,,49,44,45,64,,,,,60,50',
'69,,61,,,,62,63,144,56,29,88,,52,89,284,,,,46,48,47,,49,44,45,64,,,',
',60,50,69,,61,,,,62,63,144,56,29,88,,52,,54,,,,46,48,47,,49,44,45,64',
',,,,60,50,69,,61,,,,62,63,144,56,29,88,,52,,54,,,,46,48,47,,49,44,45',
',,,,,60,50,69,,61,,,,62,63,144,56,184,88,,52,,,,,,46,48,47,,49,44,45',
'64,,,,,60,50,69,,61,,,,62,63,,,169,,,171,,,,,,,,,,,,,,,,207,,,,,,127',
'128,130,125,126,129,,,184,,,52,127,128,130,125,126,129,113,114,115,119',
'120,121,116,117,118,122,123,124,100,102,101,107,109,108,110,112,111',
'104,106,105,131,132,99,98,135,207,103,,,,,127,128,130,125,126,129,,103',
',,,,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118,122',
'123,124,100,102,101,107,109,108,110,112,111,104,106,105,131,132,99,98',
'135,207,103,,,,,127,128,130,125,126,129,,103,,,,,127,128,130,125,126',
'129,113,114,115,119,120,121,116,117,118,122,123,124,100,102,101,107',
'109,108,110,112,111,104,106,105,131,132,99,98,135,207,103,,,,,127,128',
'130,125,126,129,,103,,,,,127,128,130,125,126,129,113,114,115,119,120',
'121,116,117,118,122,123,124,100,102,101,107,109,108,110,112,111,104',
'106,105,131,132,99,98,135,454,103,,,,,127,128,130,125,126,129,,103,',
',,,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118,122,123',
'124,100,102,101,107,109,108,110,112,111,104,106,105,131,132,99,98,135',
'207,103,,,,,127,128,130,125,126,129,,103,,,,,127,128,130,125,126,129',
'113,114,115,119,120,121,116,117,118,122,123,124,100,102,101,107,109',
'108,110,112,111,104,106,105,131,132,99,98,135,449,103,,,,127,128,130',
'125,126,129,,,103,,,,,127,128,130,125,126,129,113,114,115,119,120,121',
'116,117,118,122,123,124,100,102,101,107,109,108,110,112,111,104,106',
'105,131,132,99,98,135,103,127,128,130,125,126,129,127,128,130,125,126',
'129,103,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118',
'122,123,124,100,102,101,107,109,108,110,112,111,104,106,105,131,132',
'99,98,135,103,,,,,,103,,,336,,,337,103,127,128,130,125,126,129,113,114',
'115,119,120,121,116,117,118,122,123,124,100,102,101,107,109,108,110',
'112,111,104,106,105,131,132,99,98,135,,127,128,130,125,126,129,,,,,',
',103,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118,122',
'123,124,100,102,101,107,109,108,110,112,111,104,106,105,131,132,99,98',
'135,103,,,,,,356,,,,,,,103,127,128,130,125,126,129,113,114,115,119,120',
'121,116,117,118,122,123,124,100,102,101,107,109,108,110,112,111,104',
'106,105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128,130,125,126,129,113',
'114,115,119,120,121,116,117,118,122,123,124,100,102,101,107,109,108',
'110,112,111,104,106,105,131,132,99,98,135,,,,,,,356,,,,,,,103,127,128',
'130,125,126,129,113,114,115,119,120,121,116,117,118,122,123,124,100',
'102,101,107,109,108,110,112,111,104,106,105,131,132,99,98,135,,,,,,',
',,,,,,,103,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118',
'122,123,124,100,102,101,107,109,108,110,112,111,104,106,105,131,132',
'99,98,135,,,,,,,,,,,,,271,103,127,128,130,125,126,129,113,114,115,119',
'120,121,116,117,118,122,123,124,100,102,101,107,109,108,110,112,111',
'104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128,130,125,126,129',
'113,114,115,119,120,121,116,117,118,122,123,124,127,128,130,125,126',
'129,113,114,115,119,120,121,116,117,118,122,123,124,,,,,,,,,,,,,103',
',,,,,,,,,,,,,,,,,103,127,128,130,125,126,129,113,114,115,119,120,121',
'116,117,118,122,123,124,100,102,101,107,109,108,110,112,111,104,106',
'105,131,132,99,98,135,,,,,,,,,,389,,,337,103,127,128,130,125,126,129',
'113,114,115,119,120,121,116,117,118,122,123,124,100,102,101,107,109',
'108,110,112,111,104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128',
'130,125,126,129,113,114,115,119,120,121,116,117,118,122,123,124,100',
'102,101,107,109,108,110,112,111,104,106,105,131,132,99,98,135,,,,,,',
',,,,,,,103,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118',
'122,123,124,100,102,101,107,109,108,110,112,111,104,106,105,131,132',
'99,98,135,,,,,,,262,,,,,,,103,127,128,130,125,126,129,113,114,115,119',
'120,121,116,117,118,122,123,124,100,102,101,107,109,108,110,112,111',
'104,106,105,,,,,,,,,,,,,,,,,,,103,127,128,130,125,126,129,113,114,115',
'119,120,121,116,117,118,122,123,124,100,102,101,107,109,108,110,112',
'111,104,106,105,,,,,,,,,,,,,,,,,,,103,127,128,130,125,126,129,113,114',
'115,119,120,121,116,117,118,122,123,124,100,102,101,107,109,108,110',
'112,111,104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128,130,125',
'126,129,113,114,115,119,120,121,116,117,118,122,123,124,100,102,101',
'107,109,108,110,112,111,104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103',
'127,128,130,125,126,129,113,114,115,119,120,121,116,117,118,122,123',
'124,100,102,101,107,109,108,110,112,111,104,106,105,131,132,99,98,135',
',,,,,,,,,,,,333,103,127,128,130,125,126,129,113,114,115,119,120,121',
'116,117,118,122,123,124,100,102,101,107,109,108,110,112,111,104,106',
'105,131,132,99,98,135,,,,,,,,,,392,,,,103,127,128,130,125,126,129,113',
'114,115,119,120,121,116,117,118,122,123,124,100,102,101,107,109,108',
'110,112,111,104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128,130',
'125,126,129,113,114,115,119,120,121,116,117,118,122,123,124,100,102',
'101,107,109,108,110,112,111,104,106,105,131,132,99,98,135,,,,,,,,,,',
',,,103,127,128,130,125,126,129,113,114,115,119,120,121,116,117,118,122',
'123,124,100,102,101,107,109,108,110,112,111,104,106,105,131,132,99,98',
'135,,,,,,,,,,,,,,103,127,128,130,125,126,129,113,114,115,119,120,121',
'116,117,118,122,123,124,100,102,101,107,109,108,110,112,111,104,106',
'105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128,130,125,126,129,113,114',
'115,119,120,121,116,117,118,122,123,124,100,102,101,107,109,108,110',
'112,111,104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128,130,125',
'126,129,113,114,115,119,120,121,116,117,118,122,123,124,100,102,101',
'107,109,108,110,112,111,104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103',
'127,128,130,125,126,129,113,114,115,119,120,121,116,117,118,122,123',
'124,100,102,101,107,109,108,110,112,111,104,106,105,131,132,99,98,135',
',,,,,,262,,,,,,,103,127,128,130,125,126,129,113,114,115,119,120,121',
'116,117,118,122,123,124,100,102,101,107,109,108,110,112,111,104,106',
'105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128,130,125,126,129,113,114',
'115,119,120,121,116,117,118,122,123,124,100,102,101,107,109,108,110',
'112,111,104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128,130,125',
'126,129,113,114,115,119,120,121,116,117,118,122,123,124,100,102,101',
'107,109,108,110,112,111,104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103',
'127,128,130,125,126,129,113,114,115,119,120,121,116,117,118,122,123',
'124,100,102,101,107,109,108,110,112,111,104,106,105,131,132,99,98,135',
',,,,,,,,,,,,,103,127,128,130,125,126,129,113,114,115,119,120,121,116',
'117,118,122,123,124,100,102,101,107,109,108,110,112,111,104,106,105',
'131,132,99,98,135,,,,,,,,,,,,,,103,127,128,130,125,126,129,113,114,115',
'119,120,121,116,117,118,122,123,124,100,102,101,107,109,108,110,112',
'111,104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103,127,128,130,125,126',
'129,113,114,115,119,120,121,116,117,118,122,123,124,100,102,101,107',
'109,108,110,112,111,104,106,105,131,132,99,98,135,,,,,,,,,,,,,,103,127',
'128,130,125,126,129,113,114,115,119,120,121,116,117,118,122,123,124',
'100,102,101,107,109,108,110,112,111,104,106,105,131,132,99,98,135,,',
',,,,,,,,,,,103' ]
        racc_action_table = arr = ::Array.new(6470, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'22,73,40,40,22,327,370,370,445,427,363,441,364,64,64,73,64,414,298,445',
'298,363,441,93,64,64,64,455,64,64,64,427,327,370,364,155,64,64,64,326',
'64,141,155,141,64,64,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22',
'22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,64,454,93,64',
'2,454,455,454,454,454,454,454,370,22,454,448,454,454,326,454,454,454',
'454,454,460,454,454,454,454,454,454,454,454,454,454,454,454,454,454',
'454,172,273,454,454,454,454,454,59,59,458,454,454,168,274,178,178,173',
'206,59,402,458,402,308,206,2,178,136,136,136,136,71,71,71,325,136,448',
'283,283,325,209,31,31,31,31,460,31,319,454,318,454,454,207,454,273,167',
'207,55,207,207,207,207,207,281,59,207,274,207,207,173,207,207,207,207',
'207,308,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207',
'207,209,207,207,207,207,207,283,283,316,207,207,294,281,281,281,281',
'294,55,396,277,277,307,281,281,279,279,279,279,380,279,324,278,278,380',
'279,279,324,324,196,153,177,177,153,198,153,282,207,198,207,207,4,207',
'280,328,4,160,4,4,4,4,4,159,85,4,309,4,4,396,4,4,4,4,4,307,4,4,4,4,4',
'4,4,4,4,4,4,4,4,4,4,4,196,4,4,4,4,4,282,282,329,4,4,199,160,280,280',
'286,286,160,159,408,408,309,85,159,8,164,8,8,8,66,66,66,66,72,72,72',
'199,332,158,179,424,335,262,356,312,152,4,340,4,4,341,4,149,148,199',
'199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199',
'424,314,262,356,146,314,314,314,314,314,314,314,349,199,314,351,314',
'314,352,314,314,314,314,314,144,314,314,314,314,314,314,314,314,314',
'314,314,314,314,314,314,355,180,314,314,314,314,314,139,361,362,314',
'314,181,185,216,216,216,216,216,216,216,216,216,216,216,216,216,216',
'216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216',
'216,216,314,138,314,314,0,314,195,95,0,94,0,0,0,0,0,216,91,0,89,0,0',
'88,0,0,0,0,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,379,0,0,0,0,0,306,382',
'383,0,0,384,86,217,217,217,217,217,217,217,217,217,217,217,217,217,217',
'217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217',
'217,203,0,204,0,0,449,0,205,69,449,397,449,449,449,449,449,217,400,449',
'299,449,449,403,449,449,449,449,449,404,449,449,449,449,449,449,449',
'449,449,449,449,449,449,449,449,297,409,449,449,449,449,449,296,412',
'413,449,449,176,415,218,218,218,218,218,218,218,218,218,218,218,218',
'218,218,218,218,218,218,42,42,42,42,417,420,421,43,295,426,243,243,243',
'293,428,449,208,449,449,432,449,35,245,432,32,432,432,432,432,432,218',
'439,432,246,432,432,442,432,432,432,432,432,443,432,432,432,432,432',
'432,432,432,432,432,432,432,432,432,432,243,289,432,432,432,432,432',
'248,27,24,432,432,23,450,219,219,219,219,219,219,219,219,219,219,219',
'219,219,219,219,219,219,219,451,452,453,19,256,264,1,461,,,,247,247',
'247,,432,,432,432,92,432,,,92,,92,92,92,92,92,219,33,92,,92,92,,92,92',
'92,92,92,,92,92,92,92,,92,92,92,92,92,92,92,92,92,92,92,247,92,92,92',
'92,92,,,,92,92,200,,33,33,33,33,,,,,,,,,,,,,,,,,,,,200,,,,,,182,182',
'182,,92,,,92,,92,,,200,200,200,200,200,200,200,200,200,200,200,200,200',
'200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200',
'200,200,200,200,200,372,182,,,,,,,,,,,,200,,,,,,,,,,,,,,,,231,231,231',
'231,231,231,232,232,232,232,232,232,372,372,372,372,372,372,372,372',
'372,372,372,372,372,372,372,372,372,372,372,372,372,372,372,372,372',
'372,372,372,372,372,372,372,372,372,372,369,231,,,,,,232,137,137,,137',
',372,137,,,,,137,137,137,,137,137,137,137,,,,,137,137,137,,137,,,,137',
'137,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369',
'369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369',
'369,369,137,,,137,,137,,137,254,254,,254,,369,254,183,183,183,,254,254',
'254,,254,254,254,254,244,244,244,,254,254,254,,254,,,,254,254,211,211',
'211,,211,,,211,,,,,211,211,211,,211,211,211,211,,,183,,211,211,211,',
'211,,,,211,211,244,254,,,254,,254,,254,220,220,220,220,220,220,220,220',
'220,220,220,220,220,220,220,220,220,220,,,,,270,270,,270,211,211,270',
'211,,211,,270,270,270,,270,270,270,270,,,,,270,270,270,220,270,,,,270',
'270,386,386,386,,386,,,386,,,,,386,386,386,,386,386,386,386,,,,,386',
'386,386,,386,,,,386,386,,270,128,128,270,128,270,270,128,,,,,128,128',
'128,,128,128,128,128,,,,,128,128,128,,128,,,,128,128,386,188,188,386',
'188,386,,188,,,,,188,188,188,,188,188,188,188,,,,,188,188,188,,188,',
',,188,188,,128,56,56,128,56,128,,56,,,,56,56,56,56,,56,56,56,56,,,,',
'56,56,56,,56,,,,56,56,188,187,187,188,187,188,,187,,,,,187,187,187,',
'187,187,187,187,,,,,187,187,187,,187,,,,187,187,,56,58,58,56,58,56,',
'58,,,,,58,58,58,,58,58,58,58,,,58,,58,58,58,,58,,,,58,58,187,184,184',
'187,184,187,,184,,,,,184,184,184,,184,184,184,184,,,,,184,184,184,,184',
',,,184,184,,58,61,61,58,61,58,,61,,,,,61,61,61,,61,61,61,61,,,,,61,61',
'61,,61,,,,61,61,184,62,62,184,62,184,,62,,,,,62,62,62,,62,62,62,62,',
',,,62,62,62,,62,,,,62,62,,61,63,63,61,63,61,,63,,,,,63,63,63,,63,63',
'63,63,,,,,63,63,63,,63,,,,63,63,62,310,310,62,310,62,,310,,,,,310,310',
'310,,310,310,310,310,,,,,310,310,310,,310,,,,310,310,,63,410,410,63',
'410,63,,410,,,,,410,410,410,,410,410,410,410,,,,,410,410,410,,410,,',
',410,410,310,311,311,310,311,310,,311,,,,,311,311,311,,311,311,311,311',
',,,,311,311,311,,311,,,,311,311,,410,313,313,410,313,410,,313,,,,,313',
'313,313,,313,313,313,313,,,,,313,313,313,,313,,,,313,313,311,317,317',
'311,317,311,,317,,,,,317,317,317,,317,317,317,317,,,,,317,317,317,,317',
',,,317,317,,313,291,291,313,291,313,,291,,,,,291,291,291,,291,291,291',
'291,,,,,291,291,291,,291,,,,291,291,317,77,77,317,77,317,,77,,,,,77',
'77,77,,77,77,77,77,,,77,,77,77,77,,77,,,,77,77,,291,291,,291,,291,,222',
'222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222',
',,,,79,79,,79,,77,79,,77,,77,79,79,79,,79,79,79,79,,,,,79,79,79,222',
'79,,,,79,79,80,80,,80,,,80,,,,,80,80,80,,80,80,80,80,,,,,80,80,80,,80',
',,,80,80,81,81,79,81,,79,81,79,,,,81,81,81,,81,81,81,81,,,,,81,81,81',
',81,,,,81,81,84,84,80,84,,80,84,80,,,,84,84,84,,84,84,84,84,,,,,84,84',
'84,,84,,,,84,84,272,272,81,272,,81,272,81,,,,272,272,272,,272,272,272',
'272,,,,,272,272,272,,272,,,,272,272,385,385,84,385,,84,385,84,,,,385',
'385,385,,385,385,385,385,,,,,385,385,385,,385,,,,385,385,,,272,272,',
'272,,272,,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223',
'223,223,223,,,,,320,320,,320,385,385,320,385,,385,,320,320,320,,320',
'320,320,320,,,,,320,320,320,223,320,,,,320,320,174,174,,174,,,174,,',
',,174,174,174,,174,174,174,174,,,,,174,174,174,,174,,,,174,174,321,321',
'320,321,,320,321,320,,,,321,321,321,,321,321,321,321,,,,,321,321,321',
',321,,,,321,321,,,174,174,,174,,174,224,224,224,224,224,224,224,224',
'224,224,224,224,224,224,224,224,224,224,,,,,52,52,,52,,321,52,,321,',
'321,52,52,52,,52,52,52,52,,,52,,52,52,52,224,52,,,,52,52,171,171,,171',
',,171,,,,,171,171,171,,171,171,171,171,,,171,,171,171,171,,171,,,,171',
'171,169,169,52,169,,52,169,52,,,,169,169,169,,169,169,169,169,,,,,169',
'169,169,,169,,,,169,169,284,284,171,284,,171,284,171,,,,284,284,284',
',284,284,284,284,,,284,,284,284,284,,284,,,,284,284,,,169,169,,169,',
'169,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225',
'225,225,,,,,189,189,,189,,284,189,,284,,284,189,189,189,,189,189,189',
'189,,,,,189,189,189,225,189,,,,189,189,322,322,,322,,,322,,,,,322,322',
'322,,322,322,322,322,,,,,322,322,322,,322,,,,322,322,98,98,189,98,,189',
'98,189,,,,98,98,98,,98,98,98,98,,,,,98,98,98,,98,,,,98,98,99,99,322',
'99,,322,99,322,,,,99,99,99,,99,99,99,99,,,,,99,99,99,,99,,,,99,99,100',
'100,98,100,,98,100,98,,,,100,100,100,,100,100,100,100,,,,,100,100,100',
',100,,,,100,100,101,101,99,101,,99,101,99,,,,101,101,101,,101,101,101',
'101,,,,,101,101,101,,101,,,,101,101,102,102,100,102,,100,102,100,,,',
'102,102,102,,102,102,102,102,,,,,102,102,102,,102,,,,102,102,103,103',
'101,103,,101,103,101,,,,103,103,103,,103,103,103,103,,,,,103,103,103',
',103,,,,103,103,104,104,102,104,,102,104,102,,,,104,104,104,,104,104',
'104,104,,,,,104,104,104,,104,,,,104,104,105,105,103,105,,103,105,103',
',,,105,105,105,,105,105,105,105,,,,,105,105,105,,105,,,,105,105,106',
'106,104,106,,104,106,104,,,,106,106,106,,106,106,106,106,,,,,106,106',
'106,,106,,,,106,106,107,107,105,107,,105,107,105,,,,107,107,107,,107',
'107,107,107,,,,,107,107,107,,107,,,,107,107,108,108,106,108,,106,108',
'106,,,,108,108,108,,108,108,108,108,,,,,108,108,108,,108,,,,108,108',
'109,109,107,109,,107,109,107,,,,109,109,109,,109,109,109,109,,,,,109',
'109,109,,109,,,,109,109,110,110,108,110,,108,110,108,,,,110,110,110',
',110,110,110,110,,,,,110,110,110,,110,,,,110,110,111,111,109,111,,109',
'111,109,,,,111,111,111,,111,111,111,111,,,,,111,111,111,,111,,,,111',
'111,112,112,110,112,,110,112,110,,,,112,112,112,,112,112,112,112,,,',
',112,112,112,,112,,,,112,112,113,113,111,113,,111,113,111,,,,113,113',
'113,,113,113,113,113,,,,,113,113,113,,113,,,,113,113,114,114,112,114',
',112,114,112,,,,114,114,114,,114,114,114,114,,,,,114,114,114,,114,,',
',114,114,115,115,113,115,,113,115,113,,,,115,115,115,,115,115,115,115',
',,,,115,115,115,,115,,,,115,115,116,116,114,116,,114,116,114,,,,116',
'116,116,,116,116,116,116,,,,,116,116,116,,116,,,,116,116,117,117,115',
'117,,115,117,115,,,,117,117,117,,117,117,117,117,,,,,117,117,117,,117',
',,,117,117,118,118,116,118,,116,118,116,,,,118,118,118,,118,118,118',
'118,,,,,118,118,118,,118,,,,118,118,119,119,117,119,,117,119,117,,,',
'119,119,119,,119,119,119,119,,,,,119,119,119,,119,,,,119,119,120,120',
'118,120,,118,120,118,,,,120,120,120,,120,120,120,120,,,,,120,120,120',
',120,,,,120,120,429,429,119,429,,119,429,119,,,,429,429,429,,429,429',
'429,429,,,,,429,429,429,,429,,,,429,429,122,122,120,122,,120,122,120',
',,,122,122,122,,122,122,122,122,,,,,122,122,122,,122,,,,122,122,123',
'123,429,123,,429,123,429,,,,123,123,123,,123,123,123,123,,,,,123,123',
'123,,123,,,,123,123,124,124,122,124,,122,124,122,,,,124,124,124,,124',
'124,124,124,,,,,124,124,124,,124,,,,124,124,125,125,123,125,,123,125',
'123,,,,125,125,125,,125,125,125,125,,,,,125,125,125,,125,,,,125,125',
'126,126,124,126,,124,126,124,,,,126,126,126,,126,126,126,126,,,,,126',
'126,126,,126,,,,126,126,127,127,125,127,,125,127,125,,,,127,127,127',
',127,127,127,127,,,,,127,127,127,,127,,,,127,127,54,54,126,54,,126,54',
'126,,,,54,54,54,,54,54,54,54,,,54,,54,54,54,,54,,,,54,54,129,129,127',
'129,,127,129,127,,,,129,129,129,,129,129,129,129,,,,,129,129,129,,129',
',,,129,129,130,130,54,130,,54,130,54,,,,130,130,130,,130,130,130,130',
',,,,130,130,130,,130,,,,130,130,131,131,129,131,,129,131,129,,,,131',
'131,131,,131,131,131,131,,,,,131,131,131,,131,,,,131,131,132,132,130',
'132,,130,132,130,,,,132,132,132,,132,132,132,132,,,,,132,132,132,,132',
',,,132,132,133,133,131,133,,131,133,131,,,,133,133,133,,133,133,133',
'133,,,,,133,133,133,,133,,,,133,133,134,134,132,134,,132,134,132,,,',
'134,134,134,,134,134,134,134,,,,,134,134,134,,134,,,,134,134,135,135',
'133,135,,133,135,133,,,,135,135,135,,135,135,135,135,,,,,135,135,135',
',135,,,,135,135,271,271,134,271,,134,271,134,,,,271,271,271,,271,271',
'271,271,,,,,271,271,271,,271,,,,271,271,431,431,135,431,,135,431,135',
',,,431,431,431,,431,431,431,431,,,,,431,431,431,,431,,,,431,431,29,29',
'271,29,,271,29,271,,,,29,29,29,,29,29,29,29,,,,,29,29,29,,29,,,,29,29',
'358,358,431,358,,431,358,431,,,,358,358,358,,358,358,358,358,,,,,358',
'358,358,,358,,,,358,358,163,163,29,163,,29,163,29,,,,163,163,163,,163',
'163,163,163,,,,,163,163,163,,163,,,,163,163,,,358,358,,358,,358,,226',
'226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226',
',,,,268,268,,268,163,163,268,163,,163,,268,268,268,,268,268,268,268',
',,,,268,268,268,226,268,,,,268,268,266,266,,266,,,266,,,,,266,266,266',
',266,266,266,266,,,,,266,266,266,,266,,,,266,266,,,268,,,268,268,268',
'227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227',
'227,,,,,263,263,,263,,266,263,,266,,266,263,263,263,,263,263,263,263',
',,,,263,263,263,227,263,,,,263,263,145,145,,145,,,145,,,,,145,145,145',
',145,145,145,145,,,,,145,145,145,,145,,,,145,145,,,263,263,,263,,263',
',228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228',
'228,,,,,257,257,,257,145,145,257,145,,145,,257,257,257,,257,257,257',
'257,,,257,,257,257,257,228,257,,,,257,257,287,287,,287,,,287,,,,,287',
'287,287,,287,287,287,287,,,,,287,287,287,,287,,,,287,287,190,190,257',
'190,,257,190,257,,,,190,190,190,,190,190,190,190,,,,,190,190,190,,190',
',,,190,190,290,290,287,290,,287,290,287,,,,290,290,290,,290,290,290',
'290,,,,,290,290,290,,290,,,,290,290,337,337,190,337,,190,337,190,,,',
'337,337,337,,337,337,337,337,,,337,,337,337,337,,337,,,,337,337,162',
'162,290,162,,290,162,290,,,,162,162,162,,162,162,162,162,,,,,162,162',
'162,,162,,,,162,162,333,333,337,333,,337,333,337,,,,333,333,333,,333',
'333,333,333,,,,,333,333,333,,333,,,,333,333,121,121,162,121,,162,121',
'162,,,,121,121,121,,121,121,121,121,,,,,121,121,121,,121,,,,121,121',
'97,97,333,97,,333,,333,,,,97,97,97,,97,97,97,97,,,,,97,97,97,,97,,,',
'97,97,57,57,121,57,,121,,121,,,,57,57,57,,57,57,57,,,,,,57,57,57,,57',
',,,57,57,140,140,97,140,,97,,,,,,140,140,140,,140,140,140,140,,,,,140',
'140,140,,140,,,,140,140,,,57,,,57,,,,,,,,,,,,,,,,201,,,,,,233,233,233',
'233,233,233,,,140,,,140,201,201,201,201,201,201,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,201,201,201,201,201,201,375,233,,,,,234,234,234,234,234,234,,201',
',,,,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375',
'375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375',
'375,375,202,234,,,,,235,235,235,235,235,235,,375,,,,,202,202,202,202',
'202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,202,202,202,202,202,202,202,202,202,377,235,,,,',
'236,236,236,236,236,236,,202,,,,,377,377,377,377,377,377,377,377,377',
'377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377',
'377,377,377,377,377,377,377,377,377,447,236,,,,,237,237,237,237,237',
'237,,377,,,,,447,447,447,447,447,447,447,447,447,447,447,447,447,447',
'447,447,447,447,447,447,447,447,447,447,447,447,447,447,447,447,447',
'447,447,447,447,376,237,,,,,238,238,238,238,238,238,,447,,,,,376,376',
'376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376',
'376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,433',
'238,,,,239,239,239,239,239,239,,,376,,,,,433,433,433,433,433,433,433',
'433,433,433,433,433,433,433,433,433,433,433,433,433,433,433,433,433',
'433,433,433,433,433,433,433,433,433,433,433,239,240,240,240,240,240',
'240,241,241,241,241,241,241,433,255,255,255,255,255,255,255,255,255',
'255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255',
'255,255,255,255,255,255,255,255,255,240,,,,,,241,,,255,,,255,255,302',
'302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302',
'302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302',
',242,242,242,242,242,242,,,,,,,302,301,301,301,301,301,301,301,301,301',
'301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301',
'301,301,301,301,301,301,301,301,301,242,,,,,,301,,,,,,,301,166,166,166',
'166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166',
'166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,,,,,,,,',
',,,,,166,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292',
'292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292',
'292,292,292,,,,,,,292,,,,,,,292,330,330,330,330,330,330,330,330,330',
'330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330',
'330,330,330,330,330,330,330,330,330,,,,,,,,,,,,,,330,157,157,157,157',
'157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157',
'157,157,157,157,157,157,157,157,157,157,157,157,157,157,,,,,,,,,,,,',
'157,157,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221',
'221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221',
'221,221,221,,,,,,,,,,,,,,221,229,229,229,229,229,229,229,229,229,229',
'229,229,229,229,229,229,229,229,230,230,230,230,230,230,230,230,230',
'230,230,230,230,230,230,230,230,230,,,,,,,,,,,,,229,,,,,,,,,,,,,,,,',
',230,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334',
'334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334',
'334,334,,,,,,,,,,334,,,334,334,154,154,154,154,154,154,154,154,154,154',
'154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154',
'154,154,154,154,154,154,154,154,,,,,,,,,,,,,,154,339,339,339,339,339',
'339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339',
'339,339,339,339,339,339,339,339,339,339,339,339,339,,,,,,,,,,,,,,339',
'288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288',
'288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288',
'288,,,,,,,288,,,,,,,288,249,249,249,249,249,249,249,249,249,249,249',
'249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249',
'249,249,,,,,,,,,,,,,,,,,,,249,250,250,250,250,250,250,250,250,250,250',
'250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250',
'250,250,250,,,,,,,,,,,,,,,,,,,250,251,251,251,251,251,251,251,251,251',
'251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251',
'251,251,251,251,251,251,251,251,251,,,,,,,,,,,,,,251,252,252,252,252',
'252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252',
'252,252,252,252,252,252,252,252,252,252,252,252,252,252,,,,,,,,,,,,',
',252,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253',
'253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253',
'253,253,,,,,,,,,,,,,253,253,343,343,343,343,343,343,343,343,343,343',
'343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343',
'343,343,343,343,343,343,343,343,,,,,,,,,,343,,,,343,303,303,303,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,303,,,,,,,,,,,,',
',303,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345',
'345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345',
'345,345,,,,,,,,,,,,,,345,348,348,348,348,348,348,348,348,348,348,348',
'348,348,348,348,348,348,348,348,348,348,348,348,348,348,348,348,348',
'348,348,348,348,348,348,348,,,,,,,,,,,,,,348,305,305,305,305,305,305',
'305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305',
'305,305,305,305,305,305,305,305,305,305,305,305,,,,,,,,,,,,,,305,354',
'354,354,354,354,354,354,354,354,354,354,354,354,354,354,354,354,354',
'354,354,354,354,354,354,354,354,354,354,354,354,354,354,354,354,354',
',,,,,,,,,,,,,354,285,285,285,285,285,285,285,285,285,285,285,285,285',
'285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285',
'285,285,285,285,285,,,,,,,,,,,,,,285,143,143,143,143,143,143,143,143',
'143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143',
'143,143,143,143,143,143,143,143,143,143,,,,,,,143,,,,,,,143,304,304',
'304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304',
'304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,,,,',
',,,,,,,,,304,366,366,366,366,366,366,366,366,366,366,366,366,366,366',
'366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366',
'366,366,366,366,,,,,,,,,,,,,,366,367,367,367,367,367,367,367,367,367',
'367,367,367,367,367,367,367,367,367,367,367,367,367,367,367,367,367',
'367,367,367,367,367,367,367,367,367,,,,,,,,,,,,,,367,388,388,388,388',
'388,388,388,388,388,388,388,388,388,388,388,388,388,388,388,388,388',
'388,388,388,388,388,388,388,388,388,388,388,388,388,388,,,,,,,,,,,,',
',388,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422',
'422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422',
'422,422,,,,,,,,,,,,,,422,197,197,197,197,197,197,197,197,197,197,197',
'197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197',
'197,197,197,197,197,197,197,,,,,,,,,,,,,,197,446,446,446,446,446,446',
'446,446,446,446,446,446,446,446,446,446,446,446,446,446,446,446,446',
'446,446,446,446,446,446,446,446,446,446,446,446,,,,,,,,,,,,,,446,391',
'391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391',
'391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391',
',,,,,,,,,,,,,391' ]
        racc_action_check = arr = ::Array.new(6470, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   480,   739,    55,   nil,   260,   nil,   nil,   nil,   285,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   649,
   nil,   nil,    -2,   622,   657,   nil,   nil,   622,   nil,  3674,
   nil,    78,   625,   722,   nil,   622,   nil,   nil,   nil,   nil,
   -30,   nil,   560,   559,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  2126,   nil,  3344,   136,  1257,  4294,  1326,    96,
   nil,  1395,  1429,  1464,    -7,   nil,   248,   nil,   nil,   534,
   nil,   108,   292,   -42,   nil,   nil,   nil,  1705,   nil,  1768,
  1801,  1834,   nil,   nil,  1867,   233,   504,   462,   456,   408,
   nil,   494,   750,    -7,   446,   394,   nil,  4261,  2354,  2387,
  2420,  2453,  2486,  2519,  2552,  2585,  2618,  2651,  2684,  2717,
  2750,  2783,  2816,  2849,  2882,  2915,  2948,  2981,  3014,  3047,
  3080,  4228,  3146,  3179,  3212,  3245,  3278,  3311,  1188,  3377,
  3410,  3443,  3476,  3509,  3542,  3575,    64,   945,   437,   397,
  4327,   -48,   nil,  5981,   327,  3933,   353,   nil,   313,   312,
   nil,   nil,   256,   164,  5246,   -52,   nil,  5032,   252,   232,
   226,   nil,  4162,  3740,   240,   nil,  4885,    87,    91,  2192,
   nil,  2159,    30,    96,  2030,   nil,   536,   220,   103,   254,
   391,   347,   786,  1000,  1360,   353,   nil,  1291,  1222,  2288,
  4063,   nil,   nil,   nil,   nil,   443,   209,  6275,   253,   308,
   798,  4371,  4477,   551,   553,   558,   131,   170,   618,   119,
   nil,  1055,   nil,   nil,   nil,   nil,   397,   487,   577,   667,
  1069,  5081,  1718,  1947,  2076,  2238,  3754,  3850,  3947,  5130,
  5148,   862,   868,  4359,  4412,  4465,  4518,  4571,  4624,  4676,
  4725,  4731,  4823,   605,  1012,   569,   580,   696,   612,  5393,
  5442,  5491,  5540,  5589,  1021,  4738,   645,  3997,   nil,   nil,
   nil,   nil,   302,  3900,   649,   nil,  3837,   nil,  3804,   nil,
  1119,  3608,  1900,    81,    93,   nil,   nil,   138,   150,   153,
   222,   141,   215,   125,  2225,  5932,   224,  4030,  5344,   613,
  4096,  1671,  4934,   567,   136,   560,   530,   522,   -69,   543,
   nil,  4836,  4787,  5687,  6030,  5834,   474,   192,   102,   235,
  1498,  1567,   339,  1602,   390,   nil,   213,  1636,   162,   160,
  1997,  2063,  2321,   nil,   235,   124,     9,   -25,   177,   223,
  4983,   nil,   250,  4195,  5197,   251,   nil,  4129,   nil,  5295,
   307,   261,   nil,  5638,   nil,  5736,   nil,   nil,  5785,   314,
   nil,   312,   315,   nil,  5883,   342,   303,   nil,  3707,   nil,
   nil,   398,   397,   -20,    -7,   nil,  6079,  6128,   nil,   950,
     3,   nil,   874,   nil,   nil,  4424,  4636,  4530,   nil,   492,
   210,   nil,   499,   523,   490,  1933,  1153,   nil,  6177,   nil,
   nil,  6373,   nil,   nil,   nil,   nil,   188,   488,   nil,   nil,
   577,   nil,    53,   500,   512,   nil,   nil,   nil,   318,   582,
  1533,   nil,   612,   613,    10,   617,   nil,   617,   nil,   nil,
   607,   560,  6226,   nil,   300,   nil,   611,   -10,   616,  3113,
   nil,  3641,   660,  4689,   nil,   nil,   nil,   nil,   nil,   644,
   nil,   -19,   590,   602,   nil,   -22,  6324,  4583,    66,   570,
   707,   726,   693,   728,    80,    -3,   nil,   nil,   100,   nil,
    75,   733,   nil ]

racc_action_default = [
    -1,  -256,    -2,    -3,    -6,    -8,    -9,   -10,   -11,   -12,
   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,
   -23,   -24,   -25,   -26,   -27,   -29,   -30,   -31,   -32,  -116,
   -34,   -35,   -36,   -37,   -38,   -39,   -40,   -49,   -50,   -51,
   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,   -60,   -63,
   -64,   -65,   -69,   -72,   -75,  -256,  -116,  -116,  -119,  -116,
  -115,  -116,  -116,  -116,  -116,  -168,  -256,  -177,  -179,  -256,
  -183,  -116,  -116,  -116,  -199,  -200,  -201,  -216,  -218,  -116,
  -116,  -116,  -227,  -228,  -116,  -256,  -256,  -116,  -116,  -254,
  -255,  -256,    -5,    -7,  -256,  -256,  -187,  -116,  -116,  -116,
  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,
  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,
  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,  -116,
  -116,  -116,  -116,  -116,  -116,  -116,   -83,  -116,   -28,  -256,
  -116,   -26,   -31,  -256,  -256,  -116,   -80,   -94,   -79,   -81,
   -61,   -62,  -182,  -256,   -70,  -256,   -76,  -256,  -256,  -180,
  -184,  -188,  -116,  -116,  -101,  -102,  -127,   -35,   -37,  -116,
   -54,   -69,  -256,  -256,  -116,  -107,  -120,  -111,  -116,  -109,
  -256,  -164,  -165,  -166,  -116,  -256,  -167,  -116,  -116,  -116,
  -116,  -181,  -185,  -186,  -117,  -256,  -256,  -217,  -213,  -256,
  -256,  -256,  -256,  -256,  -256,  -256,  -236,  -242,  -256,  -256,
  -252,  -116,   463,    -4,  -180,  -170,  -129,  -130,  -131,  -132,
  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,
  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,
  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,
  -163,  -221,  -224,  -256,  -116,  -256,  -256,   -93,   -97,   -96,
  -169,   -41,   -33,  -116,  -256,   -95,  -116,   -67,  -116,   -73,
  -116,  -116,  -116,  -256,  -189,  -190,  -191,   -29,   -30,   -35,
   -36,   -37,   -39,   -52,   -75,  -256,  -256,  -116,  -127,  -256,
  -116,  -116,  -127,  -256,  -256,   -83,  -256,  -256,  -256,  -116,
  -110,  -256,  -171,  -172,  -173,  -174,  -256,  -203,  -202,  -206,
  -116,  -116,  -256,  -116,  -116,  -243,  -256,  -116,  -256,  -256,
  -116,  -116,  -116,  -233,  -256,  -256,  -241,  -256,  -105,  -122,
  -123,  -124,  -256,  -116,  -256,  -256,   -86,   -91,   -87,   -92,
   -82,   -84,   -99,  -256,   -68,   -71,   -74,   -77,   -78,  -256,
  -192,  -256,  -256,  -100,  -128,  -256,  -256,  -103,  -116,  -106,
  -108,  -256,  -116,  -256,  -207,  -204,  -214,  -215,  -219,  -256,
  -241,  -222,  -256,  -226,  -229,  -256,  -256,  -256,  -234,  -256,
  -256,  -237,  -256,  -256,  -116,  -116,  -116,  -253,  -225,   -88,
   -89,   -90,   -66,   -98,  -193,  -194,  -114,  -256,  -112,  -118,
  -256,  -205,  -256,  -256,  -208,  -209,  -220,  -244,  -245,  -256,
  -116,  -223,  -256,  -256,  -256,  -256,  -239,  -256,  -238,  -250,
  -256,  -256,  -125,  -126,  -113,  -195,  -206,  -256,  -206,  -116,
  -246,  -116,  -116,  -256,  -230,  -231,  -232,  -235,  -240,  -256,
  -104,  -256,  -256,  -210,  -211,  -256,  -212,  -256,  -247,  -116,
  -256,  -256,  -206,  -256,  -116,  -248,  -251,  -196,  -256,  -197,
  -249,  -256,  -198 ]

racc_goto_table = [
    92,     2,    27,   153,    94,    93,    27,   160,    95,   141,
   280,   158,   276,   256,   287,   278,    96,   170,   405,   382,
   407,   146,   179,     1,   149,   277,   312,   316,   168,   167,
   332,   329,   186,   210,   152,   164,   177,   172,   196,   347,
   175,   205,   206,   402,   185,   204,   352,   198,   138,   324,
   282,   213,   408,   173,   nil,   180,   nil,   nil,   430,   nil,
   nil,   nil,   363,   nil,   nil,   nil,   nil,    94,    94,   194,
   nil,    95,    95,   nil,   417,   nil,   nil,   185,   nil,   192,
   193,   444,   nil,   208,   209,   nil,   152,   nil,   nil,   nil,
   nil,    92,   nil,   nil,    27,   nil,   nil,   nil,   nil,   215,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   185,   nil,   294,   nil,   nil,   160,   276,   264,   nil,   296,
   335,   nil,   280,   281,   279,   280,   287,   278,   351,   283,
   278,   298,   260,   141,   143,   289,   nil,   277,   308,   141,
   277,   nil,   309,   nil,   141,   177,   297,   318,   319,   nil,
   276,   308,   nil,   295,   141,   328,   nil,   154,   nil,   157,
   nil,   166,   282,   166,   180,   282,   181,   182,   183,   441,
   nil,   445,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   197,   nil,   199,   200,   201,   nil,   nil,   202,
   nil,   nil,   nil,   nil,   nil,   458,   nil,   nil,   326,    27,
   nil,   nil,   nil,   216,   217,   218,   219,   220,   221,   222,
   223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
   233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
   243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
   253,   340,   255,   341,   349,   281,   279,   nil,   281,   279,
   166,   283,   nil,   nil,   283,   nil,   nil,   nil,   nil,   146,
   nil,   149,   nil,   355,   nil,   nil,   nil,   285,   288,   nil,
   nil,   381,   nil,   383,   292,   nil,   154,   nil,   nil,   288,
   nil,   nil,   nil,   nil,   nil,   361,   nil,   nil,   nil,   301,
   nil,   nil,   302,   303,   304,   305,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   370,    27,   nil,   nil,   400,
   nil,   nil,   nil,   nil,    92,   nil,   330,   nil,   nil,   nil,
   nil,   412,   413,   414,   nil,   415,   416,   nil,   418,   nil,
   397,   nil,   nil,   nil,   nil,   340,   nil,   341,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   399,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   421,    92,   334,
   nil,   nil,   339,   438,   nil,   nil,   nil,   nil,   166,   nil,
   420,   343,   nil,   345,   nil,   157,   348,   166,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   450,   nil,   451,   nil,   157,
   nil,   453,   285,   nil,   nil,   354,   166,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   461,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   366,   367,   nil,   369,   nil,
   nil,   nil,   372,   448,    27,   375,   376,   377,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    92,   nil,   388,   nil,
   455,    27,   391,    92,   nil,   460,    27,   nil,    92,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   166,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   166,   422,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   433,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   446,   nil,   447 ]

racc_goto_check = [
     4,     2,    28,    45,    53,     2,    28,    65,    42,    23,
    32,    54,    66,    52,    66,    27,    64,    41,    71,    40,
    75,    49,    58,     1,    49,    26,    73,    73,    33,    31,
    60,    61,    62,    57,    50,    56,    38,    23,    59,    48,
    55,    44,    69,    70,    23,    41,    37,    72,    25,    74,
    35,     3,    76,    53,   nil,    53,   nil,   nil,    75,   nil,
   nil,   nil,    68,   nil,   nil,   nil,   nil,    53,    53,    53,
   nil,    42,    42,   nil,    40,   nil,   nil,    23,   nil,    64,
    64,    71,   nil,    53,    53,   nil,    50,   nil,   nil,   nil,
   nil,     4,   nil,   nil,    28,   nil,   nil,   nil,   nil,    28,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    23,   nil,    45,   nil,   nil,    65,    66,    55,   nil,    54,
    52,   nil,    32,    33,    31,    32,    66,    27,    66,    38,
    27,    58,    28,    23,    22,    55,   nil,    26,    65,    23,
    26,   nil,    54,   nil,    23,    38,    55,    69,    69,   nil,
    66,    65,   nil,    50,    23,    54,   nil,    22,   nil,    22,
   nil,    22,    35,    22,    53,    35,    22,    22,    22,    68,
   nil,    68,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    22,   nil,    22,    22,    22,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,    68,   nil,   nil,     2,    28,
   nil,   nil,   nil,    22,    22,    22,    22,    22,    22,    22,
    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
    22,    49,    22,    50,    55,    33,    31,   nil,    33,    31,
    22,    38,   nil,   nil,    38,   nil,   nil,   nil,   nil,    49,
   nil,    49,   nil,    55,   nil,   nil,   nil,    22,    22,   nil,
   nil,    69,   nil,    69,    22,   nil,    22,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,    53,   nil,   nil,   nil,    22,
   nil,   nil,    22,    22,    22,    22,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,    28,   nil,   nil,    69,
   nil,   nil,   nil,   nil,     4,   nil,    22,   nil,   nil,   nil,
   nil,    69,    69,    69,   nil,    69,    69,   nil,    69,   nil,
    55,   nil,   nil,   nil,   nil,    49,   nil,    50,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    53,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    55,     4,    22,
   nil,   nil,    22,    69,   nil,   nil,   nil,   nil,    22,   nil,
    53,    22,   nil,    22,   nil,    22,    22,    22,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    69,   nil,    69,   nil,    22,
   nil,    69,    22,   nil,   nil,    22,    22,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    69,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    22,    22,   nil,    22,   nil,
   nil,   nil,    22,     2,    28,    22,    22,    22,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,    22,   nil,
     2,    28,    22,     4,   nil,     2,    28,   nil,     4,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    22,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    22,   nil,    22 ]

racc_goto_pointer = [
   nil,    23,     1,   -41,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   115,   -20,   nil,    24,  -137,  -147,     2,   nil,
   nil,   -28,  -152,   -29,   nil,  -112,   nil,  -241,   -23,   nil,
  -306,   -40,     0,   nil,   -44,   -49,   nil,   nil,  -231,   -11,
    -9,   nil,  -124,    -4,   -44,   -18,   -21,   -55,   -37,   -35,
  -181,  -180,   -32,   nil,     8,   -48,  -148,   nil,  -247,   -44,
  -321,  -346,   -30,  -173,  -157,  -350,  -318 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,   nil,    25,    26,   142,    28,
    30,    31,    32,    33,    34,    35,    36,   286,    40,    39,
    41,    42,    43,    51,    67,   nil,    53,   155,   156,   148,
   136,    68,   nil,    55,   nil,   293,   176,   nil,   nil,   nil,
   nil,   nil,    65,    66,    70,   274,   161,    73,   nil,   315,
   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 98, :_reduce_1,
  1, 98, :_reduce_2,
  1, 99, :_reduce_3,
  3, 99, :_reduce_4,
  2, 99, :_reduce_5,
  1, 99, :_reduce_6,
  2, 99, :_reduce_7,
  1, 100, :_reduce_8,
  1, 100, :_reduce_9,
  1, 100, :_reduce_10,
  1, 100, :_reduce_11,
  1, 100, :_reduce_12,
  1, 100, :_reduce_13,
  1, 100, :_reduce_14,
  1, 100, :_reduce_15,
  1, 100, :_reduce_16,
  1, 100, :_reduce_17,
  1, 100, :_reduce_18,
  1, 100, :_reduce_19,
  1, 100, :_reduce_20,
  1, 100, :_reduce_21,
  1, 100, :_reduce_22,
  1, 100, :_reduce_23,
  1, 100, :_reduce_24,
  1, 100, :_reduce_25,
  1, 119, :_reduce_26,
  1, 119, :_reduce_27,
  2, 119, :_reduce_28,
  1, 119, :_reduce_29,
  1, 119, :_reduce_30,
  1, 119, :_reduce_31,
  1, 119, :_reduce_32,
  3, 119, :_reduce_33,
  1, 120, :_reduce_34,
  1, 120, :_reduce_35,
  1, 120, :_reduce_36,
  1, 120, :_reduce_37,
  1, 120, :_reduce_38,
  1, 120, :_reduce_39,
  1, 120, :_reduce_40,
  3, 120, :_reduce_41,
  1, 134, :_reduce_42,
  1, 134, :_reduce_43,
  1, 134, :_reduce_44,
  1, 134, :_reduce_45,
  1, 134, :_reduce_46,
  1, 134, :_reduce_47,
  1, 134, :_reduce_48,
  1, 101, :_reduce_49,
  1, 101, :_reduce_50,
  1, 131, :_reduce_51,
  1, 131, :_reduce_52,
  1, 131, :_reduce_53,
  1, 131, :_reduce_54,
  1, 131, :_reduce_55,
  1, 131, :_reduce_56,
  1, 131, :_reduce_57,
  1, 136, :_reduce_58,
  1, 135, :_reduce_59,
  1, 135, :_reduce_60,
  2, 135, :_reduce_61,
  2, 135, :_reduce_62,
  1, 137, :_reduce_63,
  1, 139, :_reduce_64,
  1, 138, :_reduce_65,
  5, 141, :_reduce_66,
  3, 140, :_reduce_67,
  4, 140, :_reduce_68,
  0, 142, :_reduce_69,
  1, 142, :_reduce_70,
  3, 142, :_reduce_71,
  1, 121, :_reduce_72,
  3, 143, :_reduce_73,
  4, 143, :_reduce_74,
  0, 144, :_reduce_75,
  1, 144, :_reduce_76,
  3, 144, :_reduce_77,
  3, 145, :_reduce_78,
  2, 128, :_reduce_79,
  2, 128, :_reduce_80,
  2, 128, :_reduce_81,
  4, 128, :_reduce_82,
  2, 129, :_reduce_83,
  4, 129, :_reduce_84,
  2, 148, :_reduce_85,
  3, 147, :_reduce_86,
  3, 147, :_reduce_87,
  4, 147, :_reduce_88,
  4, 147, :_reduce_89,
  3, 149, :_reduce_90,
  2, 149, :_reduce_91,
  2, 149, :_reduce_92,
  1, 149, :_reduce_93,
  1, 146, :_reduce_94,
  2, 146, :_reduce_95,
  2, 122, :_reduce_96,
  2, 122, :_reduce_97,
  5, 132, :_reduce_98,
  4, 132, :_reduce_99,
  4, 132, :_reduce_100,
  2, 132, :_reduce_101,
  2, 132, :_reduce_102,
  4, 132, :_reduce_103,
  5, 154, :_reduce_104,
  2, 154, :_reduce_105,
  4, 114, :_reduce_106,
  2, 114, :_reduce_107,
  4, 115, :_reduce_108,
  2, 115, :_reduce_109,
  2, 155, :_reduce_110,
  1, 155, :_reduce_111,
  4, 155, :_reduce_112,
  6, 102, :_reduce_113,
  5, 102, :_reduce_114,
  1, 150, :_reduce_115,
  0, 150, :_reduce_116,
  1, 156, :_reduce_117,
  4, 156, :_reduce_118,
  0, 152, :_reduce_119,
  1, 152, :_reduce_120,
  0, 157, :_reduce_121,
  1, 157, :_reduce_122,
  1, 158, :_reduce_123,
  1, 158, :_reduce_124,
  3, 158, :_reduce_125,
  3, 158, :_reduce_126,
  1, 153, :_reduce_127,
  3, 153, :_reduce_128,
  3, 123, :_reduce_129,
  3, 123, :_reduce_130,
  3, 123, :_reduce_131,
  3, 123, :_reduce_132,
  3, 123, :_reduce_133,
  3, 123, :_reduce_134,
  3, 123, :_reduce_135,
  3, 123, :_reduce_136,
  3, 123, :_reduce_137,
  3, 123, :_reduce_138,
  3, 123, :_reduce_139,
  3, 123, :_reduce_140,
  3, 123, :_reduce_141,
  3, 123, :_reduce_142,
  3, 123, :_reduce_143,
  3, 123, :_reduce_144,
  3, 123, :_reduce_145,
  3, 123, :_reduce_146,
  3, 123, :_reduce_147,
  3, 123, :_reduce_148,
  3, 123, :_reduce_149,
  3, 123, :_reduce_150,
  3, 123, :_reduce_151,
  3, 123, :_reduce_152,
  3, 123, :_reduce_153,
  3, 123, :_reduce_154,
  3, 123, :_reduce_155,
  3, 123, :_reduce_156,
  3, 123, :_reduce_157,
  3, 123, :_reduce_158,
  3, 123, :_reduce_159,
  3, 123, :_reduce_160,
  3, 123, :_reduce_161,
  3, 123, :_reduce_162,
  3, 123, :_reduce_163,
  2, 127, :_reduce_164,
  2, 127, :_reduce_165,
  2, 127, :_reduce_166,
  2, 125, :_reduce_167,
  1, 125, :_reduce_168,
  3, 116, :_reduce_169,
  3, 116, :_reduce_170,
  3, 159, :_reduce_171,
  3, 159, :_reduce_172,
  3, 159, :_reduce_173,
  3, 159, :_reduce_174,
  1, 160, :_reduce_175,
  1, 160, :_reduce_176,
  1, 160, :_reduce_177,
  1, 160, :_reduce_178,
  1, 160, :_reduce_179,
  2, 161, :_reduce_180,
  2, 161, :_reduce_181,
  2, 161, :_reduce_182,
  1, 130, :_reduce_183,
  2, 130, :_reduce_184,
  2, 105, :_reduce_185,
  2, 105, :_reduce_186,
  2, 105, :_reduce_187,
  1, 162, :_reduce_188,
  2, 162, :_reduce_189,
  2, 162, :_reduce_190,
  2, 162, :_reduce_191,
  3, 163, :_reduce_192,
  4, 163, :_reduce_193,
  4, 163, :_reduce_194,
  6, 103, :_reduce_195,
  9, 103, :_reduce_196,
  9, 103, :_reduce_197,
  11, 103, :_reduce_198,
  1, 164, :_reduce_199,
  1, 164, :_reduce_200,
  1, 164, :_reduce_201,
  1, 151, :_reduce_202,
  1, 151, :_reduce_203,
  1, 165, :_reduce_204,
  2, 165, :_reduce_205,
  0, 165, :_reduce_206,
  0, 167, :_reduce_207,
  1, 167, :_reduce_208,
  1, 167, :_reduce_209,
  3, 167, :_reduce_210,
  3, 167, :_reduce_211,
  3, 168, :_reduce_212,
  2, 104, :_reduce_213,
  4, 104, :_reduce_214,
  4, 104, :_reduce_215,
  0, 169, :_reduce_216,
  1, 169, :_reduce_217,
  1, 113, :_reduce_218,
  4, 117, :_reduce_219,
  5, 117, :_reduce_220,
  3, 117, :_reduce_221,
  4, 118, :_reduce_222,
  5, 118, :_reduce_223,
  3, 118, :_reduce_224,
  5, 124, :_reduce_225,
  4, 108, :_reduce_226,
  1, 112, :_reduce_227,
  1, 112, :_reduce_228,
  4, 109, :_reduce_229,
  6, 107, :_reduce_230,
  6, 107, :_reduce_231,
  6, 107, :_reduce_232,
  3, 110, :_reduce_233,
  4, 110, :_reduce_234,
  6, 110, :_reduce_235,
  0, 171, :_reduce_236,
  2, 171, :_reduce_237,
  3, 171, :_reduce_238,
  3, 171, :_reduce_239,
  4, 171, :_reduce_240,
  2, 166, :_reduce_241,
  1, 166, :_reduce_242,
  1, 170, :_reduce_243,
  3, 170, :_reduce_244,
  3, 170, :_reduce_245,
  4, 170, :_reduce_246,
  3, 172, :_reduce_247,
  4, 173, :_reduce_248,
  5, 173, :_reduce_249,
  5, 111, :_reduce_250,
  8, 111, :_reduce_251,
  2, 133, :_reduce_252,
  4, 126, :_reduce_253,
  1, 126, :_reduce_254,
  1, 106, :_reduce_255 ]

racc_reduce_n = 256

racc_shift_n = 463

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :ELSEIF => 4,
  :THEN => 5,
  :UNLESS => 6,
  :END => 7,
  :WHILE => 8,
  :UNTIL => 9,
  :BREAK => 10,
  :CONTINUE => 11,
  :TRY => 12,
  :CATCH => 13,
  :FINALLY => 14,
  :FOR => 15,
  :IN => 16,
  :DEF => 17,
  :DEF_BANG => 18,
  :SPLAT => 19,
  :CALL => 20,
  :BUILTIN_COMMAND => 21,
  :CLASS => 22,
  :NEW => 23,
  :DEFM => 24,
  :DEFM_BANG => 25,
  :SUPER => 26,
  :RIML_FILE_COMMAND => 27,
  :RIML_CLASS_COMMAND => 28,
  :RETURN => 29,
  :NEWLINE => 30,
  :NUMBER => 31,
  :STRING_D => 32,
  :STRING_S => 33,
  :EX_LITERAL => 34,
  :REGEXP => 35,
  :TRUE => 36,
  :FALSE => 37,
  :LET => 38,
  :UNLET => 39,
  :UNLET_BANG => 40,
  :IDENTIFIER => 41,
  :DICT_VAL => 42,
  :SCOPE_MODIFIER => 43,
  :SCOPE_MODIFIER_LITERAL => 44,
  :SPECIAL_VAR_PREFIX => 45,
  :FINISH => 46,
  "!" => 47,
  "*" => 48,
  "/" => 49,
  "%" => 50,
  "+" => 51,
  "-" => 52,
  "." => 53,
  ">" => 54,
  ">#" => 55,
  ">?" => 56,
  "<" => 57,
  "<#" => 58,
  "<?" => 59,
  ">=" => 60,
  ">=#" => 61,
  ">=?" => 62,
  "<=" => 63,
  "<=#" => 64,
  "<=?" => 65,
  "==" => 66,
  "==?" => 67,
  "==#" => 68,
  "=~" => 69,
  "=~?" => 70,
  "=~#" => 71,
  "!~" => 72,
  "!~?" => 73,
  "!~#" => 74,
  "!=" => 75,
  "!=?" => 76,
  "!=#" => 77,
  :IS => 78,
  :ISNOT => 79,
  "&&" => 80,
  "||" => 81,
  "?" => 82,
  "=" => 83,
  "+=" => 84,
  "-=" => 85,
  ".=" => 86,
  "," => 87,
  "(" => 88,
  ")" => 89,
  ";" => 90,
  "[" => 91,
  "]" => 92,
  "{" => 93,
  "}" => 94,
  ":" => 95,
  "===" => 96 }

racc_nt_base = 97

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "ELSEIF",
  "THEN",
  "UNLESS",
  "END",
  "WHILE",
  "UNTIL",
  "BREAK",
  "CONTINUE",
  "TRY",
  "CATCH",
  "FINALLY",
  "FOR",
  "IN",
  "DEF",
  "DEF_BANG",
  "SPLAT",
  "CALL",
  "BUILTIN_COMMAND",
  "CLASS",
  "NEW",
  "DEFM",
  "DEFM_BANG",
  "SUPER",
  "RIML_FILE_COMMAND",
  "RIML_CLASS_COMMAND",
  "RETURN",
  "NEWLINE",
  "NUMBER",
  "STRING_D",
  "STRING_S",
  "EX_LITERAL",
  "REGEXP",
  "TRUE",
  "FALSE",
  "LET",
  "UNLET",
  "UNLET_BANG",
  "IDENTIFIER",
  "DICT_VAL",
  "SCOPE_MODIFIER",
  "SCOPE_MODIFIER_LITERAL",
  "SPECIAL_VAR_PREFIX",
  "FINISH",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\".\"",
  "\">\"",
  "\">#\"",
  "\">?\"",
  "\"<\"",
  "\"<#\"",
  "\"<?\"",
  "\">=\"",
  "\">=#\"",
  "\">=?\"",
  "\"<=\"",
  "\"<=#\"",
  "\"<=?\"",
  "\"==\"",
  "\"==?\"",
  "\"==#\"",
  "\"=~\"",
  "\"=~?\"",
  "\"=~#\"",
  "\"!~\"",
  "\"!~?\"",
  "\"!~#\"",
  "\"!=\"",
  "\"!=?\"",
  "\"!=#\"",
  "IS",
  "ISNOT",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\"=\"",
  "\"+=\"",
  "\"-=\"",
  "\".=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\":\"",
  "\"===\"",
  "$start",
  "Root",
  "Statements",
  "Statement",
  "Terminator",
  "ExplicitCall",
  "Def",
  "Return",
  "UnletVariable",
  "ExLiteral",
  "For",
  "While",
  "Until",
  "Try",
  "ClassDefinition",
  "LoopKeyword",
  "EndScript",
  "RimlFileCommand",
  "RimlClassCommand",
  "MultiAssign",
  "If",
  "Unless",
  "Expression",
  "ExpressionWithoutDictLiteral",
  "Dictionary",
  "DictGetWithDotLiteral",
  "BinaryOperator",
  "Ternary",
  "Assign",
  "Super",
  "UnaryOperator",
  "DictGet",
  "ListOrDictGet",
  "AllVariableRetrieval",
  "LiteralWithoutDictLiteral",
  "Call",
  "ObjectInstantiation",
  "PossibleStringValue",
  "String",
  "Number",
  "Regexp",
  "List",
  "ScopeModifierLiteral",
  "ListLiteral",
  "ListUnpack",
  "ListItems",
  "DictionaryLiteral",
  "DictItems",
  "DictItem",
  "DictGetWithDot",
  "ListOrDictGetWithBrackets",
  "ListOrDictGetAssign",
  "SubList",
  "Scope",
  "DefCallIdentifier",
  "ArgList",
  "ArgListWithoutNothing",
  "ObjectInstantiationCall",
  "ClassArgList",
  "SIDAndScope",
  "ArgListWithSplat",
  "ArgListWithoutNothingWithSplat",
  "AssignExpression",
  "AssignLHS",
  "VariableRetrieval",
  "CurlyBraceName",
  "CurlyBraceVarPart",
  "FunctionType",
  "DefKeywords",
  "Block",
  "ParamList",
  "DefaultParam",
  "Returnable",
  "IfBlock",
  "Catch",
  "ElseBlock",
  "ElseifBlock" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_1(val, _values, result)
     result = make_node(val) { |_| Riml::Nodes.new([]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 41)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_3(val, _values, result)
     result = make_node(val) { |v| Riml::Nodes.new([ v[0] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_6(val, _values, result)
     result = make_node(val) { |_| Riml::Nodes.new([]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_7(val, _values, result)
     result = make_node(val) { |v| Riml::Nodes.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_21(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_26(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_27(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_28(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_32(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_33(val, _values, result)
     result = make_node(val) { |v| Riml::WrapInParensNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 87)
  def _reduce_34(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_35(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_37(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_38(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_40(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_41(val, _values, result)
     result = make_node(val) { |v| Riml::WrapInParensNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_42(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_45(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_47(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_48(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_49(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_50(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_51(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_52(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_53(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_55(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_56(val, _values, result)
     result = make_node(val) { |_| Riml::TrueNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_57(val, _values, result)
     result = make_node(val) { |_| Riml::FalseNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_58(val, _values, result)
     result = make_node(val) { |v| Riml::NumberNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_59(val, _values, result)
     result = make_node(val) { |v| Riml::StringNode.new(v[0], :s) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_60(val, _values, result)
     result = make_node(val) { |v| Riml::StringNode.new(v[0], :d) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_61(val, _values, result)
     result = make_node(val) { |v| Riml::StringLiteralConcatNode.new(v[0], Riml::StringNode.new(v[1], :s)) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_62(val, _values, result)
     result = make_node(val) { |v| Riml::StringLiteralConcatNode.new(v[0], Riml::StringNode.new(v[1], :d)) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_63(val, _values, result)
     result = make_node(val) { |v| Riml::RegexpNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_64(val, _values, result)
     result = make_node(val) { |v| Riml::ScopeModifierLiteralNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_65(val, _values, result)
     result = make_node(val) { |v| Riml::ListNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_66(val, _values, result)
     result = make_node(val) { |v| Riml::ListUnpackNode.new(v[1] << v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_67(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_68(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_69(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_70(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_71(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_72(val, _values, result)
     result = make_node(val) { |v| Riml::DictionaryNode.new(v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_73(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_74(val, _values, result)
     result = Hash[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_75(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_76(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_77(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_78(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_79(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_80(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_81(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 187)
  def _reduce_82(val, _values, result)
     result = make_node(val) { |v| Riml::DictGetDotNode.new(Riml::WrapInParensNode.new(v[1]), v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_83(val, _values, result)
     result = make_node(val) { |v| Riml::ListOrDictGetNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 192)
  def _reduce_84(val, _values, result)
     result = make_node(val) { |v| Riml::ListOrDictGetNode.new(Riml::WrapInParensNode.new(v[1]), v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 196)
  def _reduce_85(val, _values, result)
     result = make_node(val) { |v| Riml::ListOrDictGetNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 200)
  def _reduce_86(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 201)
  def _reduce_87(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_88(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 203)
  def _reduce_89(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 207)
  def _reduce_90(val, _values, result)
     result = make_node(val) { |v| Riml::SublistNode.new([v[0], Riml::LiteralNode.new(' : '), v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_91(val, _values, result)
     result = make_node(val) { |v| Riml::SublistNode.new([v[0], Riml::LiteralNode.new(' :')]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 209)
  def _reduce_92(val, _values, result)
     result = make_node(val) { |v| Riml::SublistNode.new([Riml::LiteralNode.new(': '), v[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 210)
  def _reduce_93(val, _values, result)
     result = make_node(val) { |_| Riml::SublistNode.new([Riml::LiteralNode.new(':')]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 214)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 215)
  def _reduce_95(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 219)
  def _reduce_96(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 220)
  def _reduce_97(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 224)
  def _reduce_98(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(v[0], v[1], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 225)
  def _reduce_99(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_100(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 227)
  def _reduce_101(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 228)
  def _reduce_102(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(nil, v[0], []) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_103(val, _values, result)
     result = make_node(val) { |v| Riml::ExplicitCallNode.new(nil, nil, v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_104(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(v[0], v[1], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_105(val, _values, result)
     result = make_node(val) { |v| Riml::CallNode.new(v[0], v[1], []) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 238)
  def _reduce_106(val, _values, result)
     result = make_node(val) { |v| Riml::RimlFileCommandNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 239)
  def _reduce_107(val, _values, result)
     result = make_node(val) { |v| Riml::RimlFileCommandNode.new(nil, v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 243)
  def _reduce_108(val, _values, result)
     result = make_node(val) { |v| Riml::RimlClassCommandNode.new(nil, v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_109(val, _values, result)
     result = make_node(val) { |v| Riml::RimlClassCommandNode.new(nil, v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 248)
  def _reduce_110(val, _values, result)
     result = ["#{val[0]}#{val[1]}"] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 249)
  def _reduce_111(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 250)
  def _reduce_112(val, _values, result)
     result = val[0].concat ["#{val[2]}#{val[3]}"] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 254)
  def _reduce_113(val, _values, result)
     result = make_node(val) { |v| Riml::ExplicitCallNode.new(v[1], v[2], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 255)
  def _reduce_114(val, _values, result)
     result = make_node(val) { |v| Riml::ExplicitCallNode.new(nil, v[1], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 259)
  def _reduce_115(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 260)
  def _reduce_116(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 265)
  def _reduce_117(val, _values, result)
     result = [ nil, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 266)
  def _reduce_118(val, _values, result)
     result = [ make_node(val) { |v| Riml::SIDNode.new(v[1]) }, val[3] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 270)
  def _reduce_119(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 271)
  def _reduce_120(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 275)
  def _reduce_121(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 276)
  def _reduce_122(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_123(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_124(val, _values, result)
     result = [ make_node(val) { |v| Riml::SplatNode.new(v[0]) } ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 282)
  def _reduce_125(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 283)
  def _reduce_126(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::SplatNode.new(v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 287)
  def _reduce_127(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 288)
  def _reduce_128(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_129(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_130(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 295)
  def _reduce_131(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 296)
  def _reduce_132(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 297)
  def _reduce_133(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 300)
  def _reduce_134(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 302)
  def _reduce_135(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 303)
  def _reduce_136(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 304)
  def _reduce_137(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_138(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 307)
  def _reduce_139(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 308)
  def _reduce_140(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 310)
  def _reduce_141(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 311)
  def _reduce_142(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 312)
  def _reduce_143(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 314)
  def _reduce_144(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 315)
  def _reduce_145(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_146(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_147(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 319)
  def _reduce_148(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 320)
  def _reduce_149(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 322)
  def _reduce_150(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 323)
  def _reduce_151(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 324)
  def _reduce_152(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 326)
  def _reduce_153(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 327)
  def _reduce_154(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_155(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 330)
  def _reduce_156(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 331)
  def _reduce_157(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 332)
  def _reduce_158(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 333)
  def _reduce_159(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_160(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_161(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 337)
  def _reduce_162(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 338)
  def _reduce_163(val, _values, result)
     result = make_node(val) { |v| Riml::BinaryOperatorNode.new(v[1], [v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 342)
  def _reduce_164(val, _values, result)
     result = make_node(val) { |v| Riml::UnaryOperatorNode.new(val[0], [val[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 343)
  def _reduce_165(val, _values, result)
     result = make_node(val) { |v| Riml::UnaryOperatorNode.new(val[0], [val[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 344)
  def _reduce_166(val, _values, result)
     result = make_node(val) { |v| Riml::UnaryOperatorNode.new(val[0], [val[1]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 349)
  def _reduce_167(val, _values, result)
     result = make_node(val) { |v| Riml::AssignNode.new(v[1][0], v[1][1], v[1][2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 350)
  def _reduce_168(val, _values, result)
     result = make_node(val) { |v| Riml::AssignNode.new(v[0][0], v[0][1], v[0][2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 354)
  def _reduce_169(val, _values, result)
     result = make_node(val) { |v| Riml::MultiAssignNode.new([v[0], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 355)
  def _reduce_170(val, _values, result)
     val[0].assigns << val[2]; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 360)
  def _reduce_171(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 361)
  def _reduce_172(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 362)
  def _reduce_173(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 363)
  def _reduce_174(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 367)
  def _reduce_175(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 368)
  def _reduce_176(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 369)
  def _reduce_177(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 370)
  def _reduce_178(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 371)
  def _reduce_179(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 376)
  def _reduce_180(val, _values, result)
     result = make_node(val) { |v| Riml::GetVariableNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 377)
  def _reduce_181(val, _values, result)
     result = make_node(val) { |v| Riml::GetSpecialVariableNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_182(val, _values, result)
     result = make_node(val) { |v| Riml::GetVariableByScopeAndDictNameNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 382)
  def _reduce_183(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 383)
  def _reduce_184(val, _values, result)
     result = make_node(val) { |v| Riml::GetCurlyBraceNameNode.new(v[0], v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 387)
  def _reduce_185(val, _values, result)
     result = make_node(val) { |v| Riml::UnletVariableNode.new('!', [ v[1] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 388)
  def _reduce_186(val, _values, result)
     result = make_node(val) { |v| Riml::UnletVariableNode.new('!', [ v[1] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 389)
  def _reduce_187(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 393)
  def _reduce_188(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBraceVariable.new([ v[0] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 394)
  def _reduce_189(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBraceVariable.new([ Riml::CurlyBracePart.new(v[0]), v[1] ]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 395)
  def _reduce_190(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::CurlyBracePart.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 396)
  def _reduce_191(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 400)
  def _reduce_192(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBracePart.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 401)
  def _reduce_193(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBracePart.new([v[1], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 402)
  def _reduce_194(val, _values, result)
     result = make_node(val) { |v| Riml::CurlyBracePart.new([v[1], v[2]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 408)
  def _reduce_195(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], [], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 409)
  def _reduce_196(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], v[4], v[6], v[7]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 410)
  def _reduce_197(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], [v[4]], v[6], v[7]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 411)
  def _reduce_198(val, _values, result)
     result = make_node(val) { |v| Riml.const_get(val[0]).new('!', v[1][0], v[1][1], v[2], v[4] << v[6], v[8], v[9]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 415)
  def _reduce_199(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 416)
  def _reduce_200(val, _values, result)
     result = "DefNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 417)
  def _reduce_201(val, _values, result)
     result = "DefMethodNode" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 422)
  def _reduce_202(val, _values, result)
     result = make_node(val) { |v| Riml::GetCurlyBraceNameNode.new('', v[0]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 423)
  def _reduce_203(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 428)
  def _reduce_204(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 429)
  def _reduce_205(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 430)
  def _reduce_206(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 434)
  def _reduce_207(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 435)
  def _reduce_208(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 436)
  def _reduce_209(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 437)
  def _reduce_210(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 438)
  def _reduce_211(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 442)
  def _reduce_212(val, _values, result)
     result = make_node(val) { |v| Riml::DefaultParamNode.new(v[0], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 446)
  def _reduce_213(val, _values, result)
     result = make_node(val) { |v| Riml::ReturnNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 447)
  def _reduce_214(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[3], Nodes.new([ReturnNode.new(v[1])])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 448)
  def _reduce_215(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[3], Nodes.new([ReturnNode.new(v[1])])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 452)
  def _reduce_216(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 453)
  def _reduce_217(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 457)
  def _reduce_218(val, _values, result)
     result = make_node(val) { |_| Riml::FinishNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 462)
  def _reduce_219(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 463)
  def _reduce_220(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[1], Riml::Nodes.new([v[3]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 464)
  def _reduce_221(val, _values, result)
     result = make_node(val) { |v| Riml::IfNode.new(v[2], Riml::Nodes.new([v[0]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 468)
  def _reduce_222(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 469)
  def _reduce_223(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[1], Riml::Nodes.new([v[3]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 470)
  def _reduce_224(val, _values, result)
     result = make_node(val) { |v| Riml::UnlessNode.new(v[2], Riml::Nodes.new([v[0]])) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 474)
  def _reduce_225(val, _values, result)
     result = make_node(val) { |v| Riml::TernaryOperatorNode.new([v[0], v[2], v[4]]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 478)
  def _reduce_226(val, _values, result)
     result = make_node(val) { |v| Riml::WhileNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 482)
  def _reduce_227(val, _values, result)
     result = make_node(val) { |_| Riml::BreakNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 483)
  def _reduce_228(val, _values, result)
     result = make_node(val) { |_| Riml::ContinueNode.new } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 487)
  def _reduce_229(val, _values, result)
     result = make_node(val) { |v| Riml::UntilNode.new(v[1], v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 491)
  def _reduce_230(val, _values, result)
     result = make_node(val) { |v| Riml::ForNode.new(v[1], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 492)
  def _reduce_231(val, _values, result)
     result = make_node(val) { |v| Riml::ForNode.new(v[1], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 493)
  def _reduce_232(val, _values, result)
     result = make_node(val) { |v| Riml::ForNode.new(v[1], v[3], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 497)
  def _reduce_233(val, _values, result)
     result = make_node(val) { |v| Riml::TryNode.new(v[1], nil, nil) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 498)
  def _reduce_234(val, _values, result)
     result = make_node(val) { |v| Riml::TryNode.new(v[1], v[2], nil) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 499)
  def _reduce_235(val, _values, result)
     result = make_node(val) { |v| Riml::TryNode.new(v[1], v[2], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 503)
  def _reduce_236(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 504)
  def _reduce_237(val, _values, result)
     result = [ make_node(val) { |v| Riml::CatchNode.new(nil, v[1]) } ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 505)
  def _reduce_238(val, _values, result)
     result = [ make_node(val) { |v| Riml::CatchNode.new(v[1], v[2]) } ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 506)
  def _reduce_239(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::CatchNode.new(nil, v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 507)
  def _reduce_240(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::CatchNode.new(v[2], v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 514)
  def _reduce_241(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 515)
  def _reduce_242(val, _values, result)
     result = make_node(val) { |_| Riml::Nodes.new([]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 519)
  def _reduce_243(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 520)
  def _reduce_244(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 521)
  def _reduce_245(val, _values, result)
     result = val[1] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 522)
  def _reduce_246(val, _values, result)
     result = val[1] << val[2] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 526)
  def _reduce_247(val, _values, result)
     result = make_node(val) { |v| Riml::ElseNode.new(v[2]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 530)
  def _reduce_248(val, _values, result)
     result = make_node(val) { |v| Riml::Nodes.new([Riml::ElseifNode.new(v[1], v[3])]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 531)
  def _reduce_249(val, _values, result)
     result = val[0] << make_node(val) { |v| Riml::ElseifNode.new(v[2], v[4]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 535)
  def _reduce_250(val, _values, result)
     result = make_node(val) { |v| Riml::ClassDefinitionNode.new(v[1], v[2], nil, v[3]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 536)
  def _reduce_251(val, _values, result)
     result = make_node(val) { |v| Riml::ClassDefinitionNode.new(v[1], v[2], (v[4] || ClassDefinitionNode::DEFAULT_SCOPE_MODIFIER) + v[5], v[6]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 540)
  def _reduce_252(val, _values, result)
     result = make_node(val) { |v| Riml::ObjectInstantiationNode.new(v[1]) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 544)
  def _reduce_253(val, _values, result)
     result = make_node(val) { |v| Riml::SuperNode.new(v[2], true) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 545)
  def _reduce_254(val, _values, result)
     result = make_node(val) { |_| Riml::SuperNode.new([], false) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 549)
  def _reduce_255(val, _values, result)
     result = make_node(val) { |v| Riml::ExLiteralNode.new(v[0]) } 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Riml
