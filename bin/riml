#!/usr/bin/env ruby
# vim: syntax=ruby

require File.expand_path("../../lib/riml/environment", __FILE__)

module Riml
  include Environment
  require 'riml'

  require 'optparse'
  require 'ostruct'

  class Options
    def self.parse(argv)
      argv << '--help' if argv.size.zero?

      # defaults
      options = OpenStruct.new
      options.compile_files = []
      options.check_syntax_files = []
      options.repl = false
      options.vi_readline = false
      options.allow_undefined_global_classes = DEFAULT_PARSE_OPTIONS[:allow_undefined_global_classes]
      options.include_reordering = DEFAULT_PARSE_OPTIONS[:include_reordering]
      options.readable = DEFAULT_COMPILE_OPTIONS[:readable]
      options.output_dir = DEFAULT_COMPILE_FILES_OPTIONS[:output_dir]

      OptionParser.new do |opts|
        opts.banner = "Usage: riml [options] [file1][,file2]..."
        opts.separator ""
        opts.separator "Specific options:"

        opts.on("-c", "--compile FILES", Array, "Compiles riml file(s) to VimL.") do |filenames|
          append_filenames_to_list_if_valid(options.compile_files, *filenames)
        end

        opts.on("-s", "--stdio", "Takes riml from stdin and outputs VimL to stdout.") do
          options.stdio = true
        end

        opts.on("-k", "--check FILES", Array, "Checks syntax of file(s). Because Riml is (mostly) compatible with VimL, this can also be used to check VimL syntax.") do |filenames|
          append_filenames_to_list_if_valid(options.check_syntax_files, *filenames)
        end

        opts.on("-S", "--source-path PATH", "Colon-separated path riml uses to find files for `riml_source`. Defaults to pwd.") do |path|
          begin
            Riml.source_path = path
          rescue UserArgumentError => e
            abort e.message
          end
        end

        opts.on("-I", "--include-path PATH", "Colon-separated path riml uses to find files for `riml_include`. Defaults to pwd.") do |path|
          begin
            Riml.include_path = path
          rescue UserArgumentError => e
            abort e.message
          end
        end

        opts.on("-a", "--allow-undef-global-classes", "Continue compilation when encountering undefined global class(es).") do
          options.allow_undefined_global_classes = true
        end

        opts.on("-n", "--no-include-reordering", "Turns off default feature of reordering `riml_include`s based on class dependencies.") do
          options.include_reordering = false
        end

        opts.on("-o", "--output-dir DIR", "Output all .vim files in specified directory.") do |dir|
          options.output_dir = dir
        end

        opts.on("-d", "--condensed", "Omit readability improvements such as blank lines.") do
          options.readable = false
        end

        opts.on("-i", "--interactive", "Start an interactive riml session (REPL).") do
          options.repl = true
        end

        opts.on("--vi", "Use vi readline settings during interactive session.") do
          options.vi_readline = options.repl =  true
        end

        opts.on_tail("-v", "--version", "Show riml version.") do
          puts VERSION.join('.')
          exit
        end

        opts.on_tail("-h", "--help", "Show this message.") do
          puts opts
          exit
        end
      end.parse!(argv)

      options
    end

    private

    def self.append_filenames_to_list_if_valid(list, *filenames)
      filenames.each do |fname|
        expanded = File.expand_path(fname)
        readable = true
        if File.exists?(expanded) && (readable = File.readable?(expanded))
          list << fname
        elsif not readable
          abort "File #{expanded.inspect} is not readable."
        else
          abort "Couldn't find file #{expanded.inspect}."
        end
      end
    end
  end

  class Runner
    class << self
      def start
        options = Options.parse(ARGV)
        compile_options = {
          :readable => options.readable,
          :allow_undefined_global_classes => options.allow_undefined_global_classes,
          :include_reordering => options.include_reordering
        }
        compile_files_options = compile_options.merge(
          :output_dir => options.output_dir
        )
        if options.stdio
          puts Riml.compile($stdin.read, compile_options)
        elsif options.compile_files.any?
          FileRollback.trap(:INT, :QUIT, :KILL) { print("\n"); exit 1 }
          Riml.compile_files(*options.compile_files, compile_files_options)
        elsif options.check_syntax_files.any?
          files = options.check_syntax_files.uniq
          Riml.check_syntax_files(*files)
          size = files.size
          # "ok (1 file)" OR "ok (2 files)"
          puts "ok (#{size} file#{'s' if size > 1})"
        elsif options.repl
          require 'riml/repl'
          Riml::Repl.new(options.vi_readline, compile_options).run
        else
          ARGV.replace ['--help']
          start
        end
      end
    end
  end
  Runner.start
end
